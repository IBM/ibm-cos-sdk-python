

**
S3
**

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: S3.Client

  A low-level client representing Amazon Simple Storage Service (S3)::

    
    import ibm_boto3
    
    client = ibm_boto3.client('s3')

  
  These are the available methods:
  
  *   :py:meth:`~S3.Client.abort_multipart_upload`

  
  *   :py:meth:`~S3.Client.add_legal_hold`

  
  *   :py:meth:`~S3.Client.can_paginate`

  
  *   :py:meth:`~S3.Client.complete_multipart_upload`

  
  *   :py:meth:`~S3.Client.copy`

  
  *   :py:meth:`~S3.Client.copy_object`

  
  *   :py:meth:`~S3.Client.create_bucket`

  
  *   :py:meth:`~S3.Client.create_multipart_upload`

  
  *   :py:meth:`~S3.Client.delete_bucket`

  
  *   :py:meth:`~S3.Client.delete_bucket_analytics_configuration`

  
  *   :py:meth:`~S3.Client.delete_bucket_cors`

  
  *   :py:meth:`~S3.Client.delete_bucket_inventory_configuration`

  
  *   :py:meth:`~S3.Client.delete_bucket_lifecycle`

  
  *   :py:meth:`~S3.Client.delete_bucket_metrics_configuration`

  
  *   :py:meth:`~S3.Client.delete_bucket_policy`

  
  *   :py:meth:`~S3.Client.delete_bucket_replication`

  
  *   :py:meth:`~S3.Client.delete_bucket_tagging`

  
  *   :py:meth:`~S3.Client.delete_bucket_website`

  
  *   :py:meth:`~S3.Client.delete_legal_hold`

  
  *   :py:meth:`~S3.Client.delete_object`

  
  *   :py:meth:`~S3.Client.delete_objects`

  
  *   :py:meth:`~S3.Client.download_file`

  
  *   :py:meth:`~S3.Client.download_fileobj`

  
  *   :py:meth:`~S3.Client.extend_object_retention`

  
  *   :py:meth:`~S3.Client.generate_presigned_post`

  
  *   :py:meth:`~S3.Client.generate_presigned_url`

  
  *   :py:meth:`~S3.Client.get_bucket_accelerate_configuration`

  
  *   :py:meth:`~S3.Client.get_bucket_acl`

  
  *   :py:meth:`~S3.Client.get_bucket_analytics_configuration`

  
  *   :py:meth:`~S3.Client.get_bucket_aspera`

  
  *   :py:meth:`~S3.Client.get_bucket_cors`

  
  *   :py:meth:`~S3.Client.get_bucket_inventory_configuration`

  
  *   :py:meth:`~S3.Client.get_bucket_lifecycle_configuration`

  
  *   :py:meth:`~S3.Client.get_bucket_location`

  
  *   :py:meth:`~S3.Client.get_bucket_metrics_configuration`

  
  *   :py:meth:`~S3.Client.get_bucket_protection_configuration`

  
  *   :py:meth:`~S3.Client.get_bucket_replication`

  
  *   :py:meth:`~S3.Client.get_bucket_tagging`

  
  *   :py:meth:`~S3.Client.get_bucket_versioning`

  
  *   :py:meth:`~S3.Client.get_bucket_website`

  
  *   :py:meth:`~S3.Client.get_object`

  
  *   :py:meth:`~S3.Client.get_object_acl`

  
  *   :py:meth:`~S3.Client.get_object_torrent`

  
  *   :py:meth:`~S3.Client.get_paginator`

  
  *   :py:meth:`~S3.Client.get_waiter`

  
  *   :py:meth:`~S3.Client.head_bucket`

  
  *   :py:meth:`~S3.Client.head_object`

  
  *   :py:meth:`~S3.Client.list_bucket_analytics_configurations`

  
  *   :py:meth:`~S3.Client.list_bucket_inventory_configurations`

  
  *   :py:meth:`~S3.Client.list_bucket_metrics_configurations`

  
  *   :py:meth:`~S3.Client.list_buckets`

  
  *   :py:meth:`~S3.Client.list_buckets_extended`

  
  *   :py:meth:`~S3.Client.list_legal_holds`

  
  *   :py:meth:`~S3.Client.list_multipart_uploads`

  
  *   :py:meth:`~S3.Client.list_object_versions`

  
  *   :py:meth:`~S3.Client.list_objects`

  
  *   :py:meth:`~S3.Client.list_objects_v2`

  
  *   :py:meth:`~S3.Client.list_parts`

  
  *   :py:meth:`~S3.Client.put_bucket_accelerate_configuration`

  
  *   :py:meth:`~S3.Client.put_bucket_acl`

  
  *   :py:meth:`~S3.Client.put_bucket_analytics_configuration`

  
  *   :py:meth:`~S3.Client.put_bucket_cors`

  
  *   :py:meth:`~S3.Client.put_bucket_inventory_configuration`

  
  *   :py:meth:`~S3.Client.put_bucket_lifecycle_configuration`

  
  *   :py:meth:`~S3.Client.put_bucket_metrics_configuration`

  
  *   :py:meth:`~S3.Client.put_bucket_protection_configuration`

  
  *   :py:meth:`~S3.Client.put_bucket_replication`

  
  *   :py:meth:`~S3.Client.put_bucket_tagging`

  
  *   :py:meth:`~S3.Client.put_bucket_versioning`

  
  *   :py:meth:`~S3.Client.put_bucket_website`

  
  *   :py:meth:`~S3.Client.put_object`

  
  *   :py:meth:`~S3.Client.put_object_acl`

  
  *   :py:meth:`~S3.Client.restore_object`

  
  *   :py:meth:`~S3.Client.upload_file`

  
  *   :py:meth:`~S3.Client.upload_fileobj`

  
  *   :py:meth:`~S3.Client.upload_part`

  
  *   :py:meth:`~S3.Client.upload_part_copy`

  

  .. py:method:: abort_multipart_upload(**kwargs)

    

    This operation aborts a multipart upload. After a multipart upload is aborted, no additional parts can be uploaded using that upload ID. The storage consumed by any previously uploaded parts will be freed. However, if any part uploads are currently in progress, those part uploads might or might not succeed. As a result, it might be necessary to abort a given multipart upload multiple times in order to completely free all storage consumed by all parts. 

     

    To verify that all parts have been removed, so you don't get charged for the part storage, you should call the  ListParts operation and ensure that the parts list is empty.

     

    For information about permissions required to use the multipart upload API, see `Multipart Upload API and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ .

     

    The following operations are related to ``AbortMultipartUpload`` :

     

     
    *  CreateMultipartUpload   
     
    *  UploadPart   
     
    *  CompleteMultipartUpload   
     
    *  ListParts   
     
    *  ListMultipartUploads   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/AbortMultipartUpload>`_    


    **Request Syntax** 
    ::

      response = client.abort_multipart_upload(
          Bucket='string',
          Key='string',
          UploadId='string',
          RequestPayer='requester'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name to which the upload was taking place. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      Key of the object for which the multipart upload was initiated.

      

    
    :type UploadId: string
    :param UploadId: **[REQUIRED]** 

      Upload ID that identifies the multipart upload.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: add_legal_hold(**kwargs)

    Add a legal hold on an object. The legal hold identifiers are stored in the object metadata along with the timestamp of when they are POSTed to the object. The presence of any legal hold identifiers prevents the modification or deletion of the object data, even if the retention period has expired. Legal Holds can only be added to objects in a bucket with a protection policy. Otherwise a 400 error will be returned.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/AddLegalHold>`_    


    **Request Syntax** 
    ::

      response = client.add_legal_hold(
          Bucket='string',
          Key='string',
          RetentionLegalHoldId='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

    
    :type Key: string
    :param Key: **[REQUIRED]** 

    
    :type RetentionLegalHoldId: string
    :param RetentionLegalHoldId: **[REQUIRED]** 

    
    
    :returns: None

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: complete_multipart_upload(**kwargs)

    

    Completes a multipart upload by assembling previously uploaded parts.

     

    You first initiate the multipart upload and then upload all parts using the  UploadPart operation. After successfully uploading all relevant parts of an upload, you call this operation to complete the upload. Upon receiving this request, Amazon S3 concatenates all the parts in ascending order by part number to create a new object. In the Complete Multipart Upload request, you must provide the parts list. You must ensure that the parts list is complete. This operation concatenates the parts that you provide in the list. For each part in the list, you must provide the part number and the ``ETag`` value, returned after that part was uploaded.

     

    Processing of a Complete Multipart Upload request could take several minutes to complete. After Amazon S3 begins processing the request, it sends an HTTP response header that specifies a 200 OK response. While processing is in progress, Amazon S3 periodically sends white space characters to keep the connection from timing out. Because a request could fail after the initial 200 OK response has been sent, it is important that you check the response body to determine whether the request succeeded.

     

    Note that if ``CompleteMultipartUpload`` fails, applications should be prepared to retry the failed requests. For more information, see `Amazon S3 Error Best Practices <https://docs.aws.amazon.com/AmazonS3/latest/dev/ErrorBestPractices.html>`__ .

     

    For more information about multipart uploads, see `Uploading Objects Using Multipart Upload <https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html>`__ .

     

    For information about permissions required to use the multipart upload API, see `Multipart Upload API and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ .

     

     ``GetBucketLifecycle`` has the following special errors:

     

     
    * Error code: ``EntityTooSmall``   

       
      * Description: Your proposed upload is smaller than the minimum allowed object size. Each part must be at least 5 MB in size, except the last part. 
       
      * 400 Bad Request 
       

     
     
    * Error code: ``InvalidPart``   

       
      * Description: One or more of the specified parts could not be found. The part might not have been uploaded, or the specified entity tag might not have matched the part's entity tag. 
       
      * 400 Bad Request 
       

     
     
    * Error code: ``InvalidPartOrder``   

       
      * Description: The list of parts was not in ascending order. The parts list must be specified in order by part number. 
       
      * 400 Bad Request 
       

     
     
    * Error code: ``NoSuchUpload``   

       
      * Description: The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed. 
       
      * 404 Not Found 
       

     
     

     

    The following operations are related to ``DeleteBucketMetricsConfiguration`` :

     

     
    *  CreateMultipartUpload   
     
    *  UploadPart   
     
    *  AbortMultipartUpload   
     
    *  ListParts   
     
    *  ListMultipartUploads   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/CompleteMultipartUpload>`_    


    **Request Syntax** 
    ::

      response = client.complete_multipart_upload(
          Bucket='string',
          Key='string',
          MultipartUpload={
              'Parts': [
                  {
                      'ETag': 'string',
                      'PartNumber': 123
                  },
              ]
          },
          UploadId='string',
          RequestPayer='requester',
          RetentionExpirationDate=datetime(2015, 1, 1),
          RetentionLegalHoldId='string',
          RetentionPeriod=123
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Name of the bucket to which the multipart upload was initiated.

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      Object key for which the multipart upload was initiated.

      

    
    :type MultipartUpload: dict
    :param MultipartUpload: 

      The container for the multipart upload request information.

      

    
      - **Parts** *(list) --* 

        Array of CompletedPart data types.

        

      
        - *(dict) --* 

          Details of the parts that were uploaded.

          

        
          - **ETag** *(string) --* 

            Entity tag returned when the part was uploaded.

            

          
          - **PartNumber** *(integer) --* 

            Part number that identifies the part. This is a positive integer between 1 and 10,000.

            

          
        
    
    
    :type UploadId: string
    :param UploadId: **[REQUIRED]** 

      ID for the initiated multipart upload.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type RetentionExpirationDate: datetime
    :param RetentionExpirationDate: Date on which it will be legal to delete or modify the object. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used.

    
    :type RetentionLegalHoldId: string
    :param RetentionLegalHoldId: A single legal hold to apply to the object. A legal hold is a character long string of max length 64. The object cannot be overwritten or deleted until all legal holds associated with the object are removed.

    
    :type RetentionPeriod: integer
    :param RetentionPeriod: Retention period to store on the object in seconds. RetentionPeriod and RetentionExpirationDate are mutually exclusive, if neither is specified the bucket's DefaultRetentionPeriod value will be used. **Indefinite retention(-1)** is a valid value. **Permanent retention(-2)**, is valid only if permanent retention is enabled for the bucket. **0** is a valid value if the bucket's MinimumRetention period is also 0.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Location': 'string',
            'Bucket': 'string',
            'Key': 'string',
            'Expiration': 'string',
            'ETag': 'string',
            'ServerSideEncryption': 'AES256',
            'VersionId': 'string',
            'SSEKMSKeyId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Location** *(string) --* 

          The URI that identifies the newly created object.

          
        

        - **Bucket** *(string) --* 

          The name of the bucket that contains the newly created object.

          
        

        - **Key** *(string) --* 

          The object key of the newly created object.

          
        

        - **Expiration** *(string) --* 

          If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.

          
        

        - **ETag** *(string) --* 

          Entity tag that identifies the newly created object's data. Objects with different object data will have different entity tags. The entity tag is an opaque string. The entity tag may or may not be an MD5 digest of the object data. If the entity tag is not an MD5 digest of the object data, it will contain one or more nonhexadecimal characters and/or will consist of less than 32 or more than 32 hexadecimal digits.

          
        

        - **ServerSideEncryption** *(string) --* 

          If you specified server-side encryption either with an Amazon S3-managed encryption key or an AWS KMS customer master key (CMK) in your initiate multipart upload request, the response includes this header. It confirms the encryption algorithm that Amazon S3 used to encrypt the object.

          
        

        - **VersionId** *(string) --* 

          Version ID of the newly created object, in case the bucket has versioning turned on.

          
        

        - **SSEKMSKeyId** *(string) --* 

          If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric customer managed customer master key (CMK) that was used for the object.

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: copy(CopySource, Bucket, Key, ExtraArgs=None, Callback=None, SourceClient=None, Config=None)

        
    Copy an object from one S3 location to another.
    
    This is a managed transfer which will perform a multipart copy in
    multiple threads if necessary.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.resource('s3')
        copy_source = {
            'Bucket': 'mybucket',
            'Key': 'mykey'
        }
        s3.meta.client.copy(copy_source, 'otherbucket', 'otherkey')
    
    :type CopySource: dict
    :param CopySource: The name of the source bucket, key name of the
        source object, and optional version ID of the source object. The
        dictionary format is:
        ``{'Bucket': 'bucket', 'Key': 'key', 'VersionId': 'id'}``. Note
        that the ``VersionId`` key is optional and may be omitted.
    
    :type Bucket: str
    :param Bucket: The name of the bucket to copy to
    
    :type Key: str
    :param Key: The name of the key to copy to
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the copy.
    
    :type SourceClient: ibm_botocore or ibm_boto3 Client
    :param SourceClient: The client to be used for operation that
        may happen at the source object. For example, this client is
        used for the head_object that determines the size of the copy.
        If no client is provided, the current client is used as the client
        for the source object.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        copy.


  .. py:method:: copy_object(**kwargs)

    

    Creates a copy of an object that is already stored in Amazon S3.

     

    .. note::

       

      You can store individual objects of up to 5 TB in Amazon S3. You create a copy of your object up to 5 GB in size in a single atomic operation using this API. However, for copying an object greater than 5 GB, you must use the multipart upload Upload Part - Copy API. For more information, see `Copy Object Using the REST Multipart Upload API <https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjctsUsingRESTMPUapi.html>`__ .

       

     

    When copying an object, you can preserve all metadata (default) or specify new metadata. However, the ACL is not preserved and is set to private for the user making the request. To override the default ACL setting, specify a new ACL when generating a copy request. For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ .

     

    .. warning::

       

      Amazon S3 transfer acceleration does not support cross-region copies. If you request a cross-region copy using a transfer acceleration endpoint, you get a 400 ``Bad Request`` error. For more information about transfer acceleration, see `Transfer Acceleration <https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html>`__ .

       

     

    All copy requests must be authenticated. Additionally, you must have *read* access to the source object and *write* access to the destination bucket. For more information, see `REST Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html>`__ . Both the Region that you want to copy the object from and the Region that you want to copy the object to must be enabled for your account.

     

    To only copy an object under certain conditions, such as whether the ``Etag`` matches or whether the object was modified before or after a specified date, use the request parameters ``x-amz-copy-source-if-match`` , ``x-amz-copy-source-if-none-match`` , ``x-amz-copy-source-if-unmodified-since`` , or ``x-amz-copy-source-if-modified-since`` .

     

    .. note::

       

      All headers with the ``x-amz-`` prefix, including ``x-amz-copy-source`` , must be signed.

       

     

    You can use this operation to change the storage class of an object that is already stored in Amazon S3 using the ``StorageClass`` parameter. For more information, see `Storage Classes <https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html>`__ .

     

    The source object that you are copying can be encrypted or unencrypted. If the source object is encrypted, it can be encrypted by server-side encryption using AWS managed encryption keys or by using a customer-provided encryption key. When copying an object, you can request that Amazon S3 encrypt the target object by using either the AWS managed encryption keys or by using your own encryption key. You can do this regardless of the form of server-side encryption that was used to encrypt the source, or even if the source object was not encrypted. For more information about server-side encryption, see `Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html>`__ .

     

    A copy request might return an error when Amazon S3 receives the copy request or while Amazon S3 is copying the files. If the error occurs before the copy operation starts, you receive a standard Amazon S3 error. If the error occurs during the copy operation, the error response is embedded in the ``200 OK`` response. This means that a ``200 OK`` response can contain either a success or an error. Design your application to parse the contents of the response and handle it appropriately.

     

    If the copy is successful, you receive a response with information about the copied object.

     

    .. note::

       

      If the request is an HTTP 1.1 request, the response is chunk encoded. If it were not, it would not contain the content-length, and you would need to read the entire body.

       

     

    Consider the following when using request headers:

     

     
    * Consideration 1 – If both the ``x-amz-copy-source-if-match`` and ``x-amz-copy-source-if-unmodified-since`` headers are present in the request and evaluate as follows, Amazon S3 returns 200 OK and copies the data: 

       
      * ``x-amz-copy-source-if-match`` condition evaluates to true 
       
      * ``x-amz-copy-source-if-unmodified-since`` condition evaluates to false 
       

     
     
    * Consideration 2 – If both of the ``x-amz-copy-source-if-none-match`` and ``x-amz-copy-source-if-modified-since`` headers are present in the request and evaluate as follows, Amazon S3 returns the ``412 Precondition Failed`` response code: 

       
      * ``x-amz-copy-source-if-none-match`` condition evaluates to false 
       
      * ``x-amz-copy-source-if-modified-since`` condition evaluates to true 
       

     
     

     

    The copy request charge is based on the storage class and Region you specify for the destination object. For pricing information, see `Amazon S3 Pricing <https://aws.amazon.com/s3/pricing/>`__ .

     

    Following are other considerations when using ``CopyObject`` :

      Versioning  

    By default, ``x-amz-copy-source`` identifies the current version of an object to copy. (If the current version is a delete marker, Amazon S3 behaves as if the object was deleted.) To copy a different version, use the ``versionId`` subresource.

     

    If you enable versioning on the target bucket, Amazon S3 generates a unique version ID for the object being copied. This version ID is different from the version ID of the source object. Amazon S3 returns the version ID of the copied object in the ``x-amz-version-id`` response header in the response.

     

    If you do not enable versioning or suspend it on the target bucket, the version ID that Amazon S3 generates is always null.

     

    If the source object's storage class is GLACIER, you must restore a copy of this object before you can use it as a source object for the copy operation. For more information, see .

      Access Permissions  

    When copying an object, you can optionally specify the accounts or groups that should be granted specific permissions on the new object. There are two ways to grant the permissions using the request headers:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . 
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

      Server-Side- Encryption-Specific Request Headers  

    To encrypt the target object, you must provide the appropriate encryption-related request headers. The one you use depends on whether you want to use AWS managed encryption keys or provide your own encryption key. 

     

     
    * To encrypt the target object using server-side encryption with an AWS managed encryption key, provide the following request headers, as appropriate. 

       
      * ``x-amz-server-side​-encryption``   
       
      * ``x-amz-server-side-encryption-aws-kms-key-id``   
       
      * ``x-amz-server-side-encryption-context``   
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data. If you want to use a customer managed AWS KMS CMK, you must provide the ``x-amz-server-side-encryption-aws-kms-key-id`` of the symmetric customer managed CMK. Amazon S3 only supports symmetric CMKs and not asymmetric CMKs. For more information, see `Using Symmetric and Asymmetric Keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html>`__ in the *AWS Key Management Service Developer Guide* .

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * To encrypt the target object using server-side encryption with an encryption key that you provide, use the following headers. 

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     
     
    * If the source object is encrypted using server-side encryption with customer-provided encryption keys, you must use the following headers. 

       
      * x-amz-copy-source​-server-side​-encryption​-customer-algorithm 
       
      * x-amz-copy-source​-server-side​-encryption​-customer-key 
       
      * x-amz-copy-source-​server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in Amazon KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

      Access-Control-List (ACL)-Specific Request Headers  

    You also can use the following access control–related headers with this operation. By default, all objects are private. Only the owner has full access control. When adding a new object, you can grant permissions to individual AWS accounts or to predefined groups defined by Amazon S3. These permissions are then added to the access control list (ACL) on the object. For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ . With this operation, you can grant access permissions using one of the following two methods:

     

     
    * Specify a canned ACL (``x-amz-acl`` ) — Amazon S3 supports a set of predefined ACLs, known as *canned ACLs* . Each canned ACL has a predefined set of grantees and permissions. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly — To explicitly grant access permissions to specific AWS accounts or groups, use the following headers. Each header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . In the header, you specify a list of grantees who get the specific permission. To grant permissions explicitly, use: 

       
      * x-amz-grant-read 
       
      * x-amz-grant-write 
       
      * x-amz-grant-read-acp 
       
      * x-amz-grant-write-acp 
       
      * x-amz-grant-full-control 
       

     

    You specify each grantee as a type=value pair, where the type is one of the following:

     

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants the AWS accounts identified by email addresses permissions to read object data and its metadata:

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

       

    The following operations are related to ``CopyObject`` :

     

     
    *  PutObject   
     
    *  GetObject   
     

     

    For more information, see `Copying Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjectsExamples.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/CopyObject>`_    


    **Request Syntax** 
    ::

      response = client.copy_object(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read'|'aws-exec-read'|'bucket-owner-read'|'bucket-owner-full-control',
          Bucket='string',
          CacheControl='string',
          ContentDisposition='string',
          ContentEncoding='string',
          ContentLanguage='string',
          ContentType='string',
          CopySource='string' or {'Bucket': 'string', 'Key': 'string', 'VersionId': 'string'},
          CopySourceIfMatch='string',
          CopySourceIfModifiedSince=datetime(2015, 1, 1),
          CopySourceIfNoneMatch='string',
          CopySourceIfUnmodifiedSince=datetime(2015, 1, 1),
          Expires=datetime(2015, 1, 1),
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWriteACP='string',
          Key='string',
          Metadata={
              'string': 'string'
          },
          MetadataDirective='COPY'|'REPLACE',
          RetentionDirective='COPY'|'REPLACE',
          RetentionExpirationDate=datetime(2015, 1, 1),
          RetentionLegalHoldId='string',
          RetentionPeriod=123,
          ServerSideEncryption='AES256',
          StorageClass='ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
          WebsiteRedirectLocation='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          SSEKMSKeyId='string',
          CopySourceSSECustomerAlgorithm='string',
          CopySourceSSECustomerKey='string',
          RequestPayer='requester'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the object.

      

    
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the destination bucket.

      

    
    :type CacheControl: string
    :param CacheControl: 

      Specifies caching behavior along the request/reply chain.

      

    
    :type ContentDisposition: string
    :param ContentDisposition: 

      Specifies presentational information for the object.

      

    
    :type ContentEncoding: string
    :param ContentEncoding: 

      Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.

      

    
    :type ContentLanguage: string
    :param ContentLanguage: 

      The language the content is in.

      

    
    :type ContentType: string
    :param ContentType: 

      A standard MIME type describing the format of the object data.

      

    
    :type CopySource: str or dict
    :param CopySource: **[REQUIRED]** The name of the source bucket, key name of the source object, and optional version ID of the source object.  You can either provide this value as a string or a dictionary.  The string form is {bucket}/{key} or {bucket}/{key}?versionId={versionId} if you want to copy a specific version.  You can also provide this value as a dictionary.  The dictionary format is recommended over the string format because it is more explicit.  The dictionary format is: {'Bucket': 'bucket', 'Key': 'key', 'VersionId': 'id'}.  Note that the VersionId key is optional and may be omitted.

    
    :type CopySourceIfMatch: string
    :param CopySourceIfMatch: 

      Copies the object if its entity tag (ETag) matches the specified tag.

      

    
    :type CopySourceIfModifiedSince: datetime
    :param CopySourceIfModifiedSince: 

      Copies the object if it has been modified since the specified time.

      

    
    :type CopySourceIfNoneMatch: string
    :param CopySourceIfNoneMatch: 

      Copies the object if its entity tag (ETag) is different than the specified ETag.

      

    
    :type CopySourceIfUnmodifiedSince: datetime
    :param CopySourceIfUnmodifiedSince: 

      Copies the object if it hasn't been modified since the specified time.

      

    
    :type Expires: datetime
    :param Expires: 

      The date and time at which the object is no longer cacheable.

      

    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to read the object data and its metadata.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the object ACL.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable object.

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      The key of the destination object.

      

    
    :type Metadata: dict
    :param Metadata: 

      A map of metadata to store with the object in S3.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type MetadataDirective: string
    :param MetadataDirective: 

      Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request.

      

    
    :type RetentionDirective: string
    :param RetentionDirective: This header controls how the Protection state of the source object is copied to the destination object.If copied, the retention period and all legal holds are copied onto the new object. The legal hold date's is set to the date of the copy.

    
    :type RetentionExpirationDate: datetime
    :param RetentionExpirationDate: Date on which it will be legal to delete or modify the object. This field can only be specified if Retention-Directive is REPLACE. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used. 

    
    :type RetentionLegalHoldId: string
    :param RetentionLegalHoldId: A single legal hold to apply to the object. This field can only be specified if Retention-Directive is REPLACE. A legal hold is a character long string of max length 64. The object cannot be overwritten or deleted until all legal holds associated with the object are removed.

    
    :type RetentionPeriod: integer
    :param RetentionPeriod: Retention period to store on the object in seconds. This field can only be specified if Retention-Directive is REPLACE. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.

    
    :type ServerSideEncryption: string
    :param ServerSideEncryption: 

      The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

      

    
    :type StorageClass: string
    :param StorageClass: 

      The type of storage to use for the object. Defaults to 'STANDARD'.

      

    
    :type WebsiteRedirectLocation: string
    :param WebsiteRedirectLocation: 

      If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type SSEKMSKeyId: string
    :param SSEKMSKeyId: 

      Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. For information about configuring using any of the officially supported AWS SDKs and AWS CLI, see `Specifying the Signature Version in Request Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version>`__ in the *Amazon S3 Developer Guide* .

      

    
    :type CopySourceSSECustomerAlgorithm: string
    :param CopySourceSSECustomerAlgorithm: 

      Specifies the algorithm to use when decrypting the source object (for example, AES256).

      

    
    :type CopySourceSSECustomerKey: string
    :param CopySourceSSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.

      

    
    :type CopySourceSSECustomerKeyMD5: string
    :param CopySourceSSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CopyObjectResult': {
                'ETag': 'string',
                'LastModified': datetime(2015, 1, 1)
            },
            'Expiration': 'string',
            'CopySourceVersionId': 'string',
            'VersionId': 'string',
            'ServerSideEncryption': 'AES256',
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CopyObjectResult** *(dict) --* 

          Container for all response elements.

          
          

          - **ETag** *(string) --* 

            Returns the ETag of the new object. The ETag reflects only changes to the contents of an object, not its metadata. The source and destination ETag is identical for a successfully copied object.

            
          

          - **LastModified** *(datetime) --* 

            Returns the date that the object was last modified.

            
      
        

        - **Expiration** *(string) --* 

          If the object expiration is configured, the response includes this header.

          
        

        - **CopySourceVersionId** *(string) --* 

          Version of the copied object in the destination bucket.

          
        

        - **VersionId** *(string) --* 

          Version ID of the newly created copy.

          
        

        - **ServerSideEncryption** *(string) --* 

          The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* 

          If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric customer managed customer master key (CMK) that was used for the object.

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: create_bucket(**kwargs)

    

    Creates a new bucket. To create a bucket, you must register with Amazon S3 and have a valid AWS Access Key ID to authenticate requests. Anonymous requests are never allowed to create buckets. By creating the bucket, you become the bucket owner.

     

    Not every string is an acceptable bucket name. For information on bucket naming restrictions, see `Working with Amazon S3 Buckets <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html>`__ .

     

    By default, the bucket is created in the US East (N. Virginia) Region. You can optionally specify a Region in the request body. You might choose a Region to optimize latency, minimize costs, or address regulatory requirements. For example, if you reside in Europe, you will probably find it advantageous to create buckets in the EU (Ireland) Region. For more information, see `How to Select a Region for Your Buckets <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro>`__ .

     

    .. note::

       

      If you send your create bucket request to the ``s3.amazonaws.com`` endpoint, the request goes to the us-east-1 Region. Accordingly, the signature calculations in Signature Version 4 must use us-east-1 as the Region, even if the location constraint in the request specifies another Region where the bucket is to be created. If you create a bucket in a Region other than US East (N. Virginia), your application must be able to handle 307 redirect. For more information, see `Virtual Hosting of Buckets <https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html>`__ .

       

     

    When creating a bucket using this operation, you can optionally specify the accounts or groups that should be granted specific permissions on the bucket. There are two ways to grant the appropriate permissions using the request headers.

     

     
    * Specify a canned ACL using the ``x-amz-acl`` request header. Amazon S3 supports a set of predefined ACLs, known as *canned ACLs* . Each canned ACL has a predefined set of grantees and permissions. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly using the ``x-amz-grant-read`` , ``x-amz-grant-write`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. These headers map to the set of permissions Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . You specify each grantee as a type=value pair, where the type is one of the following: 

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants the AWS accounts identified by email addresses permissions to read object data and its metadata:

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

     

    .. note::

       

      You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

       

     

    The following operations are related to ``CreateBucket`` :

     

     
    *  PutObject   
     
    *  DeleteBucket   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/CreateBucket>`_    


    **Request Syntax** 
    ::

      response = client.create_bucket(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read',
          Bucket='string',
          CreateBucketConfiguration={
              'LocationConstraint': 'us-standard'|'us-vault'|'us-cold'|'us-flex'|'us-east-standard'|'us-east-vault'|'us-east-cold'|'us-east-flex'|'us-south-standard'|'us-south-vault'|'us-south-cold'|'us-south-flex'|'eu-standard'|'eu-vault'|'eu-cold'|'eu-flex'|'eu-gb-standard'|'eu-gb-vault'|'eu-gb-cold'|'eu-gb-flex'|'eu-de-standard'|'eu-de-vault'|'eu-de-cold'|'eu-de-flex'|'ap-standard'|'ap-vault'|'ap-cold'|'ap-flex'|'ams03-standard'|'ams03-vault'|'ams03-cold'|'ams03-flex'|'che01-standard'|'che01-vault'|'che01-cold'|'che01-flex'|'mel01-standard'|'mel01-vault'|'mel01-cold'|'mel01-flex'|'osl01-standard'|'osl01-vault'|'osl01-cold'|'osl01-flex'|'sao01-standard'|'sao01-vault'|'sao01-cold'|'sao01-flex'|'tor01-standard'|'tor01-vault'|'tor01-cold'|'tor01-flex'
          },
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWrite='string',
          GrantWriteACP='string',
          IBMServiceInstanceId='string',
          IBMSSEKPEncryptionAlgorithm='AES256',
          IBMSSEKPCustomerRootKeyCrn='string'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the bucket.

      

    
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket to create.

      

    
    :type CreateBucketConfiguration: dict
    :param CreateBucketConfiguration: 

      The configuration information for the bucket.

      

    
      - **LocationConstraint** *(string) --* 

        Specifies the Region where the bucket will be created. If you don't specify a Region, the bucket is created in the US East (N. Virginia) Region (us-east-1).

        

      
    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to list the objects in the bucket.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the bucket ACL.

      

    
    :type GrantWrite: string
    :param GrantWrite: 

      Allows grantee to create, overwrite, and delete any object in the bucket.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable bucket.

      

    
    :type IBMServiceInstanceId: string
    :param IBMServiceInstanceId: The storage account who will be the owner of the bucket.

    
    :type IBMSSEKPEncryptionAlgorithm: string
    :param IBMSSEKPEncryptionAlgorithm: The encryption algorithm that will be used for objects stored in the newly created bucket. Defaults to 'AES256'

    
    :type IBMSSEKPCustomerRootKeyCrn: string
    :param IBMSSEKPCustomerRootKeyCrn: Container for describing the KMS-KP Key CRN.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Location': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Location** *(string) --* 

          Specifies the Region where the bucket will be created. If you are creating a bucket on the US East (N. Virginia) Region (us-east-1), you do not need to specify the location.

          
    

  .. py:method:: create_multipart_upload(**kwargs)

    

    This operation initiates a multipart upload and returns an upload ID. This upload ID is used to associate all of the parts in the specific multipart upload. You specify this upload ID in each of your subsequent upload part requests (see  UploadPart ). You also include this upload ID in the final request to either complete or abort the multipart upload request.

     

    For more information about multipart uploads, see `Multipart Upload Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html>`__ .

     

    If you have configured a lifecycle rule to abort incomplete multipart uploads, the upload must complete within the number of days specified in the bucket lifecycle configuration. Otherwise, the incomplete multipart upload becomes eligible for an abort operation and Amazon S3 aborts the multipart upload. For more information, see `Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config>`__ .

     

    For information about the permissions required to use the multipart upload API, see `Multipart Upload API and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ .

     

    For request signing, multipart upload is just a series of regular requests. You initiate a multipart upload, send one or more requests to upload parts, and then complete the multipart upload process. You sign each request individually. There is nothing special about signing multipart upload requests. For more information about signing, see `Authenticating Requests (AWS Signature Version 4) <https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html>`__ .

     

    .. note::

       

      After you initiate a multipart upload and upload one or more parts, to stop being charged for storing the uploaded parts, you must either complete or abort the multipart upload. Amazon S3 frees up the space used to store the parts and stop charging you for storing them only after you either complete or abort a multipart upload. 

       

     

    You can optionally request server-side encryption. For server-side encryption, Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. You can provide your own encryption key, or use AWS Key Management Service (AWS KMS) customer master keys (CMKs) or Amazon S3-managed encryption keys. If you choose to provide your own encryption key, the request headers you provide in  UploadPart ) and  UploadPartCopy ) requests must match the headers you used in the request to initiate the upload by using ``CreateMultipartUpload`` . 

     

    To perform a multipart upload with encryption using an AWS KMS CMK, the requester must have permission to the ``kms:Encrypt`` , ``kms:Decrypt`` , ``kms:ReEncrypt*`` , ``kms:GenerateDataKey*`` , and ``kms:DescribeKey`` actions on the key. These permissions are required because Amazon S3 must decrypt and read data from the encrypted file parts before it completes the multipart upload.

     

    If your AWS Identity and Access Management (IAM) user or role is in the same AWS account as the AWS KMS CMK, then you must have these permissions on the key policy. If your IAM user or role belongs to a different account than the key, then you must have the permissions on both the key policy and your IAM user or role.

     

    For more information, see `Protecting Data Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html>`__ .

      Access Permissions  

    When copying an object, you can optionally specify the accounts or groups that should be granted specific permissions on the new object. There are two ways to grant the permissions using the request headers:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . 
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

      Server-Side- Encryption-Specific Request Headers  

    You can optionally tell Amazon S3 to encrypt data at rest using server-side encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. The option you use depends on whether you want to use AWS managed encryption keys or provide your own encryption key. 

     

     
    * Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys used to encrypt data, specify the following headers in the request. 

       
      * x-amz-server-side​-encryption 
       
      * x-amz-server-side-encryption-aws-kms-key-id 
       
      * x-amz-server-side-encryption-context 
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data.

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * Use customer-provided encryption keys – If you want to manage your own encryption keys, provide all the following headers in the request. 

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

      Access-Control-List (ACL)-Specific Request Headers  

    You also can use the following access control–related headers with this operation. By default, all objects are private. Only the owner has full access control. When adding a new object, you can grant permissions to individual AWS accounts or to predefined groups defined by Amazon S3. These permissions are then added to the access control list (ACL) on the object. For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ . With this operation, you can grant access permissions using one of the following two methods:

     

     
    * Specify a canned ACL (``x-amz-acl`` ) — Amazon S3 supports a set of predefined ACLs, known as *canned ACLs* . Each canned ACL has a predefined set of grantees and permissions. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly — To explicitly grant access permissions to specific AWS accounts or groups, use the following headers. Each header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . In the header, you specify a list of grantees who get the specific permission. To grant permissions explicitly, use: 

       
      * x-amz-grant-read 
       
      * x-amz-grant-write 
       
      * x-amz-grant-read-acp 
       
      * x-amz-grant-write-acp 
       
      * x-amz-grant-full-control 
       

     

    You specify each grantee as a type=value pair, where the type is one of the following:

     

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants the AWS accounts identified by email addresses permissions to read object data and its metadata:

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

       

    The following operations are related to ``CreateMultipartUpload`` :

     

     
    *  UploadPart   
     
    *  CompleteMultipartUpload   
     
    *  AbortMultipartUpload   
     
    *  ListParts   
     
    *  ListMultipartUploads   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/CreateMultipartUpload>`_    


    **Request Syntax** 
    ::

      response = client.create_multipart_upload(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read'|'aws-exec-read'|'bucket-owner-read'|'bucket-owner-full-control',
          Bucket='string',
          CacheControl='string',
          ContentDisposition='string',
          ContentEncoding='string',
          ContentLanguage='string',
          ContentType='string',
          Expires=datetime(2015, 1, 1),
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWriteACP='string',
          Key='string',
          Metadata={
              'string': 'string'
          },
          ServerSideEncryption='AES256',
          StorageClass='ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
          WebsiteRedirectLocation='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          SSEKMSKeyId='string',
          RequestPayer='requester'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the object.

      

    
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket to which to initiate the upload

      

    
    :type CacheControl: string
    :param CacheControl: 

      Specifies caching behavior along the request/reply chain.

      

    
    :type ContentDisposition: string
    :param ContentDisposition: 

      Specifies presentational information for the object.

      

    
    :type ContentEncoding: string
    :param ContentEncoding: 

      Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.

      

    
    :type ContentLanguage: string
    :param ContentLanguage: 

      The language the content is in.

      

    
    :type ContentType: string
    :param ContentType: 

      A standard MIME type describing the format of the object data.

      

    
    :type Expires: datetime
    :param Expires: 

      The date and time at which the object is no longer cacheable.

      

    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to read the object data and its metadata.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the object ACL.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable object.

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      Object key for which the multipart upload is to be initiated.

      

    
    :type Metadata: dict
    :param Metadata: 

      A map of metadata to store with the object in S3.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type ServerSideEncryption: string
    :param ServerSideEncryption: 

      The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

      

    
    :type StorageClass: string
    :param StorageClass: 

      The type of storage to use for the object. Defaults to 'STANDARD'.

      

    
    :type WebsiteRedirectLocation: string
    :param WebsiteRedirectLocation: 

      If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type SSEKMSKeyId: string
    :param SSEKMSKeyId: Ignored by COS if present.

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AbortDate': datetime(2015, 1, 1),
            'AbortRuleId': 'string',
            'Bucket': 'string',
            'Key': 'string',
            'UploadId': 'string',
            'ServerSideEncryption': 'AES256',
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **AbortDate** *(datetime) --* 

          If the bucket has a lifecycle rule configured with an action to abort incomplete multipart uploads and the prefix in the lifecycle rule matches the object name in the request, the response includes this header. The header indicates when the initiated multipart upload becomes eligible for an abort operation. For more information, see `Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config>`__ .

           

          The response also includes the ``x-amz-abort-rule-id`` header that provides the ID of the lifecycle configuration rule that defines this action.

          
        

        - **AbortRuleId** *(string) --* 

          This header is returned along with the ``x-amz-abort-date`` header. It identifies the applicable lifecycle configuration rule that defines the action to abort incomplete multipart uploads.

          
        

        - **Bucket** *(string) --* 

          Name of the bucket to which the multipart upload was initiated. 

           

          When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

          
        

        - **Key** *(string) --* 

          Object key for which the multipart upload was initiated.

          
        

        - **UploadId** *(string) --* 

          ID for the initiated multipart upload.

          
        

        - **ServerSideEncryption** *(string) --* 

          The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* 

          If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric customer managed customer master key (CMK) that was used for the object.

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: delete_bucket(**kwargs)

    

    Deletes the bucket. All objects (including all object versions and delete markers) in the bucket must be deleted before the bucket itself can be deleted.

     

     **Related Resources**  

     

     
    * 
     
    * 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucket>`_    


    **Request Syntax** 
    ::

      response = client.delete_bucket(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Specifies the bucket being deleted.

      

    
    
    :returns: None

  .. py:method:: delete_bucket_analytics_configuration(**kwargs)

    

    Deletes an analytics configuration for the bucket (specified by the analytics configuration ID).

     

    To use this operation, you must have permissions to perform the ``s3:PutAnalyticsConfiguration`` action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev//using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

    For information about the Amazon S3 analytics feature, see `Amazon S3 Analytics – Storage Class Analysis <https://docs.aws.amazon.com/AmazonS3/latest/dev/analytics-storage-class.html>`__ . 

     

    The following operations are related to ``DeleteBucketAnalyticsConfiguration`` :

     

     
    * 
     
    * 
     
    * 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketAnalyticsConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.delete_bucket_analytics_configuration(
          Bucket='string',
          Id='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket from which an analytics configuration is deleted.

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID that identifies the analytics configuration.

      

    
    
    :returns: None

  .. py:method:: delete_bucket_cors(**kwargs)

    

    Deletes the ``cors`` configuration information set for the bucket.

     

    To use this operation, you must have permission to perform the ``s3:PutBucketCORS`` action. The bucket owner has this permission by default and can grant this permission to others. 

     

    For information about ``cors`` , see `Enabling Cross-Origin Resource Sharing <https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

     **Related Resources:**  

     

     
    * 
     
    *  RESTOPTIONSobject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketCors>`_    


    **Request Syntax** 
    ::

      response = client.delete_bucket_cors(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Specifies the bucket whose ``cors`` configuration is being deleted.

      

    
    
    :returns: None

  .. py:method:: delete_bucket_inventory_configuration(**kwargs)

    

    Deletes an inventory configuration (identified by the inventory ID) from the bucket.

     

    To use this operation, you must have permissions to perform the ``s3:PutInventoryConfiguration`` action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

    For information about the Amazon S3 inventory feature, see `Amazon S3 Inventory <https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html>`__ .

     

    Operations related to ``DeleteBucketInventoryConfiguration`` include: 

     

     
    *  GetBucketInventoryConfiguration   
     
    *  PutBucketInventoryConfiguration   
     
    *  ListBucketInventoryConfigurations   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketInventoryConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.delete_bucket_inventory_configuration(
          Bucket='string',
          Id='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket containing the inventory configuration to delete.

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID used to identify the inventory configuration.

      

    
    
    :returns: None

  .. py:method:: delete_bucket_lifecycle(**kwargs)

    

    Deletes the lifecycle configuration from the specified bucket. Amazon S3 removes all the lifecycle configuration rules in the lifecycle subresource associated with the bucket. Your objects never expire, and Amazon S3 no longer automatically deletes any objects on the basis of rules contained in the deleted lifecycle configuration.

     

    To use this operation, you must have permission to perform the ``s3:PutLifecycleConfiguration`` action. By default, the bucket owner has this permission and the bucket owner can grant this permission to others.

     

    There is usually some time lag before lifecycle configuration deletion is fully propagated to all the Amazon S3 systems.

     

    For more information about the object expiration, see `Elements to Describe Lifecycle Actions <https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#intro-lifecycle-rules-actions>`__ .

     

    Related actions include:

     

     
    *  PutBucketLifecycleConfiguration   
     
    *  GetBucketLifecycleConfiguration   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketLifecycle>`_    


    **Request Syntax** 
    ::

      response = client.delete_bucket_lifecycle(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name of the lifecycle to delete.

      

    
    
    :returns: None

  .. py:method:: delete_bucket_metrics_configuration(**kwargs)

    

    Deletes a metrics configuration for the Amazon CloudWatch request metrics (specified by the metrics configuration ID) from the bucket. Note that this doesn't include the daily storage metrics.

     

    To use this operation, you must have permissions to perform the ``s3:PutMetricsConfiguration`` action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

    For information about CloudWatch request metrics for Amazon S3, see `Monitoring Metrics with Amazon CloudWatch <https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html>`__ . 

     

    The following operations are related to ``DeleteBucketMetricsConfiguration`` :

     

     
    *  GetBucketMetricsConfiguration   
     
    *  PutBucketMetricsConfiguration   
     
    *  ListBucketMetricsConfigurations   
     
    * `Monitoring Metrics with Amazon CloudWatch <https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html>`__   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketMetricsConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.delete_bucket_metrics_configuration(
          Bucket='string',
          Id='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket containing the metrics configuration to delete.

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID used to identify the metrics configuration.

      

    
    
    :returns: None

  .. py:method:: delete_bucket_policy(**kwargs)

    

    This implementation of the DELETE operation uses the policy subresource to delete the policy of a specified bucket. If you are using an identity other than the root user of the AWS account that owns the bucket, the calling identity must have the ``DeleteBucketPolicy`` permissions on the specified bucket and belong to the bucket owner's account to use this operation. 

     

    If you don't have ``DeleteBucketPolicy`` permissions, Amazon S3 returns a ``403 Access Denied`` error. If you have the correct permissions, but you're not using an identity that belongs to the bucket owner's account, Amazon S3 returns a ``405 Method Not Allowed`` error. 

     

    .. warning::

       

      As a security precaution, the root user of the AWS account that owns a bucket can always use this operation, even if the policy explicitly denies the root user the ability to perform this action.

       

     

    For more information about bucket policies, see `Using Bucket Policies and UserPolicies < https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html>`__ . 

     

    The following operations are related to ``DeleteBucketPolicy``  

     

     
    *  CreateBucket   
     
    *  DeleteObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketPolicy>`_    


    **Request Syntax** 
    ::

      response = client.delete_bucket_policy(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name.

      

    
    
    :returns: None

  .. py:method:: delete_bucket_replication(**kwargs)

    

    Deletes the replication configuration from the bucket.

     

    To use this operation, you must have permissions to perform the ``s3:PutReplicationConfiguration`` action. The bucket owner has these permissions by default and can grant it to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ . 

     

    .. note::

       

      It can take a while for the deletion of a replication configuration to fully propagate.

       

     

    For information about replication configuration, see `Replication < https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html>`__ in the *Amazon S3 Developer Guide* . 

     

    The following operations are related to ``DeleteBucketReplication`` :

     

     
    *  PutBucketReplication   
     
    *  GetBucketReplication   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketReplication>`_    


    **Request Syntax** 
    ::

      response = client.delete_bucket_replication(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name. 

      

    
    
    :returns: None

  .. py:method:: delete_bucket_tagging(**kwargs)

    

    Deletes the tags from the bucket.

     

    To use this operation, you must have permission to perform the ``s3:PutBucketTagging`` action. By default, the bucket owner has this permission and can grant this permission to others. 

     

    The following operations are related to ``DeleteBucketTagging`` :

     

     
    *  GetBucketTagging   
     
    *  PutBucketTagging   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketTagging>`_    


    **Request Syntax** 
    ::

      response = client.delete_bucket_tagging(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket that has the tag set to be removed.

      

    
    
    :returns: None

  .. py:method:: delete_bucket_website(**kwargs)

    

    This operation removes the website configuration for a bucket. Amazon S3 returns a ``200 OK`` response upon successfully deleting a website configuration on the specified bucket. You will get a ``200 OK`` response if the website configuration you are trying to delete does not exist on the bucket. Amazon S3 returns a ``404`` response if the bucket specified in the request does not exist.

     

    This DELETE operation requires the ``S3:DeleteBucketWebsite`` permission. By default, only the bucket owner can delete the website configuration attached to a bucket. However, bucket owners can grant other users permission to delete the website configuration by writing a bucket policy granting them the ``S3:DeleteBucketWebsite`` permission. 

     

    For more information about hosting websites, see `Hosting Websites on Amazon S3 <https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html>`__ . 

     

    The following operations are related to ``DeleteBucketWebsite`` :

     

     
    *  GetBucketWebsite   
     
    *  PutBucketWebsite   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketWebsite>`_    


    **Request Syntax** 
    ::

      response = client.delete_bucket_website(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name for which you want to remove the website configuration. 

      

    
    
    :returns: None

  .. py:method:: delete_legal_hold(**kwargs)

    Remove Legal hold on an object. The legal hold identifiers are stored in the object metadata along with the timestamp of when they are POSTed to the object. The presence of any legal hold identifiers prevents the modification or deletion of the object data, even if the retention period has expired.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteLegalHold>`_    


    **Request Syntax** 
    ::

      response = client.delete_legal_hold(
          Bucket='string',
          Key='string',
          RetentionLegalHoldId='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

    
    :type Key: string
    :param Key: **[REQUIRED]** 

    
    :type RetentionLegalHoldId: string
    :param RetentionLegalHoldId: **[REQUIRED]** 

    
    
    :returns: None

  .. py:method:: delete_object(**kwargs)

    

    Removes the null version (if there is one) of an object and inserts a delete marker, which becomes the latest version of the object. If there isn't a null version, Amazon S3 does not remove any objects.

     

    To remove a specific version, you must be the bucket owner and you must use the version Id subresource. Using this subresource permanently deletes the version. If the object deleted is a delete marker, Amazon S3 sets the response header, ``x-amz-delete-marker`` , to true. 

     

    If the object you want to delete is in a bucket where the bucket versioning configuration is MFA Delete enabled, you must include the ``x-amz-mfa`` request header in the DELETE ``versionId`` request. Requests that include ``x-amz-mfa`` must use HTTPS. 

     

    For more information about MFA Delete, see `Using MFA Delete <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMFADelete.html>`__ . To see sample requests that use versioning, see `Sample Request <https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectDELETE.html#ExampleVersionObjectDelete>`__ . 

     

    You can delete objects by explicitly calling the DELETE Object API or configure its lifecycle ( PutBucketLifecycle ) to enable Amazon S3 to remove them for you. If you want to block users or accounts from removing or deleting objects from your bucket, you must deny them the ``s3:DeleteObject`` , ``s3:DeleteObjectVersion`` , and ``s3:PutLifeCycleConfiguration`` actions. 

     

    The following operation is related to ``DeleteObject`` :

     

     
    *  PutObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteObject>`_    


    **Request Syntax** 
    ::

      response = client.delete_object(
          Bucket='string',
          Key='string',
          MFA='string',
          VersionId='string',
          RequestPayer='requester'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name of the bucket containing the object. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      Key name of the object to delete.

      

    
    :type MFA: string
    :param MFA: 

      The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA delete enabled.

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'DeleteMarker': True|False,
            'VersionId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **DeleteMarker** *(boolean) --* Not returned by COS.
        

        - **VersionId** *(string) --* 

          Returns the version ID of the delete marker created as a result of the DELETE operation.

          
        

        - **RequestCharged** *(string) --* Not returned by COS.
    

  .. py:method:: delete_objects(**kwargs)

    

    This operation enables you to delete multiple objects from a bucket using a single HTTP request. If you know the object keys that you want to delete, then this operation provides a suitable alternative to sending individual delete requests, reducing per-request overhead.

     

    The request contains a list of up to 1000 keys that you want to delete. In the XML, you provide the object key names, and optionally, version IDs if you want to delete a specific version of the object from a versioning-enabled bucket. For each key, Amazon S3 performs a delete operation and returns the result of that delete, success, or failure, in the response. Note that if the object specified in the request is not found, Amazon S3 returns the result as deleted.

     

    The operation supports two modes for the response: verbose and quiet. By default, the operation uses verbose mode in which the response includes the result of deletion of each key in your request. In quiet mode the response includes only keys where the delete operation encountered an error. For a successful deletion, the operation does not return any information about the delete in the response body.

     

    When performing this operation on an MFA Delete enabled bucket, that attempts to delete any versioned objects, you must include an MFA token. If you do not provide one, the entire request will fail, even if there are non-versioned objects you are trying to delete. If you provide an invalid token, whether there are versioned keys in the request or not, the entire Multi-Object Delete request will fail. For information about MFA Delete, see `MFA Delete <https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html#MultiFactorAuthenticationDelete>`__ .

     

    Finally, the Content-MD5 header is required for all Multi-Object Delete requests. Amazon S3 uses the header value to ensure that your request body has not been altered in transit.

     

    The following operations are related to ``DeleteObjects`` :

     

     
    *  CreateMultipartUpload   
     
    *  UploadPart   
     
    *  CompleteMultipartUpload   
     
    *  ListParts   
     
    *  AbortMultipartUpload   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteObjects>`_    


    **Request Syntax** 
    ::

      response = client.delete_objects(
          Bucket='string',
          Delete={
              'Objects': [
                  {
                      'Key': 'string',
                      'VersionId': 'string'
                  },
              ],
              'Quiet': True|False
          },
          MFA='string',
          RequestPayer='requester'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name containing the objects to delete. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type Delete: dict
    :param Delete: **[REQUIRED]** 

      Container for the request.

      

    
      - **Objects** *(list) --* **[REQUIRED]** 

        The objects to delete.

        

      
        - *(dict) --* 

          Object Identifier is unique value to identify objects.

          

        
          - **Key** *(string) --* **[REQUIRED]** 

            Key name of the object to delete.

            

          
          - **VersionId** *(string) --* 

            VersionId for the specific version of the object to delete.

            

          
        
    
      - **Quiet** *(boolean) --* 

        Element to enable quiet mode for the request. When you add this element, you must set its value to true.

        

      
    
    :type MFA: string
    :param MFA: 

      The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA delete enabled.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Deleted': [
                {
                    'Key': 'string',
                    'VersionId': 'string',
                    'DeleteMarker': True|False,
                    'DeleteMarkerVersionId': 'string'
                },
            ],
            'RequestCharged': 'requester',
            'Errors': [
                {
                    'Key': 'string',
                    'VersionId': 'string',
                    'Code': 'string',
                    'Message': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Deleted** *(list) --* 

          Container element for a successful delete. It identifies the object that was successfully deleted.

          
          

          - *(dict) --* 

            Information about the deleted object.

            
            

            - **Key** *(string) --* 

              The name of the deleted object.

              
            

            - **VersionId** *(string) --* 

              The version ID of the deleted object.

              
            

            - **DeleteMarker** *(boolean) --* 

              Specifies whether the versioned object that was permanently deleted was (true) or was not (false) a delete marker. In a simple DELETE, this header indicates whether (true) or not (false) a delete marker was created.

              
            

            - **DeleteMarkerVersionId** *(string) --* 

              The version ID of the delete marker created as a result of the DELETE operation. If you delete a specific object version, the value returned by this header is the version ID of the object version deleted.

              
        
      
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
        

        - **Errors** *(list) --* 

          Container for a failed delete operation that describes the object that Amazon S3 attempted to delete and the error it encountered.

          
          

          - *(dict) --* 

            Container for all error elements.

            
            

            - **Key** *(string) --* 

              The error key.

              
            

            - **VersionId** *(string) --* 

              The version ID of the error.

              
            

            - **Code** *(string) --* 

              The error code is a string that uniquely identifies an error condition. It is meant to be read and understood by programs that detect and handle errors by type. 

               

               **Amazon S3 error codes**  

               

               
              * 

                
                * *Code:* AccessDenied  
                 
                * *Description:* Access Denied 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* AccountProblem 
                 
                * *Description:* There is a problem with your AWS account that prevents the operation from completing successfully. Contact AWS Support for further assistance. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* AllAccessDisabled 
                 
                * *Description:* All access to this Amazon S3 resource has been disabled. Contact AWS Support for further assistance. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* AmbiguousGrantByEmailAddress 
                 
                * *Description:* The email address you provided is associated with more than one account. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* AuthorizationHeaderMalformed 
                 
                * *Description:* The authorization header you provided is invalid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *HTTP Status Code:* N/A 
                 

               
               
              * 

                
                * *Code:* BadDigest 
                 
                * *Description:* The Content-MD5 you specified did not match what we received. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* BucketAlreadyExists 
                 
                * *Description:* The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again. 
                 
                * *HTTP Status Code:* 409 Conflict 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* BucketAlreadyOwnedByYou 
                 
                * *Description:* The bucket you tried to create already exists, and you own it. Amazon S3 returns this error in all AWS Regions except in the North Virginia Region. For legacy compatibility, if you re-create an existing bucket that you already own in the North Virginia Region, Amazon S3 returns 200 OK and resets the bucket access control lists (ACLs). 
                 
                * *Code:* 409 Conflict (in all Regions except the North Virginia Region)  
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* BucketNotEmpty 
                 
                * *Description:* The bucket you tried to delete is not empty. 
                 
                * *HTTP Status Code:* 409 Conflict 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* CredentialsNotSupported 
                 
                * *Description:* This request does not support credentials. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* CrossLocationLoggingProhibited 
                 
                * *Description:* Cross-location logging not allowed. Buckets in one geographic location cannot log information to a bucket in another location. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* EntityTooSmall 
                 
                * *Description:* Your proposed upload is smaller than the minimum allowed object size. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* EntityTooLarge 
                 
                * *Description:* Your proposed upload exceeds the maximum allowed object size. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* ExpiredToken 
                 
                * *Description:* The provided token has expired. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* IllegalVersioningConfigurationException  
                 
                * *Description:* Indicates that the versioning configuration specified in the request is invalid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* IncompleteBody 
                 
                * *Description:* You did not provide the number of bytes specified by the Content-Length HTTP header 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* IncorrectNumberOfFilesInPostRequest 
                 
                * *Description:* POST requires exactly one file upload per request. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InlineDataTooLarge 
                 
                * *Description:* Inline data exceeds the maximum allowed size. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InternalError 
                 
                * *Description:* We encountered an internal error. Please try again. 
                 
                * *HTTP Status Code:* 500 Internal Server Error 
                 
                * *SOAP Fault Code Prefix:* Server 
                 

               
               
              * 

                
                * *Code:* InvalidAccessKeyId 
                 
                * *Description:* The AWS access key ID you provided does not exist in our records. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidAddressingHeader 
                 
                * *Description:* You must specify the Anonymous role. 
                 
                * *HTTP Status Code:* N/A 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidArgument 
                 
                * *Description:* Invalid Argument 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidBucketName 
                 
                * *Description:* The specified bucket is not valid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidBucketState 
                 
                * *Description:* The request is not valid with the current state of the bucket. 
                 
                * *HTTP Status Code:* 409 Conflict 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidDigest 
                 
                * *Description:* The Content-MD5 you specified is not valid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidEncryptionAlgorithmError 
                 
                * *Description:* The encryption request you specified is not valid. The valid value is AES256. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidLocationConstraint 
                 
                * *Description:* The specified location constraint is not valid. For more information about Regions, see `How to Select a Region for Your Buckets <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro>`__ .  
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidObjectState 
                 
                * *Description:* The operation is not valid for the current state of the object. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidPart 
                 
                * *Description:* One or more of the specified parts could not be found. The part might not have been uploaded, or the specified entity tag might not have matched the part's entity tag. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidPartOrder 
                 
                * *Description:* The list of parts was not in ascending order. Parts list must be specified in order by part number. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidPayer 
                 
                * *Description:* All access to this object has been disabled. Please contact AWS Support for further assistance. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidPolicyDocument 
                 
                * *Description:* The content of the form does not meet the conditions specified in the policy document. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidRange 
                 
                * *Description:* The requested range cannot be satisfied. 
                 
                * *HTTP Status Code:* 416 Requested Range Not Satisfiable 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Please use AWS4-HMAC-SHA256. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* SOAP requests must be made over an HTTPS connection. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Acceleration is not supported for buckets with non-DNS compliant names. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Acceleration is not supported for buckets with periods (.) in their names. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Accelerate endpoint only supports virtual style requests. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Accelerate is not configured on this bucket. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Accelerate is disabled on this bucket. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Acceleration is not supported on this bucket. Contact AWS Support for more information. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Acceleration cannot be enabled on this bucket. Contact AWS Support for more information. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidSecurity 
                 
                * *Description:* The provided security credentials are not valid. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidSOAPRequest 
                 
                * *Description:* The SOAP request body is invalid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidStorageClass 
                 
                * *Description:* The storage class you specified is not valid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidTargetBucketForLogging 
                 
                * *Description:* The target bucket for logging does not exist, is not owned by you, or does not have the appropriate grants for the log-delivery group.  
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidToken 
                 
                * *Description:* The provided token is malformed or otherwise invalid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidURI 
                 
                * *Description:* Couldn't parse the specified URI. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* KeyTooLongError 
                 
                * *Description:* Your key is too long. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MalformedACLError 
                 
                * *Description:* The XML you provided was not well-formed or did not validate against our published schema. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MalformedPOSTRequest  
                 
                * *Description:* The body of your POST request is not well-formed multipart/form-data. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MalformedXML 
                 
                * *Description:* This happens when the user sends malformed XML (XML that doesn't conform to the published XSD) for the configuration. The error message is, "The XML you provided was not well-formed or did not validate against our published schema."  
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MaxMessageLengthExceeded 
                 
                * *Description:* Your request was too big. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MaxPostPreDataLengthExceededError 
                 
                * *Description:* Your POST request fields preceding the upload file were too large. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MetadataTooLarge 
                 
                * *Description:* Your metadata headers exceed the maximum allowed metadata size. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MethodNotAllowed 
                 
                * *Description:* The specified method is not allowed against this resource. 
                 
                * *HTTP Status Code:* 405 Method Not Allowed 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MissingAttachment 
                 
                * *Description:* A SOAP attachment was expected, but none were found. 
                 
                * *HTTP Status Code:* N/A 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MissingContentLength 
                 
                * *Description:* You must provide the Content-Length HTTP header. 
                 
                * *HTTP Status Code:* 411 Length Required 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MissingRequestBodyError 
                 
                * *Description:* This happens when the user sends an empty XML document as a request. The error message is, "Request body is empty."  
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MissingSecurityElement 
                 
                * *Description:* The SOAP 1.1 request is missing a security element. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MissingSecurityHeader 
                 
                * *Description:* Your request is missing a required header. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoLoggingStatusForKey 
                 
                * *Description:* There is no such thing as a logging status subresource for a key. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoSuchBucket 
                 
                * *Description:* The specified bucket does not exist. 
                 
                * *HTTP Status Code:* 404 Not Found 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoSuchBucketPolicy 
                 
                * *Description:* The specified bucket does not have a bucket policy. 
                 
                * *HTTP Status Code:* 404 Not Found 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoSuchKey 
                 
                * *Description:* The specified key does not exist. 
                 
                * *HTTP Status Code:* 404 Not Found 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoSuchLifecycleConfiguration 
                 
                * *Description:* The lifecycle configuration does not exist.  
                 
                * *HTTP Status Code:* 404 Not Found 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoSuchUpload 
                 
                * *Description:* The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed. 
                 
                * *HTTP Status Code:* 404 Not Found 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoSuchVersion  
                 
                * *Description:* Indicates that the version ID specified in the request does not match an existing version. 
                 
                * *HTTP Status Code:* 404 Not Found 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NotImplemented 
                 
                * *Description:* A header you provided implies functionality that is not implemented. 
                 
                * *HTTP Status Code:* 501 Not Implemented 
                 
                * *SOAP Fault Code Prefix:* Server 
                 

               
               
              * 

                
                * *Code:* NotSignedUp 
                 
                * *Description:* Your account is not signed up for the Amazon S3 service. You must sign up before you can use Amazon S3. You can sign up at the following URL: https://aws.amazon.com/s3 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* OperationAborted 
                 
                * *Description:* A conflicting conditional operation is currently in progress against this resource. Try again. 
                 
                * *HTTP Status Code:* 409 Conflict 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* PermanentRedirect 
                 
                * *Description:* The bucket you are attempting to access must be addressed using the specified endpoint. Send all future requests to this endpoint. 
                 
                * *HTTP Status Code:* 301 Moved Permanently 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* PreconditionFailed 
                 
                * *Description:* At least one of the preconditions you specified did not hold. 
                 
                * *HTTP Status Code:* 412 Precondition Failed 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* Redirect 
                 
                * *Description:* Temporary redirect. 
                 
                * *HTTP Status Code:* 307 Moved Temporarily 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* RestoreAlreadyInProgress 
                 
                * *Description:* Object restore is already in progress. 
                 
                * *HTTP Status Code:* 409 Conflict 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* RequestIsNotMultiPartContent 
                 
                * *Description:* Bucket POST must be of the enclosure-type multipart/form-data. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* RequestTimeout 
                 
                * *Description:* Your socket connection to the server was not read from or written to within the timeout period. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* RequestTimeTooSkewed 
                 
                * *Description:* The difference between the request time and the server's time is too large. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* RequestTorrentOfBucketError 
                 
                * *Description:* Requesting the torrent file of a bucket is not permitted. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* SignatureDoesNotMatch 
                 
                * *Description:* The request signature we calculated does not match the signature you provided. Check your AWS secret access key and signing method. For more information, see `REST Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html>`__ and `SOAP Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/SOAPAuthentication.html>`__ for details. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* ServiceUnavailable 
                 
                * *Description:* Reduce your request rate. 
                 
                * *HTTP Status Code:* 503 Service Unavailable 
                 
                * *SOAP Fault Code Prefix:* Server 
                 

               
               
              * 

                
                * *Code:* SlowDown 
                 
                * *Description:* Reduce your request rate. 
                 
                * *HTTP Status Code:* 503 Slow Down 
                 
                * *SOAP Fault Code Prefix:* Server 
                 

               
               
              * 

                
                * *Code:* TemporaryRedirect 
                 
                * *Description:* You are being redirected to the bucket while DNS updates. 
                 
                * *HTTP Status Code:* 307 Moved Temporarily 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* TokenRefreshRequired 
                 
                * *Description:* The provided token must be refreshed. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* TooManyBuckets 
                 
                * *Description:* You have attempted to create more buckets than allowed. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* UnexpectedContent 
                 
                * *Description:* This request does not support content. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* UnresolvableGrantByEmailAddress 
                 
                * *Description:* The email address you provided does not match any account on record. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* UserKeyMustBeSpecified 
                 
                * *Description:* The bucket POST must contain the specified field name. If it is specified, check the order of the fields. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               

               

              

              
            

            - **Message** *(string) --* 

              The error message contains a generic description of the error condition in English. It is intended for a human audience. Simple programs display the message directly to the end user if they encounter an error condition they don't know how or don't care to handle. Sophisticated programs with more exhaustive error handling and proper internationalization are more likely to ignore the error message.

              
        
      
    

  .. py:method:: download_file(Bucket, Key, Filename, ExtraArgs=None, Callback=None, Config=None)

        
    Download an S3 object to a file.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.resource('s3')
        s3.meta.client.download_file('mybucket', 'hello.txt', '/tmp/hello.txt')
    
    Similar behavior as S3Transfer's download_file() method,
    except that parameters are capitalized. Detailed examples can be found at
    :ref:`S3Transfer's Usage <ref_s3transfer_usage>`.
    
    :type Bucket: str
    :param Bucket: The name of the bucket to download from.
    
    :type Key: str
    :param Key: The name of the key to download from.
    
    :type Filename: str
    :param Filename: The path to the file to download to.
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation.
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the download.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        transfer.


  .. py:method:: download_fileobj(Bucket, Key, Fileobj, ExtraArgs=None, Callback=None, Config=None)

        
    Download an object from S3 to a file-like object.
    
    The file-like object must be in binary mode.
    
    This is a managed transfer which will perform a multipart download in
    multiple threads if necessary.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.client('s3')
    
        with open('filename', 'wb') as data:
            s3.download_fileobj('mybucket', 'mykey', data)
    
    :type Fileobj: a file-like object
    :param Fileobj: A file-like object to download into. At a minimum, it must
        implement the `write` method and must accept bytes.
    
    :type Bucket: str
    :param Bucket: The name of the bucket to download from.
    
    :type Key: str
    :param Key: The name of the key to download from.
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation.
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the download.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        download.


  .. py:method:: extend_object_retention(**kwargs)

    This implementation of the POST operation uses the extendRetention sub-resource to extend the retention period of a protected object in a protected vault.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ExtendObjectRetention>`_    


    **Request Syntax** 
    ::

      response = client.extend_object_retention(
          Bucket='string',
          Key='string',
          AdditionalRetentionPeriod=123,
          ExtendRetentionFromCurrentTime=123,
          NewRetentionExpirationDate=datetime(2015, 1, 1),
          NewRetentionPeriod=123
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

    
    :type Key: string
    :param Key: **[REQUIRED]** 

    
    :type AdditionalRetentionPeriod: integer
    :param AdditionalRetentionPeriod: Additional time, in seconds, to add to the existing retention period for the object. If this field and New-Retention-Time and/or New-Retention-Expiration-Date are specified, a 400 error will be returned. If none of the Request Headers are specified, a 400 error will be returned to the user. The retention period of an object may be extended up to bucket maximum retention period from the time of the request.

    
    :type ExtendRetentionFromCurrentTime: integer
    :param ExtendRetentionFromCurrentTime: Retention Period in seconds. The Retention will be enforced from the object creation time until current time + the value in this header. This value has to be within the ranges defined for the bucket. If this field and Additional-Retention-Period and/or New-Retention-Period and/or New-Retentiion-Expiration-Date are specified, a 400 error will be returned. If none of the Request Headers are specified, a 400 error will be returned to the user. The retention period of an object may be extended up to bucket maximum retention period from the time of the request.

    
    :type NewRetentionExpirationDate: datetime
    :param NewRetentionExpirationDate: A new retention date to use for the object in place of the existing retention date. If this value is less than the existing value stored for the object, a 400 error will be returned. If this field and Additional-Retention-Period and/or New-Retention-Period and/or Extend-Retention-From-Current-Time are specified, a 400 error will be returned. If none of the Request Headers are specified, a 400 error will be returned to the user. The retention period of an object may be extended up to bucket maximum retention period from the time of the request.

    
    :type NewRetentionPeriod: integer
    :param NewRetentionPeriod: Retention period, in seconds, to use for the object in place of the existing retention period stored for the object. If this value is less than the existing value stored for the object, a 400 error will be returned. If this field and Additional-Retention-Period and/or New-Retention-Expiration-Date and/or Extend-Retention-From-Current-Time are specified, a 400 error will be returned. If none of the Request Headers are specified, a 400 error will be returned to the user. The retention period of an object may be extended up to bucket maximum retention period from the time of the request.

    
    
    :returns: None

  .. py:method:: generate_presigned_post(Bucket, Key, Fields=None, Conditions=None, ExpiresIn=3600)

        
    Builds the url and the form fields used for a presigned s3 post
    
    :type Bucket: string
    :param Bucket: The name of the bucket to presign the post to. Note that
        bucket related conditions should not be included in the
        ``conditions`` parameter.
    
    :type Key: string
    :param Key: Key name, optionally add ${filename} to the end to
        attach the submitted filename. Note that key related conditions and
        fields are filled out for you and should not be included in the
        ``Fields`` or ``Conditions`` parameter.
    
    :type Fields: dict
    :param Fields: A dictionary of prefilled form fields to build on top
        of. Elements that may be included are acl, Cache-Control,
        Content-Type, Content-Disposition, Content-Encoding, Expires,
        success_action_redirect, redirect, success_action_status,
        and x-amz-meta-.
    
        Note that if a particular element is included in the fields
        dictionary it will not be automatically added to the conditions
        list. You must specify a condition for the element as well.
    
    :type Conditions: list
    :param Conditions: A list of conditions to include in the policy. Each
        element can be either a list or a structure. For example:
    
        [
         {"acl": "public-read"},
         ["content-length-range", 2, 5],
         ["starts-with", "$success_action_redirect", ""]
        ]
    
        Conditions that are included may pertain to acl,
        content-length-range, Cache-Control, Content-Type,
        Content-Disposition, Content-Encoding, Expires,
        success_action_redirect, redirect, success_action_status,
        and/or x-amz-meta-.
    
        Note that if you include a condition, you must specify
        the a valid value in the fields dictionary as well. A value will
        not be added automatically to the fields dictionary based on the
        conditions.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned post
        is valid for.
    
    :rtype: dict
    :returns: A dictionary with two elements: ``url`` and ``fields``.
        Url is the url to post to. Fields is a dictionary filled with
        the form fields and respective values to use when submitting the
        post. For example:
    
        {'url': 'https://mybucket.s3.amazonaws.com
         'fields': {'acl': 'public-read',
                    'key': 'mykey',
                    'signature': 'mysignature',
                    'policy': 'mybase64 encoded policy'}
        }


  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_bucket_accelerate_configuration(**kwargs)

    

    This implementation of the GET operation uses the ``accelerate`` subresource to return the Transfer Acceleration state of a bucket, which is either ``Enabled`` or ``Suspended`` . Amazon S3 Transfer Acceleration is a bucket-level feature that enables you to perform faster data transfers to and from Amazon S3.

     

    To use this operation, you must have permission to perform the ``s3:GetAccelerateConfiguration`` action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev//using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev//s3-access-control.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    You set the Transfer Acceleration state of an existing bucket to ``Enabled`` or ``Suspended`` by using the  PutBucketAccelerateConfiguration operation. 

     

    A GET ``accelerate`` request does not return a state value for a bucket that has no transfer acceleration state. A bucket has no Transfer Acceleration state if a state has never been set on the bucket. 

     

    For more information about transfer acceleration, see `Transfer Acceleration <https://docs.aws.amazon.com/AmazonS3/latest/dev//transfer-acceleration.html>`__ in the Amazon Simple Storage Service Developer Guide.

     

     **Related Resources**  

     

     
    *  PutBucketAccelerateConfiguration   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketAccelerateConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_accelerate_configuration(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Name of the bucket for which the accelerate configuration is retrieved.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Status': 'Enabled'|'Suspended'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Status** *(string) --* 

          The accelerate configuration of the bucket.

          
    

  .. py:method:: get_bucket_acl(**kwargs)

    

    This implementation of the ``GET`` operation uses the ``acl`` subresource to return the access control list (ACL) of a bucket. To use ``GET`` to return the ACL of the bucket, you must have ``READ_ACP`` access to the bucket. If ``READ_ACP`` permission is granted to the anonymous user, you can return the ACL of the bucket without using an authorization header.

     

     **Related Resources**  

     

     
    * 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketAcl>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_acl(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Specifies the S3 bucket whose ACL is being requested.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Owner': {
                'DisplayName': 'string',
                'ID': 'string'
            },
            'Grants': [
                {
                    'Grantee': {
                        'DisplayName': 'string',
                        'EmailAddress': 'string',
                        'ID': 'string',
                        'Type': 'CanonicalUser'|'AmazonCustomerByEmail'|'Group',
                        'URI': 'string'
                    },
                    'Permission': 'FULL_CONTROL'|'WRITE'|'WRITE_ACP'|'READ'|'READ_ACP'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Owner** *(dict) --* 

          Container for the bucket owner's display name and ID.

          
          

          - **DisplayName** *(string) --* 

            Container for the display name of the owner.

            
          

          - **ID** *(string) --* 

            Container for the ID of the owner.

            
      
        

        - **Grants** *(list) --* 

          A list of grants.

          
          

          - *(dict) --* 

            Container for grant information.

            
            

            - **Grantee** *(dict) --* 

              The person being granted permissions.

              
              

              - **DisplayName** *(string) --* 

                Screen name of the grantee.

                
              

              - **EmailAddress** *(string) --* 

                Email address of the grantee.

                
              

              - **ID** *(string) --* 

                The canonical user ID of the grantee.

                
              

              - **Type** *(string) --* 

                Type of grantee

                
              

              - **URI** *(string) --* 

                URI of the grantee group.

                
          
            

            - **Permission** *(string) --* 

              Specifies the permission given to the grantee.

              
        
      
    

  .. py:method:: get_bucket_analytics_configuration(**kwargs)

    

    This implementation of the GET operation returns an analytics configuration (identified by the analytics configuration ID) from the bucket.

     

    To use this operation, you must have permissions to perform the ``s3:GetAnalyticsConfiguration`` action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 

     

    For information about Amazon S3 analytics feature, see `Amazon S3 Analytics – Storage Class Analysis <https://docs.aws.amazon.com/AmazonS3/latest/dev/analytics-storage-class.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

     **Related Resources**  

     

     
    * 
     
    * 
     
    * 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketAnalyticsConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_analytics_configuration(
          Bucket='string',
          Id='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket from which an analytics configuration is retrieved.

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID that identifies the analytics configuration.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AnalyticsConfiguration': {
                'Id': 'string',
                'Filter': {
                    'Prefix': 'string',
                    'Tag': {
                        'Key': 'string',
                        'Value': 'string'
                    },
                    'And': {
                        'Prefix': 'string'
                    }
                },
                'StorageClassAnalysis': {
                    'DataExport': {
                        'OutputSchemaVersion': 'V_1',
                        'Destination': {
                            'S3BucketDestination': {
                                'Format': 'CSV',
                                'BucketAccountId': 'string',
                                'Bucket': 'string',
                                'Prefix': 'string'
                            }
                        }
                    }
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **AnalyticsConfiguration** *(dict) --* 

          The configuration and any analyses for the analytics filter.

          
          

          - **Id** *(string) --* 

            The ID that identifies the analytics configuration.

            
          

          - **Filter** *(dict) --* 

            The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.

            
            

            - **Prefix** *(string) --* 

              The prefix to use when evaluating an analytics filter.

              
            

            - **Tag** *(dict) --* 

              The tag to use when evaluating an analytics filter.

              
              

              - **Key** *(string) --* 

                Name of the tag.

                
              

              - **Value** *(string) --* 

                Value of the tag.

                
          
            

            - **And** *(dict) --* 

              A conjunction (logical AND) of predicates, which is used in evaluating an analytics filter. The operator must have at least two predicates.

              
              

              - **Prefix** *(string) --* 

                The prefix to use when evaluating an AND predicate: The prefix that an object must have to be included in the metrics results.

                
          
        
          

          - **StorageClassAnalysis** *(dict) --* 

            Contains data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes. 

            
            

            - **DataExport** *(dict) --* 

              Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.

              
              

              - **OutputSchemaVersion** *(string) --* 

                The version of the output schema to use when exporting data. Must be ``V_1`` .

                
              

              - **Destination** *(dict) --* 

                The place to store the data for an analysis.

                
                

                - **S3BucketDestination** *(dict) --* 

                  A destination signifying output to an S3 bucket.

                  
                  

                  - **Format** *(string) --* 

                    Specifies the file format used when exporting data to Amazon S3.

                    
                  

                  - **BucketAccountId** *(string) --* 

                    The account ID that owns the destination bucket. If no account ID is provided, the owner will not be validated prior to exporting data.

                    
                  

                  - **Bucket** *(string) --* 

                    The Amazon Resource Name (ARN) of the bucket to which data is exported.

                    
                  

                  - **Prefix** *(string) --* 

                    The prefix to use when exporting data. The prefix is prepended to all results.

                    
              
            
          
        
      
    

  .. py:method:: get_bucket_aspera(**kwargs)

    Gets Aspera access and secret keys for the bucket.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketAspera>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_aspera(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AccessKey': {
                'Id': 'string',
                'Secret': 'string'
            },
            'ATSEndpoint': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **AccessKey** *(dict) --* Aspera Access Key.
          

          - **Id** *(string) --* 
          

          - **Secret** *(string) --* 
      
        

        - **ATSEndpoint** *(string) --* Aspera endpoint.
    

  .. py:method:: get_bucket_cors(**kwargs)

    Returns the cors configuration for the bucket.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketCors>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_cors(
          Bucket='string',
          MirrorDestination='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name for which to get the cors configuration.

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CORSRules': [
                {
                    'AllowedHeaders': [
                        'string',
                    ],
                    'AllowedMethods': [
                        'string',
                    ],
                    'AllowedOrigins': [
                        'string',
                    ],
                    'ExposeHeaders': [
                        'string',
                    ],
                    'MaxAgeSeconds': 123
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CORSRules** *(list) --* 

          A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.

          
          

          - *(dict) --* 

            Specifies a cross-origin access rule for an Amazon S3 bucket.

            
            

            - **AllowedHeaders** *(list) --* 

              Headers that are specified in the ``Access-Control-Request-Headers`` header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed.

              
              

              - *(string) --* 
          
            

            - **AllowedMethods** *(list) --* 

              An HTTP method that you allow the origin to execute. Valid values are ``GET`` , ``PUT`` , ``HEAD`` , ``POST`` , and ``DELETE`` .

              
              

              - *(string) --* 
          
            

            - **AllowedOrigins** *(list) --* 

              One or more origins you want customers to be able to access the bucket from.

              
              

              - *(string) --* 
          
            

            - **ExposeHeaders** *(list) --* 

              One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript ``XMLHttpRequest`` object).

              
              

              - *(string) --* 
          
            

            - **MaxAgeSeconds** *(integer) --* 

              The time in seconds that your browser is to cache the preflight response for the specified resource.

              
        
      
    

  .. py:method:: get_bucket_inventory_configuration(**kwargs)

    Returns an inventory configuration (identified by the inventory ID) from the bucket.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketInventoryConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_inventory_configuration(
          Bucket='string',
          Id='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket containing the inventory configuration to retrieve.

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID used to identify the inventory configuration.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'InventoryConfiguration': {
                'Destination': {
                    'S3BucketDestination': {
                        'AccountId': 'string',
                        'Bucket': 'string',
                        'Format': 'CSV',
                        'Prefix': 'string'
                    }
                },
                'IsEnabled': True|False,
                'Filter': {
                    'Prefix': 'string'
                },
                'Id': 'string',
                'OptionalFields': [
                    'Size'|'LastModifiedDate'|'StorageClass'|'ETag'|'IsMultipartUploaded'|'ReplicationStatus',
                ],
                'Schedule': {
                    'Frequency': 'Daily'|'Weekly'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **InventoryConfiguration** *(dict) --* 

          Specifies the inventory configuration.

          
          

          - **Destination** *(dict) --* 

            Contains information about where to publish the inventory results.

            
            

            - **S3BucketDestination** *(dict) --* 

              Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.

              
              

              - **AccountId** *(string) --* 

                The ID of the account that owns the destination bucket.

                
              

              - **Bucket** *(string) --* 

                The Amazon Resource Name (ARN) of the bucket where inventory results will be published.

                
              

              - **Format** *(string) --* 

                Specifies the output format of the inventory results.

                
              

              - **Prefix** *(string) --* 

                The prefix that is prepended to all inventory results.

                
          
        
          

          - **IsEnabled** *(boolean) --* 

            Specifies whether the inventory is enabled or disabled. If set to ``True`` , an inventory list is generated. If set to ``False`` , no inventory list is generated.

            
          

          - **Filter** *(dict) --* 

            Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.

            
            

            - **Prefix** *(string) --* 

              The prefix that an object must have to be included in the inventory results.

              
        
          

          - **Id** *(string) --* 

            The ID used to identify the inventory configuration.

            
          

          - **OptionalFields** *(list) --* 

            Contains the optional fields that are included in the inventory results.

            
            

            - *(string) --* 
        
          

          - **Schedule** *(dict) --* 

            Specifies the schedule for generating inventory results.

            
            

            - **Frequency** *(string) --* 

              Specifies how frequently inventory results are produced.

              
        
      
    

  .. py:method:: get_bucket_lifecycle_configuration(**kwargs)

    

    .. note::

       

      Bucket lifecycle configuration now supports specifying a lifecycle rule using an object key name prefix, one or more object tags, or a combination of both. Accordingly, this section describes the latest API. The response describes the new filter element that you can use to specify a filter to select a subset of objects to which the rule applies. If you are still using previous version of the lifecycle configuration, it works. For the earlier API description, see  GetBucketLifecycle .

       

     

    Returns the lifecycle configuration information set on the bucket. For information about lifecycle configuration, see `Object Lifecycle Management <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html>`__ .

     

    To use this operation, you must have permission to perform the ``s3:GetLifecycleConfiguration`` action. The bucket owner has this permission, by default. The bucket owner can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

     ``GetBucketLifecycleConfiguration`` has the following special error:

     

     
    * Error code: ``NoSuchLifecycleConfiguration``   

       
      * Description: The lifecycle configuration does not exist. 
       
      * HTTP Status Code: 404 Not Found 
       
      * SOAP Fault Code Prefix: Client 
       

     
     

     

    The following operations are related to ``DeleteBucketMetricsConfiguration`` :

     

     
    *  GetBucketLifecycle   
     
    *  PutBucketLifecycle   
     
    *  DeleteBucketLifecycle   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketLifecycleConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_lifecycle_configuration(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket for which to get the lifecycle information.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Rules': [
                {
                    'Expiration': {
                        'Date': datetime(2015, 1, 1),
                        'Days': 123
                    },
                    'ID': 'string',
                    'Filter': {
                        'Prefix': 'string'
                    },
                    'Status': 'Enabled'|'Disabled',
                    'Transitions': [
                        {
                            'Date': datetime(2015, 1, 1),
                            'Days': 123,
                            'StorageClass': 'ACCELERATED'|'GLACIER'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'DEEP_ARCHIVE'
                        },
                    ]
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Rules** *(list) --* 

          Container for a lifecycle rule.

          
          

          - *(dict) --* 

            A lifecycle rule for individual objects in an Amazon S3 bucket.

            
            

            - **Expiration** *(dict) --* 

              Specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker.

              
              

              - **Date** *(datetime) --* 

                Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.

                
              

              - **Days** *(integer) --* 

                Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.

                
          
            

            - **ID** *(string) --* 

              Unique identifier for the rule. The value cannot be longer than 255 characters.

              
            

            - **Filter** *(dict) --* 

              The ``Filter`` is used to identify objects that a Lifecycle Rule applies to. A ``Filter`` must have exactly one of ``Prefix`` , ``Tag`` , or ``And`` specified.

              
              

              - **Prefix** *(string) --* 

                Prefix identifying one or more objects to which the rule applies.

                
          
            

            - **Status** *(string) --* 

              If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.

              
            

            - **Transitions** *(list) --* 

              Specifies when an Amazon S3 object transitions to a specified storage class.

              
              

              - *(dict) --* 

                Specifies when an object transitions to a specified storage class.

                
                

                - **Date** *(datetime) --* 

                  Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.

                  
                

                - **Days** *(integer) --* 

                  Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.

                  
                

                - **StorageClass** *(string) --* 

                  The storage class to which you want the object to transition.

                  
            
          
        
      
    

  .. py:method:: get_bucket_location(**kwargs)

    

    Returns the Region the bucket resides in. You set the bucket's Region using the ``LocationConstraint`` request parameter in a ``CreateBucket`` request. For more information, see  CreateBucket .

     

    To use this implementation of the operation, you must be the bucket owner.

     

    The following operations are related to ``GetBucketLocation`` :

     

     
    *  GetObject   
     
    *  CreateBucket   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketLocation>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_location(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket for which to get the location.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LocationConstraint': 'us-standard'|'us-vault'|'us-cold'|'us-flex'|'us-east-standard'|'us-east-vault'|'us-east-cold'|'us-east-flex'|'us-south-standard'|'us-south-vault'|'us-south-cold'|'us-south-flex'|'eu-standard'|'eu-vault'|'eu-cold'|'eu-flex'|'eu-gb-standard'|'eu-gb-vault'|'eu-gb-cold'|'eu-gb-flex'|'eu-de-standard'|'eu-de-vault'|'eu-de-cold'|'eu-de-flex'|'ap-standard'|'ap-vault'|'ap-cold'|'ap-flex'|'ams03-standard'|'ams03-vault'|'ams03-cold'|'ams03-flex'|'che01-standard'|'che01-vault'|'che01-cold'|'che01-flex'|'mel01-standard'|'mel01-vault'|'mel01-cold'|'mel01-flex'|'osl01-standard'|'osl01-vault'|'osl01-cold'|'osl01-flex'|'sao01-standard'|'sao01-vault'|'sao01-cold'|'sao01-flex'|'tor01-standard'|'tor01-vault'|'tor01-cold'|'tor01-flex'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LocationConstraint** *(string) --* 

          Specifies the Region where the bucket resides. For a list of all the Amazon S3 supported location constraints by Region, see `Regions and Endpoints <https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region>`__ .

          
    

  .. py:method:: get_bucket_metrics_configuration(**kwargs)

    Gets a metrics configuration (specified by the metrics configuration ID) from the bucket.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketMetricsConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_metrics_configuration(
          Bucket='string',
          Id='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket containing the metrics configuration to retrieve.

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID used to identify the metrics configuration.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'MetricsConfiguration': {
                'Id': 'string',
                'Filter': {
                    'Prefix': 'string',
                    'Tag': {
                        'Key': 'string',
                        'Value': 'string'
                    },
                    'And': {
                        'Prefix': 'string'
                    }
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **MetricsConfiguration** *(dict) --* 

          Specifies the metrics configuration.

          
          

          - **Id** *(string) --* 

            The ID used to identify the metrics configuration.

            
          

          - **Filter** *(dict) --* 

            Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction (MetricsAndOperator).

            
            

            - **Prefix** *(string) --* 

              The prefix used when evaluating a metrics filter.

              
            

            - **Tag** *(dict) --* 

              The tag used when evaluating a metrics filter.

              
              

              - **Key** *(string) --* 

                Name of the tag.

                
              

              - **Value** *(string) --* 

                Value of the tag.

                
          
            

            - **And** *(dict) --* 

              A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.

              
              

              - **Prefix** *(string) --* 

                The prefix used when evaluating an AND predicate.

                
          
        
      
    

  .. py:method:: get_bucket_protection_configuration(**kwargs)

    Returns the protection configuration of a bucket.EnablePermanentRetention flag will only be returned if the flag is set to true for a bucket.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketProtectionConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_protection_configuration(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ProtectionConfiguration': {
                'Status': 'Retention',
                'MinimumRetention': {
                    'Days': 123
                },
                'DefaultRetention': {
                    'Days': 123
                },
                'MaximumRetention': {
                    'Days': 123
                },
                'EnablePermanentRetention': True|False
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ProtectionConfiguration** *(dict) --* 
          

          - **Status** *(string) --* Retention status of a bucket.
          

          - **MinimumRetention** *(dict) --* Minimum retention period for an object, if a PUT of an object specifies a shorter retention period the PUT object will fail.
            

            - **Days** *(integer) --* 
        
          

          - **DefaultRetention** *(dict) --* Default retention period for an object, if a PUT of an object does not specify a retention period this value will be converted to seconds and used.
            

            - **Days** *(integer) --* 
        
          

          - **MaximumRetention** *(dict) --* Maximum retention period for an object, if a PUT of an object specifies a longer retention period the PUT object will fail.
            

            - **Days** *(integer) --* 
        
          

          - **EnablePermanentRetention** *(boolean) --* Enable permanent retention for an object.
      
    

  .. py:method:: get_bucket_replication(**kwargs)

    

    Returns the replication configuration of a bucket.

     

    .. note::

       

      It can take a while to propagate the put or delete a replication configuration to all Amazon S3 systems. Therefore, a get request soon after put or delete can return a wrong result. 

       

     

    For information about replication configuration, see `Replication <https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    This operation requires permissions for the ``s3:GetReplicationConfiguration`` action. For more information about permissions, see `Using Bucket Policies and User Policies <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html>`__ .

     

    If you include the ``Filter`` element in a replication configuration, you must also include the ``DeleteMarkerReplication`` and ``Priority`` elements. The response also returns those elements.

     

    For information about ``GetBucketReplication`` errors, see  ReplicationErrorCodeList  

     

    The following operations are related to ``GetBucketReplication`` :

     

     
    *  PutBucketReplication   
     
    *  DeleteBucketReplication   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketReplication>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_replication(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name for which to get the replication information.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ReplicationConfiguration': {
                'Role': 'string',
                'Rules': [
                    {
                        'ID': 'string',
                        'Prefix': 'string',
                        'Status': 'Enabled'|'Disabled',
                        'Destination': {
                            'Bucket': 'string',
                            'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE'
                        }
                    },
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ReplicationConfiguration** *(dict) --* 

          A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.

          
          

          - **Role** *(string) --* 

            The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that Amazon S3 assumes when replicating objects. For more information, see `How to Set Up Replication <https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

            
          

          - **Rules** *(list) --* 

            A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules. 

            
            

            - *(dict) --* 

              Specifies which Amazon S3 objects to replicate and where to store the replicas.

              
              

              - **ID** *(string) --* 

                A unique identifier for the rule. The maximum value is 255 characters.

                
              

              - **Prefix** *(string) --* 

                An object key name prefix that identifies the object or objects to which the rule applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket, specify an empty string. 

                
              

              - **Status** *(string) --* 

                Specifies whether the rule is enabled.

                
              

              - **Destination** *(dict) --* 

                A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).

                
                

                - **Bucket** *(string) --* 

                  The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store the results.

                  
                

                - **StorageClass** *(string) --* 

                  The storage class to use when replicating objects, such as standard or reduced redundancy. By default, Amazon S3 uses the storage class of the source object to create the object replica. 

                   

                  For valid values, see the ``StorageClass`` element of the `PUT Bucket replication <https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html>`__ action in the *Amazon Simple Storage Service API Reference* .

                  
            
          
        
      
    

  .. py:method:: get_bucket_tagging(**kwargs)

    

    Returns the tag set associated with the bucket.

     

    To use this operation, you must have permission to perform the ``s3:GetBucketTagging`` action. By default, the bucket owner has this permission and can grant this permission to others.

     

     ``GetBucketTagging`` has the following special error:

     

     
    * Error code: ``NoSuchTagSetError``   

       
      * Description: There is no tag set associated with the bucket. 
       

     
     

     

    The following operations are related to ``GetBucketTagging`` :

     

     
    *  PutBucketTagging   
     
    *  DeleteBucketTagging   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketTagging>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_tagging(
          Bucket='string',
          MirrorDestination='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket for which to get the tagging information.

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'TagSet': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **TagSet** *(list) --* 

          Contains the tag set.

          
          

          - *(dict) --* 

            A container of a key value name pair.

            
            

            - **Key** *(string) --* 

              Name of the tag.

              
            

            - **Value** *(string) --* 

              Value of the tag.

              
        
      
    

  .. py:method:: get_bucket_versioning(**kwargs)

    

    Returns the versioning state of a bucket.

     

    To retrieve the versioning state of a bucket, you must be the bucket owner.

     

    This implementation also returns the MFA Delete status of the versioning state. If the MFA Delete status is ``enabled`` , the bucket owner must use an authentication device to change the versioning state of the bucket.

     

    The following operations are related to ``GetBucketVersioning`` :

     

     
    *  GetObject   
     
    *  PutObject   
     
    *  DeleteObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketVersioning>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_versioning(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket for which to get the versioning information.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Status': 'Enabled'|'Suspended',
            'MFADelete': 'Enabled'|'Disabled'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Status** *(string) --* 

          The versioning state of the bucket.

          
        

        - **MFADelete** *(string) --* 

          Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.

          
    

  .. py:method:: get_bucket_website(**kwargs)

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetBucketWebsite>`_    


    **Request Syntax** 
    ::

      response = client.get_bucket_website(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name for which to get the website configuration.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RedirectAllRequestsTo': {
                'HostName': 'string',
                'Protocol': 'http'|'https'
            },
            'IndexDocument': {
                'Suffix': 'string'
            },
            'ErrorDocument': {
                'Key': 'string'
            },
            'RoutingRules': [
                {
                    'Condition': {
                        'HttpErrorCodeReturnedEquals': 'string',
                        'KeyPrefixEquals': 'string'
                    },
                    'Redirect': {
                        'HostName': 'string',
                        'HttpRedirectCode': 'string',
                        'Protocol': 'http'|'https',
                        'ReplaceKeyPrefixWith': 'string',
                        'ReplaceKeyWith': 'string'
                    }
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RedirectAllRequestsTo** *(dict) --* 

          Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.

          
          

          - **HostName** *(string) --* 

            Name of the host where requests are redirected.

            
          

          - **Protocol** *(string) --* 

            Protocol to use when redirecting requests. The default is the protocol that is used in the original request.

            
      
        

        - **IndexDocument** *(dict) --* 

          The name of the index document for the website.

          
          

          - **Suffix** *(string) --* 

            A suffix that is appended to a request that is for a directory on the website endpoint (for example,if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character.

            
      
        

        - **ErrorDocument** *(dict) --* 

          The name of the error document for the website.

          
          

          - **Key** *(string) --* 

            The object key name to use when a 4XX class error occurs.

            
      
        

        - **RoutingRules** *(list) --* 

          Rules that define when a redirect is applied and the redirect behavior.

          
          

          - *(dict) --* 

            Specifies the redirect behavior and when a redirect is applied.

            
            

            - **Condition** *(dict) --* 

              A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.

              
              

              - **HttpErrorCodeReturnedEquals** *(string) --* 

                The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element ``Condition`` is specified and sibling ``KeyPrefixEquals`` is not specified. If both are specified, then both must be true for the redirect to be applied.

                
              

              - **KeyPrefixEquals** *(string) --* 

                The object key name prefix when the redirect is applied. For example, to redirect requests for ``ExamplePage.html`` , the key prefix will be ``ExamplePage.html`` . To redirect request for all pages with the prefix ``docs/`` , the key prefix will be ``/docs`` , which identifies all objects in the ``docs/`` folder. Required when the parent element ``Condition`` is specified and sibling ``HttpErrorCodeReturnedEquals`` is not specified. If both conditions are specified, both must be true for the redirect to be applied.

                
          
            

            - **Redirect** *(dict) --* 

              Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.

              
              

              - **HostName** *(string) --* 

                The host name to use in the redirect request.

                
              

              - **HttpRedirectCode** *(string) --* 

                The HTTP redirect code to use on the response. Not required if one of the siblings is present.

                
              

              - **Protocol** *(string) --* 

                Protocol to use when redirecting requests. The default is the protocol that is used in the original request.

                
              

              - **ReplaceKeyPrefixWith** *(string) --* 

                The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix ``docs/`` (objects in the ``docs/`` folder) to ``documents/`` , you can set a condition block with ``KeyPrefixEquals`` set to ``docs/`` and in the Redirect set ``ReplaceKeyPrefixWith`` to ``/documents`` . Not required if one of the siblings is present. Can be present only if ``ReplaceKeyWith`` is not provided.

                
              

              - **ReplaceKeyWith** *(string) --* 

                The specific object key to use in the redirect request. For example, redirect request to ``error.html`` . Not required if one of the siblings is present. Can be present only if ``ReplaceKeyPrefixWith`` is not provided.

                
          
        
      
    

  .. py:method:: get_object(**kwargs)

    

    Retrieves objects from Amazon S3. To use ``GET`` , you must have ``READ`` access to the object. If you grant ``READ`` access to the anonymous user, you can return the object without using an authorization header.

     

    An Amazon S3 bucket has no directory hierarchy such as you would find in a typical computer file system. You can, however, create a logical hierarchy by using object key names that imply a folder structure. For example, instead of naming an object ``sample.jpg`` , you can name it ``photos/2006/February/sample.jpg`` .

     

    To get an object from such a logical hierarchy, specify the full key name for the object in the ``GET`` operation. For a virtual hosted-style request example, if you have the object ``photos/2006/February/sample.jpg`` , specify the resource as ``/photos/2006/February/sample.jpg`` . For a path-style request example, if you have the object ``photos/2006/February/sample.jpg`` in the bucket named ``examplebucket`` , specify the resource as ``/examplebucket/photos/2006/February/sample.jpg`` . For more information about request types, see `HTTP Host Header Bucket Specification <https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html#VirtualHostingSpecifyBucket>`__ .

     

    To distribute large files to many people, you can save bandwidth costs by using BitTorrent. For more information, see `Amazon S3 Torrent <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3Torrent.html>`__ . For more information about returning the ACL of an object, see  GetObjectAcl .

     

    If the object you are retrieving is stored in the GLACIER or DEEP_ARCHIVE storage classes, before you can retrieve the object you must first restore a copy using . Otherwise, this operation returns an ``InvalidObjectStateError`` error. For information about restoring archived objects, see `Restoring Archived Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html>`__ .

     

    Encryption request headers, like ``x-amz-server-side-encryption`` , should not be sent for GET requests if your object uses server-side encryption with CMKs stored in AWS KMS (SSE-KMS) or server-side encryption with Amazon S3–managed encryption keys (SSE-S3). If your object does use these types of keys, you’ll get an HTTP 400 BadRequest error.

     

    If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object, you must use the following headers:

     

     
    * x-amz-server-side​-encryption​-customer-algorithm 
     
    * x-amz-server-side​-encryption​-customer-key 
     
    * x-amz-server-side​-encryption​-customer-key-MD5 
     

     

    For more information about SSE-C, see `Server-Side Encryption (Using Customer-Provided Encryption Keys) <https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html>`__ .

     

    Assuming you have permission to read object tags (permission for the ``s3:GetObjectVersionTagging`` action), the response also returns the ``x-amz-tagging-count`` header that provides the count of number of tags associated with the object. You can use  GetObjectTagging to retrieve the tag set associated with an object.

     

     **Permissions**  

     

    You need the ``s3:GetObject`` permission for this operation. For more information, see `Specifying Permissions in a Policy <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html>`__ . If the object you request does not exist, the error Amazon S3 returns depends on whether you also have the ``s3:ListBucket`` permission.

     

     
    * If you have the ``s3:ListBucket`` permission on the bucket, Amazon S3 will return an HTTP status code 404 ("no such key") error. 
     
    * If you don’t have the ``s3:ListBucket`` permission, Amazon S3 will return an HTTP status code 403 ("access denied") error. 
     

     

     **Versioning**  

     

    By default, the GET operation returns the current version of an object. To return a different version, use the ``versionId`` subresource.

     

    .. note::

       

      If the current version of the object is a delete marker, Amazon S3 behaves as if the object was deleted and includes ``x-amz-delete-marker: true`` in the response.

       

     

    For more information about versioning, see  PutBucketVersioning . 

     

     **Overriding Response Header Values**  

     

    There are times when you want to override certain response header values in a GET response. For example, you might override the Content-Disposition response header value in your GET request.

     

    You can override values for a set of response headers using the following query parameters. These response header values are sent only on a successful request, that is, when status code 200 OK is returned. The set of headers you can override using these parameters is a subset of the headers that Amazon S3 accepts when you create an object. The response headers that you can override for the GET response are ``Content-Type`` , ``Content-Language`` , ``Expires`` , ``Cache-Control`` , ``Content-Disposition`` , and ``Content-Encoding`` . To override these header values in the GET response, you use the following request parameters.

     

    .. note::

       

      You must sign the request, either using an Authorization header or a presigned URL, when using these parameters. They cannot be used with an unsigned (anonymous) request.

       

     

     
    * ``response-content-type``   
     
    * ``response-content-language``   
     
    * ``response-expires``   
     
    * ``response-cache-control``   
     
    * ``response-content-disposition``   
     
    * ``response-content-encoding``   
     

     

     **Additional Considerations about Request Headers**  

     

    If both of the ``If-Match`` and ``If-Unmodified-Since`` headers are present in the request as follows: ``If-Match`` condition evaluates to ``true`` , and; ``If-Unmodified-Since`` condition evaluates to ``false`` ; then, S3 returns 200 OK and the data requested. 

     

    If both of the ``If-None-Match`` and ``If-Modified-Since`` headers are present in the request as follows:``If-None-Match`` condition evaluates to ``false`` , and; ``If-Modified-Since`` condition evaluates to ``true`` ; then, S3 returns 304 Not Modified response code.

     

    For more information about conditional requests, see `RFC 7232 <https://tools.ietf.org/html/rfc7232>`__ .

     

    The following operations are related to ``GetObject`` :

     

     
    *  ListBuckets   
     
    *  GetObjectAcl   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetObject>`_    


    **Request Syntax** 
    ::

      response = client.get_object(
          Bucket='string',
          IfMatch='string',
          IfModifiedSince=datetime(2015, 1, 1),
          IfNoneMatch='string',
          IfUnmodifiedSince=datetime(2015, 1, 1),
          Key='string',
          MirrorDestination='string',
          Range='string',
          ResponseCacheControl='string',
          ResponseContentDisposition='string',
          ResponseContentEncoding='string',
          ResponseContentLanguage='string',
          ResponseContentType='string',
          ResponseExpires=datetime(2015, 1, 1),
          VersionId='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester',
          PartNumber=123
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name containing the object. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type IfMatch: string
    :param IfMatch: 

      Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).

      

    
    :type IfModifiedSince: datetime
    :param IfModifiedSince: 

      Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).

      

    
    :type IfNoneMatch: string
    :param IfNoneMatch: 

      Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).

      

    
    :type IfUnmodifiedSince: datetime
    :param IfUnmodifiedSince: 

      Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      Key of the object to get.

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Range: string
    :param Range: 

      Downloads the specified range bytes of an object. For more information about the HTTP Range header, see `http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35 .

      

    
    :type ResponseCacheControl: string
    :param ResponseCacheControl: 

      Sets the ``Cache-Control`` header of the response.

      

    
    :type ResponseContentDisposition: string
    :param ResponseContentDisposition: 

      Sets the ``Content-Disposition`` header of the response

      

    
    :type ResponseContentEncoding: string
    :param ResponseContentEncoding: 

      Sets the ``Content-Encoding`` header of the response.

      

    
    :type ResponseContentLanguage: string
    :param ResponseContentLanguage: 

      Sets the ``Content-Language`` header of the response.

      

    
    :type ResponseContentType: string
    :param ResponseContentType: 

      Sets the ``Content-Type`` header of the response.

      

    
    :type ResponseExpires: datetime
    :param ResponseExpires: 

      Sets the ``Expires`` header of the response.

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PartNumber: integer
    :param PartNumber: 

      Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Body': StreamingBody(),
            'DeleteMarker': True|False,
            'AcceptRanges': 'string',
            'Expiration': 'string',
            'Restore': 'string',
            'LastModified': datetime(2015, 1, 1),
            'ContentLength': 123,
            'ETag': 'string',
            'MissingMeta': 123,
            'VersionId': 'string',
            'CacheControl': 'string',
            'ContentDisposition': 'string',
            'ContentEncoding': 'string',
            'ContentLanguage': 'string',
            'ContentRange': 'string',
            'ContentType': 'string',
            'Expires': datetime(2015, 1, 1),
            'WebsiteRedirectLocation': 'string',
            'ServerSideEncryption': 'AES256',
            'Metadata': {
                'string': 'string'
            },
            'RetentionExpirationDate': datetime(2015, 1, 1),
            'RetentionLegalHoldCount': 123,
            'RetentionPeriod': 123,
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'RequestCharged': 'requester',
            'ReplicationStatus': 'COMPLETE'|'PENDING'|'FAILED'|'REPLICA',
            'PartsCount': 123,
            'IbmRestoredCopyStorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'IbmTransition': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Body** (:class:`.StreamingBody`) -- 

          Object data.

          
        

        - **DeleteMarker** *(boolean) --* Not returned by COS.
        

        - **AcceptRanges** *(string) --* 

          Indicates that a range of bytes was specified.

          
        

        - **Expiration** *(string) --* 

          If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key-value pairs providing object expiration information. The value of the rule-id is URL encoded.

          
        

        - **Restore** *(string) --* 

          Provides information about object restoration operation and expiration time of the restored object copy.

          
        

        - **LastModified** *(datetime) --* 

          Last modified date of the object

          
        

        - **ContentLength** *(integer) --* 

          Size of the body in bytes.

          
        

        - **ETag** *(string) --* 

          An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.

          
        

        - **MissingMeta** *(integer) --* 

          This is set to the number of metadata entries not returned in ``x-amz-meta`` headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.

          
        

        - **VersionId** *(string) --* 

          Version of the object.

          
        

        - **CacheControl** *(string) --* 

          Specifies caching behavior along the request/reply chain.

          
        

        - **ContentDisposition** *(string) --* 

          Specifies presentational information for the object.

          
        

        - **ContentEncoding** *(string) --* 

          Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.

          
        

        - **ContentLanguage** *(string) --* 

          The language the content is in.

          
        

        - **ContentRange** *(string) --* 

          The portion of the object returned in the response.

          
        

        - **ContentType** *(string) --* 

          A standard MIME type describing the format of the object data.

          
        

        - **Expires** *(datetime) --* 

          The date and time at which the object is no longer cacheable.

          
        

        - **WebsiteRedirectLocation** *(string) --* 

          If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.

          
        

        - **ServerSideEncryption** *(string) --* 

          The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **Metadata** *(dict) --* 

          A map of metadata to store with the object in S3.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **RetentionExpirationDate** *(datetime) --* Date on which it will be legal to delete or modify the object. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used. 
        

        - **RetentionLegalHoldCount** *(integer) --* Returns the count of legal holds on the object. If there are no legal holds, the header is not returned
        

        - **RetentionPeriod** *(integer) --* Retention period to store on the object in seconds. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* Ignored by COS if present.
        

        - **StorageClass** *(string) --* 

          Provides storage class information of the object. Amazon S3 returns this header for all objects except for Standard storage class objects.

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
        

        - **ReplicationStatus** *(string) --* 

          Amazon S3 can return this if your request involves a bucket that is either a source or destination in a replication rule.

          
        

        - **PartsCount** *(integer) --* 

          The count of parts this object has.

          
        

        - **IbmRestoredCopyStorageClass** *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.
        

        - **IbmTransition** *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.
    

  .. py:method:: get_object_acl(**kwargs)

    

    Returns the access control list (ACL) of an object. To use this operation, you must have READ_ACP access to the object.

     

     **Versioning**  

     

    By default, GET returns ACL information about the current version of an object. To return ACL information about a different version, use the versionId subresource.

     

    The following operations are related to ``GetObjectAcl`` :

     

     
    *  GetObject   
     
    *  DeleteObject   
     
    *  PutObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetObjectAcl>`_    


    **Request Syntax** 
    ::

      response = client.get_object_acl(
          Bucket='string',
          Key='string',
          MirrorDestination='string',
          VersionId='string',
          RequestPayer='requester'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name that contains the object for which to get the ACL information. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      The key of the object for which to get the ACL information.

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Owner': {
                'DisplayName': 'string',
                'ID': 'string'
            },
            'Grants': [
                {
                    'Grantee': {
                        'DisplayName': 'string',
                        'EmailAddress': 'string',
                        'ID': 'string',
                        'Type': 'CanonicalUser'|'AmazonCustomerByEmail'|'Group',
                        'URI': 'string'
                    },
                    'Permission': 'FULL_CONTROL'|'WRITE'|'WRITE_ACP'|'READ'|'READ_ACP'
                },
            ],
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Owner** *(dict) --* 

          Container for the bucket owner's display name and ID.

          
          

          - **DisplayName** *(string) --* 

            Container for the display name of the owner.

            
          

          - **ID** *(string) --* 

            Container for the ID of the owner.

            
      
        

        - **Grants** *(list) --* 

          A list of grants.

          
          

          - *(dict) --* 

            Container for grant information.

            
            

            - **Grantee** *(dict) --* 

              The person being granted permissions.

              
              

              - **DisplayName** *(string) --* 

                Screen name of the grantee.

                
              

              - **EmailAddress** *(string) --* 

                Email address of the grantee.

                
              

              - **ID** *(string) --* 

                The canonical user ID of the grantee.

                
              

              - **Type** *(string) --* 

                Type of grantee

                
              

              - **URI** *(string) --* 

                URI of the grantee group.

                
          
            

            - **Permission** *(string) --* 

              Specifies the permission given to the grantee.

              
        
      
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: get_object_torrent(**kwargs)

    Return torrent files from a bucket.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetObjectTorrent>`_    


    **Request Syntax** 
    ::

      response = client.get_object_torrent(
          Bucket='string',
          Key='string',
          RequestPayer='requester'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket containing the object for which to get the torrent files.

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      The object key for which to get the information.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Body': StreamingBody(),
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Body** (:class:`.StreamingBody`) -- 

          A Bencoded dictionary as defined by the BitTorrent specification

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{ibm_botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: ibm_botocore.waiter.Waiter


  .. py:method:: head_bucket(**kwargs)

    

    This operation is useful to determine if a bucket exists and you have permission to access it. The operation returns a ``200 OK`` if the bucket exists and you have permission to access it. Otherwise, the operation might return responses such as ``404 Not Found`` and ``403 Forbidden`` . 

     

    To use this operation, you must have permissions to perform the ``s3:ListBucket`` action. The bucket owner has this permission by default and can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadBucket>`_    


    **Request Syntax** 
    ::

      response = client.head_bucket(
          Bucket='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IBMSSEKPEnabled': True|False,
            'IBMSSEKPCrkId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IBMSSEKPEnabled** *(boolean) --* The bucket encryption enabled or not.
        

        - **IBMSSEKPCrkId** *(string) --* CRK ID of the Bucket encryption
    

  .. py:method:: head_object(**kwargs)

    

    The HEAD operation retrieves metadata from an object without returning the object itself. This operation is useful if you're only interested in an object's metadata. To use HEAD, you must have READ access to the object.

     

    A ``HEAD`` request has the same options as a ``GET`` operation on an object. The response is identical to the ``GET`` response except that there is no response body.

     

    If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when you retrieve the metadata from the object, you must use the following headers:

     

     
    * x-amz-server-side​-encryption​-customer-algorithm 
     
    * x-amz-server-side​-encryption​-customer-key 
     
    * x-amz-server-side​-encryption​-customer-key-MD5 
     

     

    For more information about SSE-C, see `Server-Side Encryption (Using Customer-Provided Encryption Keys) <https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html>`__ .

     

    .. note::

       

      Encryption request headers, like ``x-amz-server-side-encryption`` , should not be sent for GET requests if your object uses server-side encryption with CMKs stored in AWS KMS (SSE-KMS) or server-side encryption with Amazon S3–managed encryption keys (SSE-S3). If your object does use these types of keys, you’ll get an HTTP 400 BadRequest error.

       

     

    Request headers are limited to 8 KB in size. For more information, see `Common Request Headers <https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html>`__ .

     

    Consider the following when using request headers:

     

     
    * Consideration 1 – If both of the ``If-Match`` and ``If-Unmodified-Since`` headers are present in the request as follows: 

       
      * ``If-Match`` condition evaluates to ``true`` , and; 
       
      * ``If-Unmodified-Since`` condition evaluates to ``false`` ; 
       

     

    Then Amazon S3 returns ``200 OK`` and the data requested.

     
     
    * Consideration 2 – If both of the ``If-None-Match`` and ``If-Modified-Since`` headers are present in the request as follows: 

       
      * ``If-None-Match`` condition evaluates to ``false`` , and; 
       
      * ``If-Modified-Since`` condition evaluates to ``true`` ; 
       

     

    Then Amazon S3 returns the ``304 Not Modified`` response code.

     
     

     

    For more information about conditional requests, see `RFC 7232 <https://tools.ietf.org/html/rfc7232>`__ .

     

     **Permissions**  

     

    You need the ``s3:GetObject`` permission for this operation. For more information, see `Specifying Permissions in a Policy <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html>`__ . If the object you request does not exist, the error Amazon S3 returns depends on whether you also have the s3:ListBucket permission.

     

     
    * If you have the ``s3:ListBucket`` permission on the bucket, Amazon S3 returns an HTTP status code 404 ("no such key") error. 
     
    * If you don’t have the ``s3:ListBucket`` permission, Amazon S3 returns an HTTP status code 403 ("access denied") error. 
     

     

    The following operation is related to ``HeadObject`` :

     

     
    *  GetObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadObject>`_    


    **Request Syntax** 
    ::

      response = client.head_object(
          Bucket='string',
          IfMatch='string',
          IfModifiedSince=datetime(2015, 1, 1),
          IfNoneMatch='string',
          IfUnmodifiedSince=datetime(2015, 1, 1),
          Key='string',
          MirrorDestination='string',
          Range='string',
          VersionId='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester',
          PartNumber=123
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket containing the object.

      

    
    :type IfMatch: string
    :param IfMatch: 

      Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).

      

    
    :type IfModifiedSince: datetime
    :param IfModifiedSince: 

      Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).

      

    
    :type IfNoneMatch: string
    :param IfNoneMatch: 

      Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).

      

    
    :type IfUnmodifiedSince: datetime
    :param IfUnmodifiedSince: 

      Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      The object key.

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Range: string
    :param Range: 

      Downloads the specified range bytes of an object. For more information about the HTTP Range header, see `http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35 .

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PartNumber: integer
    :param PartNumber: 

      Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'DeleteMarker': True|False,
            'AcceptRanges': 'string',
            'Expiration': 'string',
            'Restore': 'string',
            'LastModified': datetime(2015, 1, 1),
            'ContentLength': 123,
            'ETag': 'string',
            'MissingMeta': 123,
            'VersionId': 'string',
            'CacheControl': 'string',
            'ContentDisposition': 'string',
            'ContentEncoding': 'string',
            'ContentLanguage': 'string',
            'ContentType': 'string',
            'Expires': datetime(2015, 1, 1),
            'WebsiteRedirectLocation': 'string',
            'ServerSideEncryption': 'AES256',
            'Metadata': {
                'string': 'string'
            },
            'RetentionExpirationDate': datetime(2015, 1, 1),
            'RetentionLegalHoldCount': 123,
            'RetentionPeriod': 123,
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'RequestCharged': 'requester',
            'ReplicationStatus': 'COMPLETE'|'PENDING'|'FAILED'|'REPLICA',
            'PartsCount': 123,
            'IbmRestoredCopyStorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'IbmTransition': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **DeleteMarker** *(boolean) --* Not returned by COS.
        

        - **AcceptRanges** *(string) --* 

          Indicates that a range of bytes was specified.

          
        

        - **Expiration** *(string) --* 

          If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key-value pairs providing object expiration information. The value of the rule-id is URL encoded.

          
        

        - **Restore** *(string) --* 

          If the object is an archived object (an object whose storage class is GLACIER), the response includes this header if either the archive restoration is in progress (see  RestoreObject or an archive copy is already restored.

           

          If an archive copy is already restored, the header value indicates when Amazon S3 is scheduled to delete the object copy. For example:

           

           ``x-amz-restore: ongoing-request="false", expiry-date="Fri, 23 Dec 2012 00:00:00 GMT"``  

           

          If the object restoration is in progress, the header returns the value ``ongoing-request="true"`` .

           

          For more information about archiving objects, see `Transitioning Objects\: General Considerations <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-transition-general-considerations>`__ .

          
        

        - **LastModified** *(datetime) --* 

          Last modified date of the object

          
        

        - **ContentLength** *(integer) --* 

          Size of the body in bytes.

          
        

        - **ETag** *(string) --* 

          An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.

          
        

        - **MissingMeta** *(integer) --* 

          This is set to the number of metadata entries not returned in ``x-amz-meta`` headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.

          
        

        - **VersionId** *(string) --* 

          Version of the object.

          
        

        - **CacheControl** *(string) --* 

          Specifies caching behavior along the request/reply chain.

          
        

        - **ContentDisposition** *(string) --* 

          Specifies presentational information for the object.

          
        

        - **ContentEncoding** *(string) --* 

          Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.

          
        

        - **ContentLanguage** *(string) --* 

          The language the content is in.

          
        

        - **ContentType** *(string) --* 

          A standard MIME type describing the format of the object data.

          
        

        - **Expires** *(datetime) --* 

          The date and time at which the object is no longer cacheable.

          
        

        - **WebsiteRedirectLocation** *(string) --* 

          If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.

          
        

        - **ServerSideEncryption** *(string) --* 

          If the object is stored using server-side encryption either with an AWS KMS customer master key (CMK) or an Amazon S3-managed encryption key, the response includes this header with the value of the server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **Metadata** *(dict) --* 

          A map of metadata to store with the object in S3.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **RetentionExpirationDate** *(datetime) --* Date on which it will be legal to delete or modify the object. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used. 
        

        - **RetentionLegalHoldCount** *(integer) --* Returns the count of legal holds on the object. If there are no legal holds, the header is not returned
        

        - **RetentionPeriod** *(integer) --* Retention period to store on the object in seconds. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* Not returned by COS.
        

        - **StorageClass** *(string) --* 

          Provides storage class information of the object. Amazon S3 returns this header for all objects except for Standard storage class objects.

           

          For more information, see `Storage Classes <https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html>`__ .

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
        

        - **ReplicationStatus** *(string) --* 

          Amazon S3 can return this header if your request involves a bucket that is either a source or destination in a replication rule.

           

          In replication, you have a source bucket on which you configure replication and destination bucket where Amazon S3 stores object replicas. When you request an object (``GetObject`` ) or object metadata (``HeadObject`` ) from these buckets, Amazon S3 will return the ``x-amz-replication-status`` header in the response as follows:

           

           
          * If requesting an object from the source bucket — Amazon S3 will return the ``x-amz-replication-status`` header if the object in your request is eligible for replication. For example, suppose that in your replication configuration, you specify object prefix ``TaxDocs`` requesting Amazon S3 to replicate objects with key prefix ``TaxDocs`` . Any objects you upload with this key name prefix, for example ``TaxDocs/document1.pdf`` , are eligible for replication. For any object request with this key name prefix, Amazon S3 will return the ``x-amz-replication-status`` header with value PENDING, COMPLETED or FAILED indicating object replication status. 
           
          * If requesting an object from the destination bucket — Amazon S3 will return the ``x-amz-replication-status`` header with value REPLICA if the object in your request is a replica that Amazon S3 created. 
           

           

          For more information, see `Replication <https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html>`__ .

          
        

        - **PartsCount** *(integer) --* 

          The count of parts this object has.

          
        

        - **IbmRestoredCopyStorageClass** *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.
        

        - **IbmTransition** *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.
    

  .. py:method:: list_bucket_analytics_configurations(**kwargs)

    

    Lists the analytics configurations for the bucket. You can have up to 1,000 analytics configurations per bucket.

     

    This operation supports list pagination and does not return more than 100 configurations at a time. You should always check the ``IsTruncated`` element in the response. If there are no more configurations to list, ``IsTruncated`` is set to false. If there are more configurations to list, ``IsTruncated`` is set to true, and there will be a value in ``NextContinuationToken`` . You use the ``NextContinuationToken`` value to continue the pagination of the list by passing the value in continuation-token in the request to ``GET`` the next page.

     

    To use this operation, you must have permissions to perform the ``s3:GetAnalyticsConfiguration`` action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

    For information about Amazon S3 analytics feature, see `Amazon S3 Analytics – Storage Class Analysis <https://docs.aws.amazon.com/AmazonS3/latest/dev/analytics-storage-class.html>`__ . 

     

    The following operations are related to ``ListBucketAnalyticsConfigurations`` :

     

     
    *  GetBucketAnalyticsConfiguration   
     
    *  DeleteBucketAnalyticsConfiguration   
     
    *  PutBucketAnalyticsConfiguration   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListBucketAnalyticsConfigurations>`_    


    **Request Syntax** 
    ::

      response = client.list_bucket_analytics_configurations(
          Bucket='string',
          ContinuationToken='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket from which analytics configurations are retrieved.

      

    
    :type ContinuationToken: string
    :param ContinuationToken: 

      The ContinuationToken that represents a placeholder from where this request should begin.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IsTruncated': True|False,
            'ContinuationToken': 'string',
            'NextContinuationToken': 'string',
            'AnalyticsConfigurationList': [
                {
                    'Id': 'string',
                    'Filter': {
                        'Prefix': 'string',
                        'Tag': {
                            'Key': 'string',
                            'Value': 'string'
                        },
                        'And': {
                            'Prefix': 'string'
                        }
                    },
                    'StorageClassAnalysis': {
                        'DataExport': {
                            'OutputSchemaVersion': 'V_1',
                            'Destination': {
                                'S3BucketDestination': {
                                    'Format': 'CSV',
                                    'BucketAccountId': 'string',
                                    'Bucket': 'string',
                                    'Prefix': 'string'
                                }
                            }
                        }
                    }
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IsTruncated** *(boolean) --* 

          Indicates whether the returned list of analytics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.

          
        

        - **ContinuationToken** *(string) --* 

          The marker that is used as a starting point for this analytics configuration list response. This value is present if it was sent in the request.

          
        

        - **NextContinuationToken** *(string) --* 

           ``NextContinuationToken`` is sent when ``isTruncated`` is true, which indicates that there are more analytics configurations to list. The next request must include this ``NextContinuationToken`` . The token is obfuscated and is not a usable value.

          
        

        - **AnalyticsConfigurationList** *(list) --* 

          The list of analytics configurations for a bucket.

          
          

          - *(dict) --* 

            Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.

            
            

            - **Id** *(string) --* 

              The ID that identifies the analytics configuration.

              
            

            - **Filter** *(dict) --* 

              The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.

              
              

              - **Prefix** *(string) --* 

                The prefix to use when evaluating an analytics filter.

                
              

              - **Tag** *(dict) --* 

                The tag to use when evaluating an analytics filter.

                
                

                - **Key** *(string) --* 

                  Name of the tag.

                  
                

                - **Value** *(string) --* 

                  Value of the tag.

                  
            
              

              - **And** *(dict) --* 

                A conjunction (logical AND) of predicates, which is used in evaluating an analytics filter. The operator must have at least two predicates.

                
                

                - **Prefix** *(string) --* 

                  The prefix to use when evaluating an AND predicate: The prefix that an object must have to be included in the metrics results.

                  
            
          
            

            - **StorageClassAnalysis** *(dict) --* 

              Contains data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes. 

              
              

              - **DataExport** *(dict) --* 

                Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.

                
                

                - **OutputSchemaVersion** *(string) --* 

                  The version of the output schema to use when exporting data. Must be ``V_1`` .

                  
                

                - **Destination** *(dict) --* 

                  The place to store the data for an analysis.

                  
                  

                  - **S3BucketDestination** *(dict) --* 

                    A destination signifying output to an S3 bucket.

                    
                    

                    - **Format** *(string) --* 

                      Specifies the file format used when exporting data to Amazon S3.

                      
                    

                    - **BucketAccountId** *(string) --* 

                      The account ID that owns the destination bucket. If no account ID is provided, the owner will not be validated prior to exporting data.

                      
                    

                    - **Bucket** *(string) --* 

                      The Amazon Resource Name (ARN) of the bucket to which data is exported.

                      
                    

                    - **Prefix** *(string) --* 

                      The prefix to use when exporting data. The prefix is prepended to all results.

                      
                
              
            
          
        
      
    

  .. py:method:: list_bucket_inventory_configurations(**kwargs)

    

    Returns a list of inventory configurations for the bucket. You can have up to 1,000 analytics configurations per bucket.

     

    This operation supports list pagination and does not return more than 100 configurations at a time. Always check the ``IsTruncated`` element in the response. If there are no more configurations to list, ``IsTruncated`` is set to false. If there are more configurations to list, ``IsTruncated`` is set to true, and there is a value in ``NextContinuationToken`` . You use the ``NextContinuationToken`` value to continue the pagination of the list by passing the value in continuation-token in the request to ``GET`` the next page.

     

    To use this operation, you must have permissions to perform the ``s3:GetInventoryConfiguration`` action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

    For information about the Amazon S3 inventory feature, see `Amazon S3 Inventory <https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html>`__  

     

    The following operations are related to ``ListBucketInventoryConfigurations`` :

     

     
    *  GetBucketInventoryConfiguration   
     
    *  DeleteBucketInventoryConfiguration   
     
    *  PutBucketInventoryConfiguration   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListBucketInventoryConfigurations>`_    


    **Request Syntax** 
    ::

      response = client.list_bucket_inventory_configurations(
          Bucket='string',
          ContinuationToken='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket containing the inventory configurations to retrieve.

      

    
    :type ContinuationToken: string
    :param ContinuationToken: 

      The marker used to continue an inventory configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ContinuationToken': 'string',
            'InventoryConfigurationList': [
                {
                    'Destination': {
                        'S3BucketDestination': {
                            'AccountId': 'string',
                            'Bucket': 'string',
                            'Format': 'CSV',
                            'Prefix': 'string'
                        }
                    },
                    'IsEnabled': True|False,
                    'Filter': {
                        'Prefix': 'string'
                    },
                    'Id': 'string',
                    'OptionalFields': [
                        'Size'|'LastModifiedDate'|'StorageClass'|'ETag'|'IsMultipartUploaded'|'ReplicationStatus',
                    ],
                    'Schedule': {
                        'Frequency': 'Daily'|'Weekly'
                    }
                },
            ],
            'IsTruncated': True|False,
            'NextContinuationToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ContinuationToken** *(string) --* 

          If sent in the request, the marker that is used as a starting point for this inventory configuration list response.

          
        

        - **InventoryConfigurationList** *(list) --* 

          The list of inventory configurations for a bucket.

          
          

          - *(dict) --* 

            Specifies the inventory configuration for an Amazon S3 bucket. For more information, see `GET Bucket inventory <https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html>`__ in the *Amazon Simple Storage Service API Reference* . 

            
            

            - **Destination** *(dict) --* 

              Contains information about where to publish the inventory results.

              
              

              - **S3BucketDestination** *(dict) --* 

                Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.

                
                

                - **AccountId** *(string) --* 

                  The ID of the account that owns the destination bucket.

                  
                

                - **Bucket** *(string) --* 

                  The Amazon Resource Name (ARN) of the bucket where inventory results will be published.

                  
                

                - **Format** *(string) --* 

                  Specifies the output format of the inventory results.

                  
                

                - **Prefix** *(string) --* 

                  The prefix that is prepended to all inventory results.

                  
            
          
            

            - **IsEnabled** *(boolean) --* 

              Specifies whether the inventory is enabled or disabled. If set to ``True`` , an inventory list is generated. If set to ``False`` , no inventory list is generated.

              
            

            - **Filter** *(dict) --* 

              Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.

              
              

              - **Prefix** *(string) --* 

                The prefix that an object must have to be included in the inventory results.

                
          
            

            - **Id** *(string) --* 

              The ID used to identify the inventory configuration.

              
            

            - **OptionalFields** *(list) --* 

              Contains the optional fields that are included in the inventory results.

              
              

              - *(string) --* 
          
            

            - **Schedule** *(dict) --* 

              Specifies the schedule for generating inventory results.

              
              

              - **Frequency** *(string) --* 

                Specifies how frequently inventory results are produced.

                
          
        
      
        

        - **IsTruncated** *(boolean) --* 

          Tells whether the returned list of inventory configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken is provided for a subsequent request.

          
        

        - **NextContinuationToken** *(string) --* 

          The marker used to continue this inventory configuration listing. Use the ``NextContinuationToken`` from this response to continue the listing in a subsequent request. The continuation token is an opaque value that Amazon S3 understands.

          
    

  .. py:method:: list_bucket_metrics_configurations(**kwargs)

    

    Lists the metrics configurations for the bucket. The metrics configurations are only for the request metrics of the bucket and do not provide information on daily storage metrics. You can have up to 1,000 configurations per bucket.

     

    This operation supports list pagination and does not return more than 100 configurations at a time. Always check the ``IsTruncated`` element in the response. If there are no more configurations to list, ``IsTruncated`` is set to false. If there are more configurations to list, ``IsTruncated`` is set to true, and there is a value in ``NextContinuationToken`` . You use the ``NextContinuationToken`` value to continue the pagination of the list by passing the value in ``continuation-token`` in the request to ``GET`` the next page.

     

    To use this operation, you must have permissions to perform the ``s3:GetMetricsConfiguration`` action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

    For more information about metrics configurations and CloudWatch request metrics, see `Monitoring Metrics with Amazon CloudWatch <https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html>`__ .

     

    The following operations are related to ``ListBucketMetricsConfigurations`` :

     

     
    *  PutBucketMetricsConfiguration   
     
    *  GetBucketMetricsConfiguration   
     
    *  DeleteBucketMetricsConfiguration   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListBucketMetricsConfigurations>`_    


    **Request Syntax** 
    ::

      response = client.list_bucket_metrics_configurations(
          Bucket='string',
          ContinuationToken='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket containing the metrics configurations to retrieve.

      

    
    :type ContinuationToken: string
    :param ContinuationToken: 

      The marker that is used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IsTruncated': True|False,
            'ContinuationToken': 'string',
            'NextContinuationToken': 'string',
            'MetricsConfigurationList': [
                {
                    'Id': 'string',
                    'Filter': {
                        'Prefix': 'string',
                        'Tag': {
                            'Key': 'string',
                            'Value': 'string'
                        },
                        'And': {
                            'Prefix': 'string'
                        }
                    }
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IsTruncated** *(boolean) --* 

          Indicates whether the returned list of metrics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.

          
        

        - **ContinuationToken** *(string) --* 

          The marker that is used as a starting point for this metrics configuration list response. This value is present if it was sent in the request.

          
        

        - **NextContinuationToken** *(string) --* 

          The marker used to continue a metrics configuration listing that has been truncated. Use the ``NextContinuationToken`` from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.

          
        

        - **MetricsConfigurationList** *(list) --* 

          The list of metrics configurations for a bucket.

          
          

          - *(dict) --* 

            Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For more information, see `PUT Bucket metrics <https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html>`__ in the *Amazon Simple Storage Service API Reference* .

            
            

            - **Id** *(string) --* 

              The ID used to identify the metrics configuration.

              
            

            - **Filter** *(dict) --* 

              Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction (MetricsAndOperator).

              
              

              - **Prefix** *(string) --* 

                The prefix used when evaluating a metrics filter.

                
              

              - **Tag** *(dict) --* 

                The tag used when evaluating a metrics filter.

                
                

                - **Key** *(string) --* 

                  Name of the tag.

                  
                

                - **Value** *(string) --* 

                  Value of the tag.

                  
            
              

              - **And** *(dict) --* 

                A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.

                
                

                - **Prefix** *(string) --* 

                  The prefix used when evaluating an AND predicate.

                  
            
          
        
      
    

  .. py:method:: list_buckets(**kwargs)

    

    Returns a list of all buckets owned by the authenticated sender of the request.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListBuckets>`_    


    **Request Syntax** 
    ::

      response = client.list_buckets(
          IBMServiceInstanceId='string'
      )
    :type IBMServiceInstanceId: string
    :param IBMServiceInstanceId: The owning storage account. All buckets owned by this storage account are returned.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Buckets': [
                {
                    'Name': 'string',
                    'CreationDate': datetime(2015, 1, 1),
                    'LocationConstraint': 'us-standard'|'us-vault'|'us-cold'|'us-flex'|'us-east-standard'|'us-east-vault'|'us-east-cold'|'us-east-flex'|'us-south-standard'|'us-south-vault'|'us-south-cold'|'us-south-flex'|'eu-standard'|'eu-vault'|'eu-cold'|'eu-flex'|'eu-gb-standard'|'eu-gb-vault'|'eu-gb-cold'|'eu-gb-flex'|'eu-de-standard'|'eu-de-vault'|'eu-de-cold'|'eu-de-flex'|'ap-standard'|'ap-vault'|'ap-cold'|'ap-flex'|'ams03-standard'|'ams03-vault'|'ams03-cold'|'ams03-flex'|'che01-standard'|'che01-vault'|'che01-cold'|'che01-flex'|'mel01-standard'|'mel01-vault'|'mel01-cold'|'mel01-flex'|'osl01-standard'|'osl01-vault'|'osl01-cold'|'osl01-flex'|'sao01-standard'|'sao01-vault'|'sao01-cold'|'sao01-flex'|'tor01-standard'|'tor01-vault'|'tor01-cold'|'tor01-flex'
                },
            ],
            'Owner': {
                'DisplayName': 'string',
                'ID': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Buckets** *(list) --* 

          The list of buckets owned by the requestor.

          
          

          - *(dict) --* 

            In terms of implementation, a Bucket is a resource. An Amazon S3 bucket name is globally unique, and the namespace is shared by all AWS accounts. 

            
            

            - **Name** *(string) --* 

              The name of the bucket.

              
            

            - **CreationDate** *(datetime) --* Date the bucket was created.
            

            - **LocationConstraint** *(string) --* Specifies the region where the bucket will be created. If you don't specify a region, the bucket will be created in US Standard.
        
      
        

        - **Owner** *(dict) --* 

          The owner of the buckets listed.

          
          

          - **DisplayName** *(string) --* 

            Container for the display name of the owner.

            
          

          - **ID** *(string) --* 

            Container for the ID of the owner.

            
      
    

  .. py:method:: list_buckets_extended(**kwargs)

    Returns a list of all buckets owned by the authenticated sender of the request, along with the LocationConstraint describing the region that the bucket resides in and the bucket's storage tier.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListBucketsExtended>`_    


    **Request Syntax** 
    ::

      response = client.list_buckets_extended(
          IBMServiceInstanceId='string',
          Marker='string',
          MaxKeys=123,
          Prefix='string'
      )
    :type IBMServiceInstanceId: string
    :param IBMServiceInstanceId: The owning storage account. All buckets owned by this storage account are returned.

    
    :type Marker: string
    :param Marker: Specifies the key to start with when listing objects in a bucket.

    
    :type MaxKeys: integer
    :param MaxKeys: Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.

    
    :type Prefix: string
    :param Prefix: Limits the response to keys that begin with the specified prefix.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IsTruncated': True|False,
            'NextMarker': 'string',
            'Buckets': [
                {
                    'Name': 'string',
                    'CreationDate': datetime(2015, 1, 1),
                    'LocationConstraint': 'us-standard'|'us-vault'|'us-cold'|'us-flex'|'us-east-standard'|'us-east-vault'|'us-east-cold'|'us-east-flex'|'us-south-standard'|'us-south-vault'|'us-south-cold'|'us-south-flex'|'eu-standard'|'eu-vault'|'eu-cold'|'eu-flex'|'eu-gb-standard'|'eu-gb-vault'|'eu-gb-cold'|'eu-gb-flex'|'eu-de-standard'|'eu-de-vault'|'eu-de-cold'|'eu-de-flex'|'ap-standard'|'ap-vault'|'ap-cold'|'ap-flex'|'ams03-standard'|'ams03-vault'|'ams03-cold'|'ams03-flex'|'che01-standard'|'che01-vault'|'che01-cold'|'che01-flex'|'mel01-standard'|'mel01-vault'|'mel01-cold'|'mel01-flex'|'osl01-standard'|'osl01-vault'|'osl01-cold'|'osl01-flex'|'sao01-standard'|'sao01-vault'|'sao01-cold'|'sao01-flex'|'tor01-standard'|'tor01-vault'|'tor01-cold'|'tor01-flex'
                },
            ],
            'Owner': {
                'DisplayName': 'string',
                'ID': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IsTruncated** *(boolean) --* 
        

        - **NextMarker** *(string) --* 
        

        - **Buckets** *(list) --* 
          

          - *(dict) --* 

            In terms of implementation, a Bucket is a resource. An Amazon S3 bucket name is globally unique, and the namespace is shared by all AWS accounts. 

            
            

            - **Name** *(string) --* 

              The name of the bucket.

              
            

            - **CreationDate** *(datetime) --* Date the bucket was created.
            

            - **LocationConstraint** *(string) --* Specifies the region where the bucket will be created. If you don't specify a region, the bucket will be created in US Standard.
        
      
        

        - **Owner** *(dict) --* 

          Container for the owner's display name and ID.

          
          

          - **DisplayName** *(string) --* 

            Container for the display name of the owner.

            
          

          - **ID** *(string) --* 

            Container for the ID of the owner.

            
      
    

  .. py:method:: list_legal_holds(**kwargs)

    Returns a list of legal holds on an object

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListLegalHolds>`_    


    **Request Syntax** 
    ::

      response = client.list_legal_holds(
          Bucket='string',
          Key='string',
          MirrorDestination='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

    
    :type Key: string
    :param Key: **[REQUIRED]** 

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CreateTime': datetime(2015, 1, 1),
            'LegalHolds': [
                {
                    'Date': datetime(2015, 1, 1),
                    'ID': 'string'
                },
            ],
            'RetentionPeriod': 123,
            'RetentionPeriodExpirationDate': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CreateTime** *(datetime) --* 
        

        - **LegalHolds** *(list) --* 
          

          - *(dict) --* 
            

            - **Date** *(datetime) --* 
            

            - **ID** *(string) --* 
        
      
        

        - **RetentionPeriod** *(integer) --* Retention period in seconds.
        

        - **RetentionPeriodExpirationDate** *(datetime) --* Date on which the retention period will expire.
    

  .. py:method:: list_multipart_uploads(**kwargs)

    

    This operation lists in-progress multipart uploads. An in-progress multipart upload is a multipart upload that has been initiated using the Initiate Multipart Upload request, but has not yet been completed or aborted.

     

    This operation returns at most 1,000 multipart uploads in the response. 1,000 multipart uploads is the maximum number of uploads a response can include, which is also the default value. You can further limit the number of uploads in a response by specifying the ``max-uploads`` parameter in the response. If additional multipart uploads satisfy the list criteria, the response will contain an ``IsTruncated`` element with the value true. To list the additional multipart uploads, use the ``key-marker`` and ``upload-id-marker`` request parameters.

     

    In the response, the uploads are sorted by key. If your application has initiated more than one multipart upload using the same object key, then uploads in the response are first sorted by key. Additionally, uploads are sorted in ascending order within each key by the upload initiation time.

     

    For more information on multipart uploads, see `Uploading Objects Using Multipart Upload <https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html>`__ .

     

    For information on permissions required to use the multipart upload API, see `Multipart Upload API and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ .

     

    The following operations are related to ``ListMultipartUploads`` :

     

     
    *  CreateMultipartUpload   
     
    *  UploadPart   
     
    *  CompleteMultipartUpload   
     
    *  ListParts   
     
    *  AbortMultipartUpload   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListMultipartUploads>`_    


    **Request Syntax** 
    ::

      response = client.list_multipart_uploads(
          Bucket='string',
          Delimiter='string',
          EncodingType='url',
          KeyMarker='string',
          MaxUploads=123,
          MirrorDestination='string',
          Prefix='string',
          UploadIdMarker='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Name of the bucket to which the multipart upload was initiated. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type Delimiter: string
    :param Delimiter: 

      Character you use to group keys.

       

      All keys that contain the same string between the prefix, if specified, and the first occurrence of the delimiter after the prefix are grouped under a single result element, ``CommonPrefixes`` . If you don't specify the prefix parameter, then the substring starts at the beginning of the key. The keys that are grouped under ``CommonPrefixes`` result element are not returned elsewhere in the response.

      

    
    :type EncodingType: string
    :param EncodingType: 

      Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.

      

    
    :type KeyMarker: string
    :param KeyMarker: 

      Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.

       

      If ``upload-id-marker`` is not specified, only the keys lexicographically greater than the specified ``key-marker`` will be included in the list.

       

      If ``upload-id-marker`` is specified, any multipart uploads for a key equal to the ``key-marker`` might also be included, provided those multipart uploads have upload IDs lexicographically greater than the specified ``upload-id-marker`` .

      

    
    :type MaxUploads: integer
    :param MaxUploads: 

      Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Prefix: string
    :param Prefix: 

      Lists in-progress uploads only for those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different grouping of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.)

      

    
    :type UploadIdMarker: string
    :param UploadIdMarker: 

      Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored. Otherwise, any multipart uploads for a key equal to the key-marker might be included in the list only if they have an upload ID lexicographically greater than the specified ``upload-id-marker`` .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Bucket': 'string',
            'KeyMarker': 'string',
            'UploadIdMarker': 'string',
            'NextKeyMarker': 'string',
            'Prefix': 'string',
            'Delimiter': 'string',
            'NextUploadIdMarker': 'string',
            'MaxUploads': 123,
            'IsTruncated': True|False,
            'Uploads': [
                {
                    'UploadId': 'string',
                    'Key': 'string',
                    'Initiated': datetime(2015, 1, 1),
                    'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
                    'Owner': {
                        'DisplayName': 'string',
                        'ID': 'string'
                    },
                    'Initiator': {
                        'ID': 'string',
                        'DisplayName': 'string'
                    }
                },
            ],
            'CommonPrefixes': [
                {
                    'Prefix': 'string'
                },
            ],
            'EncodingType': 'url'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Bucket** *(string) --* 

          Name of the bucket to which the multipart upload was initiated.

          
        

        - **KeyMarker** *(string) --* 

          The key at or after which the listing began.

          
        

        - **UploadIdMarker** *(string) --* 

          Upload ID after which listing began.

          
        

        - **NextKeyMarker** *(string) --* 

          When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request.

          
        

        - **Prefix** *(string) --* 

          When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix.

          
        

        - **Delimiter** *(string) --* 

          Contains the delimiter you specified in the request. If you don't specify a delimiter in your request, this element is absent from the response.

          
        

        - **NextUploadIdMarker** *(string) --* 

          When a list is truncated, this element specifies the value that should be used for the ``upload-id-marker`` request parameter in a subsequent request.

          
        

        - **MaxUploads** *(integer) --* 

          Maximum number of multipart uploads that could have been included in the response.

          
        

        - **IsTruncated** *(boolean) --* 

          Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads.

          
        

        - **Uploads** *(list) --* 

          Container for elements related to a particular multipart upload. A response can contain zero or more ``Upload`` elements.

          
          

          - *(dict) --* 

            Container for the ``MultipartUpload`` for the Amazon S3 object.

            
            

            - **UploadId** *(string) --* 

              Upload ID that identifies the multipart upload.

              
            

            - **Key** *(string) --* 

              Key of the object for which the multipart upload was initiated.

              
            

            - **Initiated** *(datetime) --* 

              Date and time at which the multipart upload was initiated.

              
            

            - **StorageClass** *(string) --* 

              The class of storage used to store the object.

              
            

            - **Owner** *(dict) --* 

              Specifies the owner of the object that is part of the multipart upload. 

              
              

              - **DisplayName** *(string) --* 

                Container for the display name of the owner.

                
              

              - **ID** *(string) --* 

                Container for the ID of the owner.

                
          
            

            - **Initiator** *(dict) --* 

              Identifies who initiated the multipart upload.

              
              

              - **ID** *(string) --* 

                If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value.

                
              

              - **DisplayName** *(string) --* 

                Name of the Principal.

                
          
        
      
        

        - **CommonPrefixes** *(list) --* 

          If you specify a delimiter in the request, then the result returns each distinct key prefix containing the delimiter in a ``CommonPrefixes`` element. The distinct key prefixes are returned in the ``Prefix`` child element.

          
          

          - *(dict) --* 

            Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. 

            
            

            - **Prefix** *(string) --* 

              Container for the specified common prefix.

              
        
      
        

        - **EncodingType** *(string) --* 

          Encoding type used by Amazon S3 to encode object keys in the response.

           

          If you specify ``encoding-type`` request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements:

           

           ``Delimiter`` , ``KeyMarker`` , ``Prefix`` , ``NextKeyMarker`` , ``Key`` .

          
    

  .. py:method:: list_object_versions(**kwargs)

    

    Returns metadata about all of the versions of objects in a bucket. You can also use request parameters as selection criteria to return metadata about a subset of all the object versions. 

     

    .. note::

       

      A 200 OK response can contain valid or invalid XML. Make sure to design your application to parse the contents of the response and handle it appropriately.

       

     

    To use this operation, you must have READ access to the bucket.

     

    The following operations are related to ``ListObjectVersions`` :

     

     
    *  ListObjectsV2   
     
    *  GetObject   
     
    *  PutObject   
     
    *  DeleteObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjectVersions>`_    


    **Request Syntax** 
    ::

      response = client.list_object_versions(
          Bucket='string',
          Delimiter='string',
          EncodingType='url',
          KeyMarker='string',
          MaxKeys=123,
          Prefix='string',
          VersionIdMarker='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name that contains the objects. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type Delimiter: string
    :param Delimiter: 

      A delimiter is a character that you specify to group keys. All keys that contain the same string between the ``prefix`` and the first occurrence of the delimiter are grouped under a single result element in CommonPrefixes. These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response.

      

    
    :type EncodingType: string
    :param EncodingType: 

      Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.

      

    
    :type KeyMarker: string
    :param KeyMarker: 

      Specifies the key to start with when listing objects in a bucket.

      

    
    :type MaxKeys: integer
    :param MaxKeys: 

      Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more. If additional keys satisfy the search criteria, but were not returned because max-keys was exceeded, the response contains <isTruncated>true</isTruncated>. To return the additional keys, see key-marker and version-id-marker.

      

    
    :type Prefix: string
    :param Prefix: 

      Use this parameter to select only those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different groupings of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.) You can use prefix with delimiter to roll up numerous objects into a single result under CommonPrefixes. 

      

    
    :type VersionIdMarker: string
    :param VersionIdMarker: 

      Specifies the object version you want to start listing from.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IsTruncated': True|False,
            'KeyMarker': 'string',
            'VersionIdMarker': 'string',
            'NextKeyMarker': 'string',
            'NextVersionIdMarker': 'string',
            'Versions': [
                {
                    'ETag': 'string',
                    'Size': 123,
                    'StorageClass': 'STANDARD',
                    'Key': 'string',
                    'VersionId': 'string',
                    'IsLatest': True|False,
                    'LastModified': datetime(2015, 1, 1),
                    'Owner': {
                        'DisplayName': 'string',
                        'ID': 'string'
                    }
                },
            ],
            'DeleteMarkers': [
                {
                    'Owner': {
                        'DisplayName': 'string',
                        'ID': 'string'
                    },
                    'Key': 'string',
                    'VersionId': 'string',
                    'IsLatest': True|False,
                    'LastModified': datetime(2015, 1, 1)
                },
            ],
            'Name': 'string',
            'Prefix': 'string',
            'Delimiter': 'string',
            'MaxKeys': 123,
            'CommonPrefixes': [
                {
                    'Prefix': 'string'
                },
            ],
            'EncodingType': 'url'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IsTruncated** *(boolean) --* 

          A flag that indicates whether Amazon S3 returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.

          
        

        - **KeyMarker** *(string) --* 

          Marks the last key returned in a truncated response.

          
        

        - **VersionIdMarker** *(string) --* 

          Marks the last version of the key returned in a truncated response.

          
        

        - **NextKeyMarker** *(string) --* 

          When the number of responses exceeds the value of ``MaxKeys`` , ``NextKeyMarker`` specifies the first key not returned that satisfies the search criteria. Use this value for the key-marker request parameter in a subsequent request.

          
        

        - **NextVersionIdMarker** *(string) --* 

          When the number of responses exceeds the value of ``MaxKeys`` , ``NextVersionIdMarker`` specifies the first object version not returned that satisfies the search criteria. Use this value for the version-id-marker request parameter in a subsequent request.

          
        

        - **Versions** *(list) --* 

          Container for version information.

          
          

          - *(dict) --* 

            The version of an object.

            
            

            - **ETag** *(string) --* 

              The entity tag is an MD5 hash of that version of the object.

              
            

            - **Size** *(integer) --* 

              Size in bytes of the object.

              
            

            - **StorageClass** *(string) --* 

              The class of storage used to store the object.

              
            

            - **Key** *(string) --* 

              The object key.

              
            

            - **VersionId** *(string) --* 

              Version ID of an object.

              
            

            - **IsLatest** *(boolean) --* 

              Specifies whether the object is (true) or is not (false) the latest version of an object.

              
            

            - **LastModified** *(datetime) --* 

              Date and time the object was last modified.

              
            

            - **Owner** *(dict) --* 

              Specifies the owner of the object.

              
              

              - **DisplayName** *(string) --* 

                Container for the display name of the owner.

                
              

              - **ID** *(string) --* 

                Container for the ID of the owner.

                
          
        
      
        

        - **DeleteMarkers** *(list) --* 

          Container for an object that is a delete marker.

          
          

          - *(dict) --* 

            Information about the delete marker.

            
            

            - **Owner** *(dict) --* 

              The account that created the delete marker.>

              
              

              - **DisplayName** *(string) --* 

                Container for the display name of the owner.

                
              

              - **ID** *(string) --* 

                Container for the ID of the owner.

                
          
            

            - **Key** *(string) --* 

              The object key.

              
            

            - **VersionId** *(string) --* 

              Version ID of an object.

              
            

            - **IsLatest** *(boolean) --* 

              Specifies whether the object is (true) or is not (false) the latest version of an object.

              
            

            - **LastModified** *(datetime) --* 

              Date and time the object was last modified.

              
        
      
        

        - **Name** *(string) --* 

          Bucket name.

          
        

        - **Prefix** *(string) --* 

          Selects objects that start with the value supplied by this parameter.

          
        

        - **Delimiter** *(string) --* 

          The delimiter grouping the included keys. A delimiter is a character that you specify to group keys. All keys that contain the same string between the prefix and the first occurrence of the delimiter are grouped under a single result element in ``CommonPrefixes`` . These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response.

          
        

        - **MaxKeys** *(integer) --* 

          Specifies the maximum number of objects to return.

          
        

        - **CommonPrefixes** *(list) --* 

          All of the keys rolled up into a common prefix count as a single return when calculating the number of returns.

          
          

          - *(dict) --* 

            Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. 

            
            

            - **Prefix** *(string) --* 

              Container for the specified common prefix.

              
        
      
        

        - **EncodingType** *(string) --* 

          Encoding type used by Amazon S3 to encode object key names in the XML response.

           

          If you specify encoding-type request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements:

           

           ``KeyMarker, NextKeyMarker, Prefix, Key`` , and ``Delimiter`` .

          
    

  .. py:method:: list_objects(**kwargs)

    

    Returns some or all (up to 1,000) of the objects in a bucket. You can use the request parameters as selection criteria to return a subset of the objects in a bucket. A 200 OK response can contain valid or invalid XML. Be sure to design your application to parse the contents of the response and handle it appropriately.

     

    .. warning::

       

      This API has been revised. We recommend that you use the newer version,  ListObjectsV2 , when developing applications. For backward compatibility, Amazon S3 continues to support ``ListObjects`` .

       

     

    The following operations are related to ``ListObjects`` :

     

     
    *  ListObjectsV2   
     
    *  GetObject   
     
    *  PutObject   
     
    *  CreateBucket   
     
    *  ListBuckets   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjects>`_    


    **Request Syntax** 
    ::

      response = client.list_objects(
          Bucket='string',
          Delimiter='string',
          EncodingType='url',
          Marker='string',
          MaxKeys=123,
          MirrorDestination='string',
          Prefix='string',
          RequestPayer='requester'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket containing the objects.

      

    
    :type Delimiter: string
    :param Delimiter: 

      A delimiter is a character you use to group keys.

      

    
    :type EncodingType: string
    :param EncodingType: 

      Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.

      

    
    :type Marker: string
    :param Marker: 

      Specifies the key to start with when listing objects in a bucket.

      

    
    :type MaxKeys: integer
    :param MaxKeys: 

      Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Prefix: string
    :param Prefix: 

      Limits the response to keys that begin with the specified prefix.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IsTruncated': True|False,
            'Marker': 'string',
            'NextMarker': 'string',
            'Contents': [
                {
                    'Key': 'string',
                    'LastModified': datetime(2015, 1, 1),
                    'ETag': 'string',
                    'Size': 123,
                    'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'GLACIER'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'DEEP_ARCHIVE',
                    'Owner': {
                        'DisplayName': 'string',
                        'ID': 'string'
                    }
                },
            ],
            'Name': 'string',
            'IBMSSEKPEnabled': True|False,
            'IBMSSEKPCrkId': 'string',
            'Prefix': 'string',
            'Delimiter': 'string',
            'MaxKeys': 123,
            'CommonPrefixes': [
                {
                    'Prefix': 'string'
                },
            ],
            'EncodingType': 'url'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IsTruncated** *(boolean) --* 

          A flag that indicates whether Amazon S3 returned all of the results that satisfied the search criteria.

          
        

        - **Marker** *(string) --* 

          Indicates where in the bucket listing begins. Marker is included in the response if it was sent with the request.

          
        

        - **NextMarker** *(string) --* 

          When response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as marker in the subsequent request to get next set of objects. Amazon S3 lists objects in alphabetical order Note: This element is returned only if you have delimiter request parameter specified. If response does not include the NextMaker and it is truncated, you can use the value of the last Key in the response as the marker in the subsequent request to get the next set of object keys.

          
        

        - **Contents** *(list) --* 

          Metadata about each object returned.

          
          

          - *(dict) --* 

            An object consists of data and its descriptive metadata.

            
            

            - **Key** *(string) --* 

              The name that you assign to an object. You use the object key to retrieve the object.

              
            

            - **LastModified** *(datetime) --* 

              The date the Object was Last Modified

              
            

            - **ETag** *(string) --* 

              The entity tag is an MD5 hash of the object. ETag reflects only changes to the contents of an object, not its metadata.

              
            

            - **Size** *(integer) --* 

              Size in bytes of the object

              
            

            - **StorageClass** *(string) --* 

              The class of storage used to store the object.

              
            

            - **Owner** *(dict) --* 

              The owner of the object

              
              

              - **DisplayName** *(string) --* 

                Container for the display name of the owner.

                
              

              - **ID** *(string) --* 

                Container for the ID of the owner.

                
          
        
      
        

        - **Name** *(string) --* 

          Bucket name.

          
        

        - **IBMSSEKPEnabled** *(boolean) --* The bucket encryption enabled or not.
        

        - **IBMSSEKPCrkId** *(string) --* CRK ID of the Bucket encryption
        

        - **Prefix** *(string) --* 

          Keys that begin with the indicated prefix.

          
        

        - **Delimiter** *(string) --* 

          Causes keys that contain the same string between the prefix and the first occurrence of the delimiter to be rolled up into a single result element in the ``CommonPrefixes`` collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up result counts as only one return against the ``MaxKeys`` value.

          
        

        - **MaxKeys** *(integer) --* 

          The maximum number of keys returned in the response body.

          
        

        - **CommonPrefixes** *(list) --* 

          All of the keys rolled up in a common prefix count as a single return when calculating the number of returns. 

           

          A response can contain CommonPrefixes only if you specify a delimiter.

           

          CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by the delimiter.

           

          CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix.

           

          For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. All of the keys that roll up into a common prefix count as a single return when calculating the number of returns.

          
          

          - *(dict) --* 

            Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. 

            
            

            - **Prefix** *(string) --* 

              Container for the specified common prefix.

              
        
      
        

        - **EncodingType** *(string) --* 

          Encoding type used by Amazon S3 to encode object keys in the response.

          
    

  .. py:method:: list_objects_v2(**kwargs)

    

    Returns some or all (up to 1,000) of the objects in a bucket. You can use the request parameters as selection criteria to return a subset of the objects in a bucket. A ``200 OK`` response can contain valid or invalid XML. Make sure to design your application to parse the contents of the response and handle it appropriately.

     

    To use this operation, you must have READ access to the bucket.

     

    To use this operation in an AWS Identity and Access Management (IAM) policy, you must have permissions to perform the ``s3:ListBucket`` action. The bucket owner has this permission by default and can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

    .. warning::

       

      This section describes the latest revision of the API. We recommend that you use this revised API for application development. For backward compatibility, Amazon S3 continues to support the prior version of this API,  ListObjects .

       

     

    To get a list of your buckets, see  ListBuckets .

     

    The following operations are related to ``ListObjectsV2`` :

     

     
    *  GetObject   
     
    *  PutObject   
     
    *  CreateBucket   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjectsV2>`_    


    **Request Syntax** 
    ::

      response = client.list_objects_v2(
          Bucket='string',
          Delimiter='string',
          EncodingType='url',
          MaxKeys=123,
          Prefix='string',
          ContinuationToken='string',
          FetchOwner=True|False,
          StartAfter='string'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Bucket name to list. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type Delimiter: string
    :param Delimiter: 

      A delimiter is a character you use to group keys.

      

    
    :type EncodingType: string
    :param EncodingType: 

      Encoding type used by Amazon S3 to encode object keys in the response.

      

    
    :type MaxKeys: integer
    :param MaxKeys: 

      Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.

      

    
    :type Prefix: string
    :param Prefix: 

      Limits the response to keys that begin with the specified prefix.

      

    
    :type ContinuationToken: string
    :param ContinuationToken: 

      ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key.

      

    
    :type FetchOwner: boolean
    :param FetchOwner: 

      The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true.

      

    
    :type StartAfter: string
    :param StartAfter: 

      StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IsTruncated': True|False,
            'Contents': [
                {
                    'Key': 'string',
                    'LastModified': datetime(2015, 1, 1),
                    'ETag': 'string',
                    'Size': 123,
                    'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'GLACIER'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'DEEP_ARCHIVE',
                    'Owner': {
                        'DisplayName': 'string',
                        'ID': 'string'
                    }
                },
            ],
            'Name': 'string',
            'Prefix': 'string',
            'Delimiter': 'string',
            'MaxKeys': 123,
            'CommonPrefixes': [
                {
                    'Prefix': 'string'
                },
            ],
            'EncodingType': 'url',
            'KeyCount': 123,
            'ContinuationToken': 'string',
            'NextContinuationToken': 'string',
            'StartAfter': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IsTruncated** *(boolean) --* 

          Set to false if all of the results were returned. Set to true if more keys are available to return. If the number of results exceeds that specified by MaxKeys, all of the results might not be returned.

          
        

        - **Contents** *(list) --* 

          Metadata about each object returned.

          
          

          - *(dict) --* 

            An object consists of data and its descriptive metadata.

            
            

            - **Key** *(string) --* 

              The name that you assign to an object. You use the object key to retrieve the object.

              
            

            - **LastModified** *(datetime) --* 

              The date the Object was Last Modified

              
            

            - **ETag** *(string) --* 

              The entity tag is an MD5 hash of the object. ETag reflects only changes to the contents of an object, not its metadata.

              
            

            - **Size** *(integer) --* 

              Size in bytes of the object

              
            

            - **StorageClass** *(string) --* 

              The class of storage used to store the object.

              
            

            - **Owner** *(dict) --* 

              The owner of the object

              
              

              - **DisplayName** *(string) --* 

                Container for the display name of the owner.

                
              

              - **ID** *(string) --* 

                Container for the ID of the owner.

                
          
        
      
        

        - **Name** *(string) --* 

          Bucket name. 

           

          When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

          
        

        - **Prefix** *(string) --* 

          Keys that begin with the indicated prefix.

          
        

        - **Delimiter** *(string) --* 

          Causes keys that contain the same string between the prefix and the first occurrence of the delimiter to be rolled up into a single result element in the CommonPrefixes collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up result counts as only one return against the ``MaxKeys`` value.

          
        

        - **MaxKeys** *(integer) --* 

          Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.

          
        

        - **CommonPrefixes** *(list) --* 

          All of the keys rolled up into a common prefix count as a single return when calculating the number of returns.

           

          A response can contain ``CommonPrefixes`` only if you specify a delimiter.

           

           ``CommonPrefixes`` contains all (if there are any) keys between ``Prefix`` and the next occurrence of the string specified by a delimiter.

           

           ``CommonPrefixes`` lists keys that act like subdirectories in the directory specified by ``Prefix`` .

           

          For example, if the prefix is ``notes/`` and the delimiter is a slash (``/`` ) as in ``notes/summer/july`` , the common prefix is ``notes/summer/`` . All of the keys that roll up into a common prefix count as a single return when calculating the number of returns. 

          
          

          - *(dict) --* 

            Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. 

            
            

            - **Prefix** *(string) --* 

              Container for the specified common prefix.

              
        
      
        

        - **EncodingType** *(string) --* 

          Encoding type used by Amazon S3 to encode object key names in the XML response.

           

          If you specify the encoding-type request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements:

           

           ``Delimiter, Prefix, Key,`` and ``StartAfter`` .

          
        

        - **KeyCount** *(integer) --* 

          KeyCount is the number of keys returned with this request. KeyCount will always be less than equals to MaxKeys field. Say you ask for 50 keys, your result will include less than equals 50 keys 

          
        

        - **ContinuationToken** *(string) --* 

          If ContinuationToken was sent with the request, it is included in the response.

          
        

        - **NextContinuationToken** *(string) --* 

           ``NextContinuationToken`` is sent when ``isTruncated`` is true, which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this ``NextContinuationToken`` . ``NextContinuationToken`` is obfuscated and is not a real key

          
        

        - **StartAfter** *(string) --* 

          If StartAfter was sent with the request, it is included in the response.

          
    

  .. py:method:: list_parts(**kwargs)

    

    Lists the parts that have been uploaded for a specific multipart upload. This operation must include the upload ID, which you obtain by sending the initiate multipart upload request (see  CreateMultipartUpload ). This request returns a maximum of 1,000 uploaded parts. The default number of parts returned is 1,000 parts. You can restrict the number of parts returned by specifying the ``max-parts`` request parameter. If your multipart upload consists of more than 1,000 parts, the response returns an ``IsTruncated`` field with the value of true, and a ``NextPartNumberMarker`` element. In subsequent ``ListParts`` requests you can include the part-number-marker query string parameter and set its value to the ``NextPartNumberMarker`` field value from the previous response.

     

    For more information on multipart uploads, see `Uploading Objects Using Multipart Upload <https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html>`__ .

     

    For information on permissions required to use the multipart upload API, see `Multipart Upload API and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ .

     

    The following operations are related to ``ListParts`` :

     

     
    *  CreateMultipartUpload   
     
    *  UploadPart   
     
    *  CompleteMultipartUpload   
     
    *  AbortMultipartUpload   
     
    *  ListMultipartUploads   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListParts>`_    


    **Request Syntax** 
    ::

      response = client.list_parts(
          Bucket='string',
          Key='string',
          MaxParts=123,
          MirrorDestination='string',
          PartNumberMarker=123,
          UploadId='string',
          RequestPayer='requester'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Name of the bucket to which the parts are being uploaded. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      Object key for which the multipart upload was initiated.

      

    
    :type MaxParts: integer
    :param MaxParts: 

      Sets the maximum number of parts to return.

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type PartNumberMarker: integer
    :param PartNumberMarker: 

      Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.

      

    
    :type UploadId: string
    :param UploadId: **[REQUIRED]** 

      Upload ID identifying the multipart upload whose parts are being listed.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AbortDate': datetime(2015, 1, 1),
            'AbortRuleId': 'string',
            'Bucket': 'string',
            'Key': 'string',
            'UploadId': 'string',
            'PartNumberMarker': 123,
            'NextPartNumberMarker': 123,
            'MaxParts': 123,
            'IsTruncated': True|False,
            'Parts': [
                {
                    'PartNumber': 123,
                    'LastModified': datetime(2015, 1, 1),
                    'ETag': 'string',
                    'Size': 123
                },
            ],
            'Initiator': {
                'ID': 'string',
                'DisplayName': 'string'
            },
            'Owner': {
                'DisplayName': 'string',
                'ID': 'string'
            },
            'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **AbortDate** *(datetime) --* 

          If the bucket has a lifecycle rule configured with an action to abort incomplete multipart uploads and the prefix in the lifecycle rule matches the object name in the request, then the response includes this header indicating when the initiated multipart upload will become eligible for abort operation. For more information, see `Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config>`__ .

           

          The response will also include the ``x-amz-abort-rule-id`` header that will provide the ID of the lifecycle configuration rule that defines this action.

          
        

        - **AbortRuleId** *(string) --* 

          This header is returned along with the ``x-amz-abort-date`` header. It identifies applicable lifecycle configuration rule that defines the action to abort incomplete multipart uploads.

          
        

        - **Bucket** *(string) --* 

          Name of the bucket to which the multipart upload was initiated.

          
        

        - **Key** *(string) --* 

          Object key for which the multipart upload was initiated.

          
        

        - **UploadId** *(string) --* 

          Upload ID identifying the multipart upload whose parts are being listed.

          
        

        - **PartNumberMarker** *(integer) --* 

          When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.

          
        

        - **NextPartNumberMarker** *(integer) --* 

          When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.

          
        

        - **MaxParts** *(integer) --* 

          Maximum number of parts that were allowed in the response.

          
        

        - **IsTruncated** *(boolean) --* 

          Indicates whether the returned list of parts is truncated. A true value indicates that the list was truncated. A list can be truncated if the number of parts exceeds the limit returned in the MaxParts element.

          
        

        - **Parts** *(list) --* 

          Container for elements related to a particular part. A response can contain zero or more ``Part`` elements.

          
          

          - *(dict) --* 

            Container for elements related to a part.

            
            

            - **PartNumber** *(integer) --* 

              Part number identifying the part. This is a positive integer between 1 and 10,000.

              
            

            - **LastModified** *(datetime) --* 

              Date and time at which the part was uploaded.

              
            

            - **ETag** *(string) --* 

              Entity tag returned when the part was uploaded.

              
            

            - **Size** *(integer) --* 

              Size in bytes of the uploaded part data.

              
        
      
        

        - **Initiator** *(dict) --* 

          Container element that identifies who initiated the multipart upload. If the initiator is an AWS account, this element provides the same information as the ``Owner`` element. If the initiator is an IAM User, this element provides the user ARN and display name.

          
          

          - **ID** *(string) --* 

            If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value.

            
          

          - **DisplayName** *(string) --* 

            Name of the Principal.

            
      
        

        - **Owner** *(dict) --* 

          Container element that identifies the object owner, after the object is created. If multipart upload is initiated by an IAM user, this element provides the parent account ID and display name.

          
          

          - **DisplayName** *(string) --* 

            Container for the display name of the owner.

            
          

          - **ID** *(string) --* 

            Container for the ID of the owner.

            
      
        

        - **StorageClass** *(string) --* 

          Class of storage (STANDARD or REDUCED_REDUNDANCY) used to store the uploaded object.

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: put_bucket_accelerate_configuration(**kwargs)

    

    Sets the accelerate configuration of an existing bucket. Amazon S3 Transfer Acceleration is a bucket-level feature that enables you to perform faster data transfers to Amazon S3.

     

    To use this operation, you must have permission to perform the s3:PutAccelerateConfiguration action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

    The Transfer Acceleration state of a bucket can be set to one of the following two values:

     

     
    * Enabled – Enables accelerated data transfers to the bucket. 
     
    * Suspended – Disables accelerated data transfers to the bucket. 
     

     

    The  GetBucketAccelerateConfiguration operation returns the transfer acceleration state of a bucket.

     

    After setting the Transfer Acceleration state of a bucket to Enabled, it might take up to thirty minutes before the data transfer rates to the bucket increase.

     

    The name of the bucket used for Transfer Acceleration must be DNS-compliant and must not contain periods (".").

     

    For more information about transfer acceleration, see `Transfer Acceleration <https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html>`__ .

     

    The following operations are related to ``PutBucketAccelerateConfiguration`` :

     

     
    *  GetBucketAccelerateConfiguration   
     
    *  CreateBucket   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketAccelerateConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.put_bucket_accelerate_configuration(
          Bucket='string',
          AccelerateConfiguration={
              'Status': 'Enabled'|'Suspended'
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Name of the bucket for which the accelerate configuration is set.

      

    
    :type AccelerateConfiguration: dict
    :param AccelerateConfiguration: **[REQUIRED]** 

      Container for setting the transfer acceleration state.

      

    
      - **Status** *(string) --* 

        Specifies the transfer acceleration status of the bucket.

        

      
    
    
    :returns: None

  .. py:method:: put_bucket_acl(**kwargs)

    

    Sets the permissions on an existing bucket using access control lists (ACL). For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ . To set the ACL of a bucket, you must have ``WRITE_ACP`` permission.

     

    You can use one of the following two ways to set a bucket's permissions:

     

     
    * Specify the ACL in the request body 
     
    * Specify permissions using request headers 
     

     

    .. note::

       

      You cannot specify access permission using both the body and the request headers.

       

     

    Depending on your application needs, you may choose to set the ACL on a bucket using either the request body or the headers. For example, if you have an existing application that updates a bucket ACL using the request body, then you can continue to use that approach.

     

     **Access Permissions**  

     

    You can set access permissions using one of the following methods:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. Amazon S3 supports a set of predefined ACLs, known as *canned ACLs* . Each canned ACL has a predefined set of grantees and permissions. Specify the canned ACL name as the value of ``x-amz-acl`` . If you use this header, you cannot use other access control-specific headers in your request. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. When using these headers, you specify explicit access permissions and grantees (AWS accounts or Amazon S3 groups) who will receive the permission. If you use these ACL-specific headers, you cannot use the ``x-amz-acl`` header to set a canned ACL. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . You specify each grantee as a type=value pair, where the type is one of the following: 

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-write`` header grants create, overwrite, and delete objects permission to LogDelivery group predefined by Amazon S3 and two AWS accounts identified by their email addresses.

     

     ``x-amz-grant-write: uri="http://acs.amazonaws.com/groups/s3/LogDelivery", emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

     

     **Grantee Values**  

     

    You can specify the person (grantee) to whom you're assigning access rights (using request elements) in the following ways:

     

     
    * By Email address:  ``<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="AmazonCustomerByEmail"><EmailAddress><>Grantees@email.com<></EmailAddress>lt;/Grantee>``   The grantee is resolved to the CanonicalUser and, in a response to a GET Object acl request, appears as the CanonicalUser. 
     
    * By the person's ID:  ``<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser"><ID><>ID<></ID><DisplayName><>GranteesEmail<></DisplayName> </Grantee>``   DisplayName is optional and ignored in the request 
     
    * By URI:  ``<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Group"><URI><>http://acs.amazonaws.com/groups/global/AuthenticatedUsers<></URI></Grantee>``   
     

     

     **Related Resources**  

     

     
    *  CreateBucket   
     
    *  DeleteBucket   
     
    *  GetObjectAcl   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketAcl>`_    


    **Request Syntax** 
    ::

      response = client.put_bucket_acl(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read',
          AccessControlPolicy={
              'Grants': [
                  {
                      'Grantee': {
                          'DisplayName': 'string',
                          'EmailAddress': 'string',
                          'ID': 'string',
                          'Type': 'CanonicalUser'|'AmazonCustomerByEmail'|'Group',
                          'URI': 'string'
                      },
                      'Permission': 'FULL_CONTROL'|'WRITE'|'WRITE_ACP'|'READ'|'READ_ACP'
                  },
              ],
              'Owner': {
                  'DisplayName': 'string',
                  'ID': 'string'
              }
          },
          Bucket='string',
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWrite='string',
          GrantWriteACP='string'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the bucket.

      

    
    :type AccessControlPolicy: dict
    :param AccessControlPolicy: 

      Contains the elements that set the ACL permissions for an object per grantee.

      

    
      - **Grants** *(list) --* 

        A list of grants.

        

      
        - *(dict) --* 

          Container for grant information.

          

        
          - **Grantee** *(dict) --* 

            The person being granted permissions.

            

          
            - **DisplayName** *(string) --* 

              Screen name of the grantee.

              

            
            - **EmailAddress** *(string) --* 

              Email address of the grantee.

              

            
            - **ID** *(string) --* 

              The canonical user ID of the grantee.

              

            
            - **Type** *(string) --* **[REQUIRED]** 

              Type of grantee

              

            
            - **URI** *(string) --* 

              URI of the grantee group.

              

            
          
          - **Permission** *(string) --* 

            Specifies the permission given to the grantee.

            

          
        
    
      - **Owner** *(dict) --* 

        Container for the bucket owner's display name and ID.

        

      
        - **DisplayName** *(string) --* 

          Container for the display name of the owner.

          

        
        - **ID** *(string) --* 

          Container for the ID of the owner.

          

        
      
    
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket to which to apply the ACL.

      

    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to list the objects in the bucket.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the bucket ACL.

      

    
    :type GrantWrite: string
    :param GrantWrite: 

      Allows grantee to create, overwrite, and delete any object in the bucket.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable bucket.

      

    
    
    :returns: None

  .. py:method:: put_bucket_analytics_configuration(**kwargs)

    Sets an analytics configuration for the bucket (specified by the analytics configuration ID).

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketAnalyticsConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.put_bucket_analytics_configuration(
          Bucket='string',
          Id='string',
          AnalyticsConfiguration={
              'Id': 'string',
              'Filter': {
                  'Prefix': 'string',
                  'Tag': {
                      'Key': 'string',
                      'Value': 'string'
                  },
                  'And': {
                      'Prefix': 'string'
                  }
              },
              'StorageClassAnalysis': {
                  'DataExport': {
                      'OutputSchemaVersion': 'V_1',
                      'Destination': {
                          'S3BucketDestination': {
                              'Format': 'CSV',
                              'BucketAccountId': 'string',
                              'Bucket': 'string',
                              'Prefix': 'string'
                          }
                      }
                  }
              }
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket to which an analytics configuration is stored.

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID that identifies the analytics configuration.

      

    
    :type AnalyticsConfiguration: dict
    :param AnalyticsConfiguration: **[REQUIRED]** 

      The configuration and any analyses for the analytics filter.

      

    
      - **Id** *(string) --* **[REQUIRED]** 

        The ID that identifies the analytics configuration.

        

      
      - **Filter** *(dict) --* 

        The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.

        

      
        - **Prefix** *(string) --* 

          The prefix to use when evaluating an analytics filter.

          

        
        - **Tag** *(dict) --* 

          The tag to use when evaluating an analytics filter.

          

        
          - **Key** *(string) --* **[REQUIRED]** 

            Name of the tag.

            

          
          - **Value** *(string) --* **[REQUIRED]** 

            Value of the tag.

            

          
        
        - **And** *(dict) --* 

          A conjunction (logical AND) of predicates, which is used in evaluating an analytics filter. The operator must have at least two predicates.

          

        
          - **Prefix** *(string) --* 

            The prefix to use when evaluating an AND predicate: The prefix that an object must have to be included in the metrics results.

            

          
        
      
      - **StorageClassAnalysis** *(dict) --* **[REQUIRED]** 

        Contains data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes. 

        

      
        - **DataExport** *(dict) --* 

          Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.

          

        
          - **OutputSchemaVersion** *(string) --* **[REQUIRED]** 

            The version of the output schema to use when exporting data. Must be ``V_1`` .

            

          
          - **Destination** *(dict) --* **[REQUIRED]** 

            The place to store the data for an analysis.

            

          
            - **S3BucketDestination** *(dict) --* **[REQUIRED]** 

              A destination signifying output to an S3 bucket.

              

            
              - **Format** *(string) --* **[REQUIRED]** 

                Specifies the file format used when exporting data to Amazon S3.

                

              
              - **BucketAccountId** *(string) --* 

                The account ID that owns the destination bucket. If no account ID is provided, the owner will not be validated prior to exporting data.

                

              
              - **Bucket** *(string) --* **[REQUIRED]** 

                The Amazon Resource Name (ARN) of the bucket to which data is exported.

                

              
              - **Prefix** *(string) --* 

                The prefix to use when exporting data. The prefix is prepended to all results.

                

              
            
          
        
      
    
    
    :returns: None

  .. py:method:: put_bucket_cors(**kwargs)

    

    Sets the ``cors`` configuration for your bucket. If the configuration exists, Amazon S3 replaces it.

     

    To use this operation, you must be allowed to perform the ``s3:PutBucketCORS`` action. By default, the bucket owner has this permission and can grant it to others.

     

    You set this configuration on a bucket so that the bucket can service cross-origin requests. For example, you might want to enable a request whose origin is ``http://www.example.com`` to access your Amazon S3 bucket at ``my.example.bucket.com`` by using the browser's ``XMLHttpRequest`` capability.

     

    To enable cross-origin resource sharing (CORS) on a bucket, you add the ``cors`` subresource to the bucket. The ``cors`` subresource is an XML document in which you configure rules that identify origins and the HTTP methods that can be executed on your bucket. The document is limited to 64 KB in size. 

     

    When Amazon S3 receives a cross-origin request (or a pre-flight OPTIONS request) against a bucket, it evaluates the ``cors`` configuration on the bucket and uses the first ``CORSRule`` rule that matches the incoming browser request to enable a cross-origin request. For a rule to match, the following conditions must be met:

     

     
    * The request's ``Origin`` header must match ``AllowedOrigin`` elements. 
     
    * The request method (for example, GET, PUT, HEAD, and so on) or the ``Access-Control-Request-Method`` header in case of a pre-flight ``OPTIONS`` request must be one of the ``AllowedMethod`` elements.  
     
    * Every header specified in the ``Access-Control-Request-Headers`` request header of a pre-flight request must match an ``AllowedHeader`` element.  
     

     

    For more information about CORS, go to `Enabling Cross-Origin Resource Sharing <https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

     **Related Resources**  

     

     
    *  GetBucketCors   
     
    *  DeleteBucketCors   
     
    *  RESTOPTIONSobject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketCors>`_    


    **Request Syntax** 
    ::

      response = client.put_bucket_cors(
          Bucket='string',
          CORSConfiguration={
              'CORSRules': [
                  {
                      'AllowedHeaders': [
                          'string',
                      ],
                      'AllowedMethods': [
                          'string',
                      ],
                      'AllowedOrigins': [
                          'string',
                      ],
                      'ExposeHeaders': [
                          'string',
                      ],
                      'MaxAgeSeconds': 123
                  },
              ]
          },
          
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Specifies the bucket impacted by the ``cors`` configuration.

      

    
    :type CORSConfiguration: dict
    :param CORSConfiguration: **[REQUIRED]** 

      Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see `Enabling Cross-Origin Resource Sharing <https://docs.aws.amazon.com/AmazonS3/latest/dev//cors.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
      - **CORSRules** *(list) --* **[REQUIRED]** 

        A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.

        

      
        - *(dict) --* 

          Specifies a cross-origin access rule for an Amazon S3 bucket.

          

        
          - **AllowedHeaders** *(list) --* 

            Headers that are specified in the ``Access-Control-Request-Headers`` header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed.

            

          
            - *(string) --* 

            
        
          - **AllowedMethods** *(list) --* **[REQUIRED]** 

            An HTTP method that you allow the origin to execute. Valid values are ``GET`` , ``PUT`` , ``HEAD`` , ``POST`` , and ``DELETE`` .

            

          
            - *(string) --* 

            
        
          - **AllowedOrigins** *(list) --* **[REQUIRED]** 

            One or more origins you want customers to be able to access the bucket from.

            

          
            - *(string) --* 

            
        
          - **ExposeHeaders** *(list) --* 

            One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript ``XMLHttpRequest`` object).

            

          
            - *(string) --* 

            
        
          - **MaxAgeSeconds** *(integer) --* 

            The time in seconds that your browser is to cache the preflight response for the specified resource.

            

          
        
    
    
    
    :returns: None

  .. py:method:: put_bucket_inventory_configuration(**kwargs)

    

    This implementation of the ``PUT`` operation adds an inventory configuration (identified by the inventory ID) to the bucket. You can have up to 1,000 inventory configurations per bucket. 

     

    Amazon S3 inventory generates inventories of the objects in the bucket on a daily or weekly basis, and the results are published to a flat file. The bucket that is inventoried is called the *source* bucket, and the bucket where the inventory flat file is stored is called the *destination* bucket. The *destination* bucket must be in the same AWS Region as the *source* bucket. 

     

    When you configure an inventory for a *source* bucket, you specify the *destination* bucket where you want the inventory to be stored, and whether to generate the inventory daily or weekly. You can also configure what object metadata to include and whether to inventory all object versions or only current versions. For more information, see `Amazon S3 Inventory <https://docs.aws.amazon.com/AmazonS3/latest/dev//storage-inventory.html>`__ in the Amazon Simple Storage Service Developer Guide.

     

    .. warning::

       

      You must create a bucket policy on the *destination* bucket to grant permissions to Amazon S3 to write objects to the bucket in the defined location. For an example policy, see `Granting Permissions for Amazon S3 Inventory and Storage Class Analysis. <https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html#example-bucket-policies-use-case-9>`__  

       

     

    To use this operation, you must have permissions to perform the ``s3:PutInventoryConfiguration`` action. The bucket owner has this permission by default and can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev//using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev//s3-access-control.html>`__ in the Amazon Simple Storage Service Developer Guide.

     

     **Special Errors**  

     

     
    * **HTTP 400 Bad Request Error**   

       
      * *Code:* InvalidArgument 
       
      * *Cause:* Invalid Argument 
       

     
     
    * **HTTP 400 Bad Request Error**   

       
      * *Code:* TooManyConfigurations 
       
      * *Cause:* You are attempting to create a new configuration but have already reached the 1,000-configuration limit.  
       

     
     
    * **HTTP 403 Forbidden Error**   

       
      * *Code:* AccessDenied 
       
      * *Cause:* You are not the owner of the specified bucket, or you do not have the ``s3:PutInventoryConfiguration`` bucket permission to set the configuration on the bucket  
       

     
     

     

     **Related Resources**  

     

     
    *  GetBucketInventoryConfiguration   
     
    *  DeleteBucketInventoryConfiguration   
     
    *  ListBucketInventoryConfigurations   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketInventoryConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.put_bucket_inventory_configuration(
          Bucket='string',
          Id='string',
          InventoryConfiguration={
              'Destination': {
                  'S3BucketDestination': {
                      'AccountId': 'string',
                      'Bucket': 'string',
                      'Format': 'CSV',
                      'Prefix': 'string'
                  }
              },
              'IsEnabled': True|False,
              'Filter': {
                  'Prefix': 'string'
              },
              'Id': 'string',
              'OptionalFields': [
                  'Size'|'LastModifiedDate'|'StorageClass'|'ETag'|'IsMultipartUploaded'|'ReplicationStatus',
              ],
              'Schedule': {
                  'Frequency': 'Daily'|'Weekly'
              }
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket where the inventory configuration will be stored.

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID used to identify the inventory configuration.

      

    
    :type InventoryConfiguration: dict
    :param InventoryConfiguration: **[REQUIRED]** 

      Specifies the inventory configuration.

      

    
      - **Destination** *(dict) --* **[REQUIRED]** 

        Contains information about where to publish the inventory results.

        

      
        - **S3BucketDestination** *(dict) --* **[REQUIRED]** 

          Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.

          

        
          - **AccountId** *(string) --* 

            The ID of the account that owns the destination bucket.

            

          
          - **Bucket** *(string) --* **[REQUIRED]** 

            The Amazon Resource Name (ARN) of the bucket where inventory results will be published.

            

          
          - **Format** *(string) --* **[REQUIRED]** 

            Specifies the output format of the inventory results.

            

          
          - **Prefix** *(string) --* 

            The prefix that is prepended to all inventory results.

            

          
        
      
      - **IsEnabled** *(boolean) --* **[REQUIRED]** 

        Specifies whether the inventory is enabled or disabled. If set to ``True`` , an inventory list is generated. If set to ``False`` , no inventory list is generated.

        

      
      - **Filter** *(dict) --* 

        Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.

        

      
        - **Prefix** *(string) --* **[REQUIRED]** 

          The prefix that an object must have to be included in the inventory results.

          

        
      
      - **Id** *(string) --* **[REQUIRED]** 

        The ID used to identify the inventory configuration.

        

      
      - **OptionalFields** *(list) --* 

        Contains the optional fields that are included in the inventory results.

        

      
        - *(string) --* 

        
    
      - **Schedule** *(dict) --* **[REQUIRED]** 

        Specifies the schedule for generating inventory results.

        

      
        - **Frequency** *(string) --* **[REQUIRED]** 

          Specifies how frequently inventory results are produced.

          

        
      
    
    
    :returns: None

  .. py:method:: put_bucket_lifecycle_configuration(**kwargs)

    

    Creates a new lifecycle configuration for the bucket or replaces an existing lifecycle configuration. For information about lifecycle configuration, see `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

    .. note::

       

      Bucket lifecycle configuration now supports specifying a lifecycle rule using an object key name prefix, one or more object tags, or a combination of both. Accordingly, this section describes the latest API. The previous version of the API supported filtering based only on an object key name prefix, which is supported for backward compatibility. For the related API description, see  PutBucketLifecycle .

       

     

     **Rules**  

     

    You specify the lifecycle configuration in your request body. The lifecycle configuration is specified as XML consisting of one or more rules. Each rule consists of the following:

     

     
    * Filter identifying a subset of objects to which the rule applies. The filter can be based on a key name prefix, object tags, or a combination of both. 
     
    * Status whether the rule is in effect. 
     
    * One or more lifecycle transition and expiration actions that you want Amazon S3 to perform on the objects identified by the filter. If the state of your bucket is versioning-enabled or versioning-suspended, you can have many versions of the same object (one current version and zero or more noncurrent versions). Amazon S3 provides predefined actions that you can specify for current and noncurrent object versions. 
     

     

    For more information, see `Object Lifecycle Management <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html>`__ and `Lifecycle Configuration Elements <https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html>`__ .

     

     **Permissions**  

     

    By default, all Amazon S3 resources are private, including buckets, objects, and related subresources (for example, lifecycle configuration and website configuration). Only the resource owner (that is, the AWS account that created it) can access the resource. The resource owner can optionally grant access permissions to others by writing an access policy. For this operation, a user must get the s3:PutLifecycleConfiguration permission.

     

    You can also explicitly deny permissions. Explicit deny also supersedes any other permissions. If you want to block users or accounts from removing or deleting objects from your bucket, you must deny them permissions for the following actions:

     

     
    * s3:DeleteObject 
     
    * s3:DeleteObjectVersion 
     
    * s3:PutLifecycleConfiguration 
     

     

    For more information about permissions, see `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

    The following are related to ``PutBucketLifecycleConfiguration`` :

     

     
    * `Examples of Lifecycle Configuration <https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-configuration-examples.html>`__   
     
    *  GetBucketLifecycleConfiguration   
     
    *  DeleteBucketLifecycle   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketLifecycleConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.put_bucket_lifecycle_configuration(
          Bucket='string',
          LifecycleConfiguration={
              'Rules': [
                  {
                      'Expiration': {
                          'Date': datetime(2015, 1, 1),
                          'Days': 123
                      },
                      'ID': 'string',
                      'Filter': {
                          'Prefix': 'string'
                      },
                      'Status': 'Enabled'|'Disabled',
                      'Transitions': [
                          {
                              'Date': datetime(2015, 1, 1),
                              'Days': 123,
                              'StorageClass': 'ACCELERATED'|'GLACIER'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'DEEP_ARCHIVE'
                          },
                      ]
                  },
              ]
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket for which to set the configuration.

      

    
    :type LifecycleConfiguration: dict
    :param LifecycleConfiguration: 

      Container for lifecycle rules. You can add as many as 1,000 rules.

      

    
      - **Rules** *(list) --* **[REQUIRED]** 

        A lifecycle rule for individual objects in an Amazon S3 bucket.

        

      
        - *(dict) --* 

          A lifecycle rule for individual objects in an Amazon S3 bucket.

          

        
          - **Expiration** *(dict) --* 

            Specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker.

            

          
            - **Date** *(datetime) --* 

              Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.

              

            
            - **Days** *(integer) --* 

              Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.

              

            
          
          - **ID** *(string) --* 

            Unique identifier for the rule. The value cannot be longer than 255 characters.

            

          
          - **Filter** *(dict) --* **[REQUIRED]** 

            The ``Filter`` is used to identify objects that a Lifecycle Rule applies to. A ``Filter`` must have exactly one of ``Prefix`` , ``Tag`` , or ``And`` specified.

            

          
            - **Prefix** *(string) --* 

              Prefix identifying one or more objects to which the rule applies.

              

            
          
          - **Status** *(string) --* **[REQUIRED]** 

            If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.

            

          
          - **Transitions** *(list) --* 

            Specifies when an Amazon S3 object transitions to a specified storage class.

            

          
            - *(dict) --* 

              Specifies when an object transitions to a specified storage class.

              

            
              - **Date** *(datetime) --* 

                Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.

                

              
              - **Days** *(integer) --* 

                Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.

                

              
              - **StorageClass** *(string) --* 

                The storage class to which you want the object to transition.

                

              
            
        
        
    
    
    
    :returns: None

  .. py:method:: put_bucket_metrics_configuration(**kwargs)

    

    Sets a metrics configuration (specified by the metrics configuration ID) for the bucket. You can have up to 1,000 metrics configurations per bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased.

     

    To use this operation, you must have permissions to perform the ``s3:PutMetricsConfiguration`` action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

    For information about CloudWatch request metrics for Amazon S3, see `Monitoring Metrics with Amazon CloudWatch <https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html>`__ .

     

    The following operations are related to ``PutBucketMetricsConfiguration`` :

     

     
    *  DeleteBucketMetricsConfiguration   
     
    *  PutBucketMetricsConfiguration   
     
    *  ListBucketMetricsConfigurations   
     

     

     ``GetBucketLifecycle`` has the following special error:

     

     
    * Error code: ``TooManyConfigurations``   

       
      * Description: You are attempting to create a new configuration but have already reached the 1,000-configuration limit. 
       
      * HTTP Status Code: HTTP 400 Bad Request 
       

     
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketMetricsConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.put_bucket_metrics_configuration(
          Bucket='string',
          Id='string',
          MetricsConfiguration={
              'Id': 'string',
              'Filter': {
                  'Prefix': 'string',
                  'Tag': {
                      'Key': 'string',
                      'Value': 'string'
                  },
                  'And': {
                      'Prefix': 'string'
                  }
              }
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket for which the metrics configuration is set.

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID used to identify the metrics configuration.

      

    
    :type MetricsConfiguration: dict
    :param MetricsConfiguration: **[REQUIRED]** 

      Specifies the metrics configuration.

      

    
      - **Id** *(string) --* **[REQUIRED]** 

        The ID used to identify the metrics configuration.

        

      
      - **Filter** *(dict) --* 

        Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction (MetricsAndOperator).

        

      
        - **Prefix** *(string) --* 

          The prefix used when evaluating a metrics filter.

          

        
        - **Tag** *(dict) --* 

          The tag used when evaluating a metrics filter.

          

        
          - **Key** *(string) --* **[REQUIRED]** 

            Name of the tag.

            

          
          - **Value** *(string) --* **[REQUIRED]** 

            Value of the tag.

            

          
        
        - **And** *(dict) --* 

          A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.

          

        
          - **Prefix** *(string) --* 

            The prefix used when evaluating an AND predicate.

            

          
        
      
    
    
    :returns: None

  .. py:method:: put_bucket_protection_configuration(**kwargs)

    Sets the protection configuration of an existing bucket. EnablePermanentRetention is optional and if not included is considered to be false. Once set to true, must be included in any subsequent PUT Bucket?protection requests for that bucket.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketProtectionConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.put_bucket_protection_configuration(
          Bucket='string',
          ProtectionConfiguration={
              'Status': 'Retention',
              'MinimumRetention': {
                  'Days': 123
              },
              'DefaultRetention': {
                  'Days': 123
              },
              'MaximumRetention': {
                  'Days': 123
              },
              'EnablePermanentRetention': True|False
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

    
    :type ProtectionConfiguration: dict
    :param ProtectionConfiguration: **[REQUIRED]** Container for setting retention settings.

    
      - **Status** *(string) --* Retention status of a bucket.

      
      - **MinimumRetention** *(dict) --* Minimum retention period for an object, if a PUT of an object specifies a shorter retention period the PUT object will fail.

      
        - **Days** *(integer) --* **[REQUIRED]** 

        
      
      - **DefaultRetention** *(dict) --* Default retention period for an object, if a PUT of an object does not specify a retention period this value will be converted to seconds and used.

      
        - **Days** *(integer) --* **[REQUIRED]** 

        
      
      - **MaximumRetention** *(dict) --* Maximum retention period for an object, if a PUT of an object specifies a longer retention period the PUT object will fail.

      
        - **Days** *(integer) --* **[REQUIRED]** 

        
      
      - **EnablePermanentRetention** *(boolean) --* Enable permanent retention for an object.

      
    
    
    :returns: None

  .. py:method:: put_bucket_replication(**kwargs)

    

    Creates a replication configuration or replaces an existing one. For more information, see `Replication <https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html>`__ in the *Amazon S3 Developer Guide* . 

     

    .. note::

       

      To perform this operation, the user or role performing the operation must have the `iam\:PassRole <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html>`__ permission.

       

     

    Specify the replication configuration in the request body. In the replication configuration, you provide the name of the destination bucket where you want Amazon S3 to replicate objects, the IAM role that Amazon S3 can assume to replicate objects on your behalf, and other relevant information.

     

    A replication configuration must include at least one rule, and can contain a maximum of 1,000. Each rule identifies a subset of objects to replicate by filtering the objects in the source bucket. To choose additional subsets of objects to replicate, add a rule for each subset. All rules must specify the same destination bucket.

     

    To specify a subset of the objects in the source bucket to apply a replication rule to, add the Filter element as a child of the Rule element. You can filter objects based on an object key prefix, one or more object tags, or both. When you add the Filter element in the configuration, you must also add the following elements: ``DeleteMarkerReplication`` , ``Status`` , and ``Priority`` .

     

    For information about enabling versioning on a bucket, see `Using Versioning <https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html>`__ .

     

    By default, a resource owner, in this case the AWS account that created the bucket, can perform this operation. The resource owner can also grant others permissions to perform the operation. For more information about permissions, see `Specifying Permissions in a Policy <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

     **Handling Replication of Encrypted Objects**  

     

    By default, Amazon S3 doesn't replicate objects that are stored at rest using server-side encryption with CMKs stored in AWS KMS. To replicate AWS KMS-encrypted objects, add the following: ``SourceSelectionCriteria`` , ``SseKmsEncryptedObjects`` , ``Status`` , ``EncryptionConfiguration`` , and ``ReplicaKmsKeyID`` . For information about replication configuration, see `Replicating Objects Created with SSE Using CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-config-for-kms-objects.html>`__ .

     

    For information on ``PutBucketReplication`` errors, see  ReplicationErrorCodeList  

     

    The following operations are related to ``PutBucketReplication`` :

     

     
    *  GetBucketReplication   
     
    *  DeleteBucketReplication   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketReplication>`_    


    **Request Syntax** 
    ::

      response = client.put_bucket_replication(
          Bucket='string',
          ReplicationConfiguration={
              'Role': 'string',
              'Rules': [
                  {
                      'ID': 'string',
                      'Prefix': 'string',
                      'Status': 'Enabled'|'Disabled',
                      'Destination': {
                          'Bucket': 'string',
                          'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE'
                      }
                  },
              ]
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket

      

    
    :type ReplicationConfiguration: dict
    :param ReplicationConfiguration: **[REQUIRED]** 

      A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.

      

    
      - **Role** *(string) --* **[REQUIRED]** 

        The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that Amazon S3 assumes when replicating objects. For more information, see `How to Set Up Replication <https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

        

      
      - **Rules** *(list) --* **[REQUIRED]** 

        A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules. 

        

      
        - *(dict) --* 

          Specifies which Amazon S3 objects to replicate and where to store the replicas.

          

        
          - **ID** *(string) --* 

            A unique identifier for the rule. The maximum value is 255 characters.

            

          
          - **Prefix** *(string) --* **[REQUIRED]** 

            An object key name prefix that identifies the object or objects to which the rule applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket, specify an empty string. 

            

          
          - **Status** *(string) --* **[REQUIRED]** 

            Specifies whether the rule is enabled.

            

          
          - **Destination** *(dict) --* **[REQUIRED]** 

            A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).

            

          
            - **Bucket** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store the results.

              

            
            - **StorageClass** *(string) --* 

              The storage class to use when replicating objects, such as standard or reduced redundancy. By default, Amazon S3 uses the storage class of the source object to create the object replica. 

               

              For valid values, see the ``StorageClass`` element of the `PUT Bucket replication <https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html>`__ action in the *Amazon Simple Storage Service API Reference* .

              

            
          
        
    
    
    
    :returns: None

  .. py:method:: put_bucket_tagging(**kwargs)

    

    Sets the tags for a bucket.

     

    Use tags to organize your AWS bill to reflect your own cost structure. To do this, sign up to get your AWS account bill with tag key values included. Then, to see the cost of combined resources, organize your billing information according to resources with the same tag key values. For example, you can tag several resources with a specific application name, and then organize your billing information to see the total cost of that application across several services. For more information, see `Cost Allocation and Tagging <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html>`__ .

     

    .. note::

       

      Within a bucket, if you add a tag that has the same key as an existing tag, the new value overwrites the old value. For more information, see `Using Cost Allocation in Amazon S3 Bucket Tags <https://docs.aws.amazon.com/AmazonS3/latest/dev/CostAllocTagging.html>`__ .

       

     

    To use this operation, you must have permissions to perform the ``s3:PutBucketTagging`` action. The bucket owner has this permission by default and can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

     ``PutBucketTagging`` has the following special errors:

     

     
    * Error code: ``InvalidTagError``   

       
      * Description: The tag provided was not a valid tag. This error can occur if the tag did not pass input validation. For information about tag restrictions, see `User-Defined Tag Restrictions <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2//allocation-tag-restrictions.html>`__ and `AWS-Generated Cost Allocation Tag Restrictions <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2//aws-tag-restrictions.html>`__ . 
       

     
     
    * Error code: ``MalformedXMLError``   

       
      * Description: The XML provided does not match the schema. 
       

     
     
    * Error code: ``OperationAbortedError``   

       
      * Description: A conflicting conditional operation is currently in progress against this resource. Please try again. 
       

     
     
    * Error code: ``InternalError``   

       
      * Description: The service was unable to apply the provided tag to the bucket. 
       

     
     

     

    The following operations are related to ``PutBucketTagging`` :

     

     
    *  GetBucketTagging   
     
    *  DeleteBucketTagging   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketTagging>`_    


    **Request Syntax** 
    ::

      response = client.put_bucket_tagging(
          Bucket='string',
          Tagging={
              'TagSet': [
                  {
                      'Key': 'string',
                      'Value': 'string'
                  },
              ]
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name.

      

    
    :type Tagging: dict
    :param Tagging: **[REQUIRED]** 

      Container for the ``TagSet`` and ``Tag`` elements.

      

    
      - **TagSet** *(list) --* **[REQUIRED]** 

        A collection for a set of tags

        

      
        - *(dict) --* 

          A container of a key value name pair.

          

        
          - **Key** *(string) --* **[REQUIRED]** 

            Name of the tag.

            

          
          - **Value** *(string) --* **[REQUIRED]** 

            Value of the tag.

            

          
        
    
    
    
    :returns: None

  .. py:method:: put_bucket_versioning(**kwargs)

    

    Sets the versioning state of an existing bucket. To set the versioning state, you must be the bucket owner.

     

    You can set the versioning state with one of the following values:

     

     **Enabled** —Enables versioning for the objects in the bucket. All objects added to the bucket receive a unique version ID.

     

     **Suspended** —Disables versioning for the objects in the bucket. All objects added to the bucket receive the version ID null.

     

    If the versioning state has never been set on a bucket, it has no versioning state; a  GetBucketVersioning request does not return a versioning state value.

     

    If the bucket owner enables MFA Delete in the bucket versioning configuration, the bucket owner must include the ``x-amz-mfa request`` header and the ``Status`` and the ``MfaDelete`` request elements in a request to set the versioning state of the bucket.

     

    .. warning::

       

      If you have an object expiration lifecycle policy in your non-versioned bucket and you want to maintain the same permanent delete behavior when you enable versioning, you must add a noncurrent expiration policy. The noncurrent expiration lifecycle policy will manage the deletes of the noncurrent object versions in the version-enabled bucket. (A version-enabled bucket maintains one current and zero or more noncurrent object versions.) For more information, see `Lifecycle and Versioning <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-and-other-bucket-config>`__ .

       

     

     **Related Resources**  

     

     
    *  CreateBucket   
     
    *  DeleteBucket   
     
    *  GetBucketVersioning   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketVersioning>`_    


    **Request Syntax** 
    ::

      response = client.put_bucket_versioning(
          Bucket='string',
          MFA='string',
          VersioningConfiguration={
              'MFADelete': 'Enabled'|'Disabled',
              'Status': 'Enabled'|'Suspended'
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name.

      

    
    :type MFA: string
    :param MFA: 

      The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.

      

    
    :type VersioningConfiguration: dict
    :param VersioningConfiguration: **[REQUIRED]** 

      Container for setting the versioning state.

      

    
      - **MFADelete** *(string) --* 

        Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.

        

      
      - **Status** *(string) --* 

        The versioning state of the bucket.

        

      
    
    
    :returns: None

  .. py:method:: put_bucket_website(**kwargs)

    

    Sets the configuration of the website that is specified in the ``website`` subresource. To configure a bucket as a website, you can add this subresource on the bucket with website configuration information such as the file name of the index document and any redirect rules. For more information, see `Hosting Websites on Amazon S3 <https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketWebsite>`_    


    **Request Syntax** 
    ::

      response = client.put_bucket_website(
          Bucket='string',
          WebsiteConfiguration={
              'ErrorDocument': {
                  'Key': 'string'
              },
              'IndexDocument': {
                  'Suffix': 'string'
              },
              'RedirectAllRequestsTo': {
                  'HostName': 'string',
                  'Protocol': 'http'|'https'
              },
              'RoutingRules': [
                  {
                      'Condition': {
                          'HttpErrorCodeReturnedEquals': 'string',
                          'KeyPrefixEquals': 'string'
                      },
                      'Redirect': {
                          'HostName': 'string',
                          'HttpRedirectCode': 'string',
                          'Protocol': 'http'|'https',
                          'ReplaceKeyPrefixWith': 'string',
                          'ReplaceKeyWith': 'string'
                      }
                  },
              ]
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name.

      

    
    :type WebsiteConfiguration: dict
    :param WebsiteConfiguration: **[REQUIRED]** 

      Container for the request.

      

    
      - **ErrorDocument** *(dict) --* 

        The name of the error document for the website.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The object key name to use when a 4XX class error occurs.

          

        
      
      - **IndexDocument** *(dict) --* 

        The name of the index document for the website.

        

      
        - **Suffix** *(string) --* **[REQUIRED]** 

          A suffix that is appended to a request that is for a directory on the website endpoint (for example,if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character.

          

        
      
      - **RedirectAllRequestsTo** *(dict) --* 

        The redirect behavior for every request to this bucket's website endpoint.

         

        .. warning::

           

          If you specify this property, you can't specify any other property.

           

        

      
        - **HostName** *(string) --* **[REQUIRED]** 

          Name of the host where requests are redirected.

          

        
        - **Protocol** *(string) --* 

          Protocol to use when redirecting requests. The default is the protocol that is used in the original request.

          

        
      
      - **RoutingRules** *(list) --* 

        Rules that define when a redirect is applied and the redirect behavior.

        

      
        - *(dict) --* 

          Specifies the redirect behavior and when a redirect is applied.

          

        
          - **Condition** *(dict) --* 

            A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.

            

          
            - **HttpErrorCodeReturnedEquals** *(string) --* 

              The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element ``Condition`` is specified and sibling ``KeyPrefixEquals`` is not specified. If both are specified, then both must be true for the redirect to be applied.

              

            
            - **KeyPrefixEquals** *(string) --* 

              The object key name prefix when the redirect is applied. For example, to redirect requests for ``ExamplePage.html`` , the key prefix will be ``ExamplePage.html`` . To redirect request for all pages with the prefix ``docs/`` , the key prefix will be ``/docs`` , which identifies all objects in the ``docs/`` folder. Required when the parent element ``Condition`` is specified and sibling ``HttpErrorCodeReturnedEquals`` is not specified. If both conditions are specified, both must be true for the redirect to be applied.

              

            
          
          - **Redirect** *(dict) --* **[REQUIRED]** 

            Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.

            

          
            - **HostName** *(string) --* 

              The host name to use in the redirect request.

              

            
            - **HttpRedirectCode** *(string) --* 

              The HTTP redirect code to use on the response. Not required if one of the siblings is present.

              

            
            - **Protocol** *(string) --* 

              Protocol to use when redirecting requests. The default is the protocol that is used in the original request.

              

            
            - **ReplaceKeyPrefixWith** *(string) --* 

              The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix ``docs/`` (objects in the ``docs/`` folder) to ``documents/`` , you can set a condition block with ``KeyPrefixEquals`` set to ``docs/`` and in the Redirect set ``ReplaceKeyPrefixWith`` to ``/documents`` . Not required if one of the siblings is present. Can be present only if ``ReplaceKeyWith`` is not provided.

              

            
            - **ReplaceKeyWith** *(string) --* 

              The specific object key to use in the redirect request. For example, redirect request to ``error.html`` . Not required if one of the siblings is present. Can be present only if ``ReplaceKeyPrefixWith`` is not provided.

              

            
          
        
    
    
    
    :returns: None

  .. py:method:: put_object(**kwargs)

    

    Adds an object to a bucket. You must have WRITE permissions on a bucket to add an object to it.

     

    Amazon S3 never adds partial objects; if you receive a success response, Amazon S3 added the entire object to the bucket.

     

    Amazon S3 is a distributed system. If it receives multiple write requests for the same object simultaneously, it overwrites all but the last object written. Amazon S3 does not provide object locking; if you need this, make sure to build it into your application layer or use versioning instead.

     

    To ensure that data is not corrupted traversing the network, use the ``Content-MD5`` header. When you use this header, Amazon S3 checks the object against the provided MD5 value and, if they do not match, returns an error. Additionally, you can calculate the MD5 while putting an object to Amazon S3 and compare the returned ETag to the calculated MD5 value.

     

    .. note::

       

      To configure your application to send the request headers before sending the request body, use the ``100-continue`` HTTP status code. For PUT operations, this helps you avoid sending the message body if the message is rejected based on the headers (for example, because authentication fails or a redirect occurs). For more information on the ``100-continue`` HTTP status code, see Section 8.2.3 of `http\://www.ietf.org/rfc/rfc2616.txt <http://www.ietf.org/rfc/rfc2616.txt>`__ .

       

     

    You can optionally request server-side encryption. With server-side encryption, Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts the data when you access it. You have the option to provide your own encryption key or use AWS managed encryption keys. For more information, see `Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html>`__ .

      Access Permissions  

    You can optionally specify the accounts or groups that should be granted specific permissions on the new object. There are two ways to grant the permissions using the request headers:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . 
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

      Server-Side- Encryption-Specific Request Headers  

    You can optionally tell Amazon S3 to encrypt data at rest using server-side encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. The option you use depends on whether you want to use AWS managed encryption keys or provide your own encryption key. 

     

     
    * Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys used to encrypt data, specify the following headers in the request. 

       
      * x-amz-server-side​-encryption 
       
      * x-amz-server-side-encryption-aws-kms-key-id 
       
      * x-amz-server-side-encryption-context 
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data. If you want to use a customer managed AWS KMS CMK, you must provide the ``x-amz-server-side-encryption-aws-kms-key-id`` of the symmetric customer managed CMK. Amazon S3 only supports symmetric CMKs and not asymmetric CMKs. For more information, see `Using Symmetric and Asymmetric Keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html>`__ in the *AWS Key Management Service Developer Guide* .

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * Use customer-provided encryption keys – If you want to manage your own encryption keys, provide all the following headers in the request. 

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

      Access-Control-List (ACL)-Specific Request Headers  

    You also can use the following access control–related headers with this operation. By default, all objects are private. Only the owner has full access control. When adding a new object, you can grant permissions to individual AWS accounts or to predefined groups defined by Amazon S3. These permissions are then added to the Access Control List (ACL) on the object. For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ . With this operation, you can grant access permissions using one of the following two methods:

     

     
    * Specify a canned ACL (``x-amz-acl`` ) — Amazon S3 supports a set of predefined ACLs, known as canned ACLs. Each canned ACL has a predefined set of grantees and permissions. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly — To explicitly grant access permissions to specific AWS accounts or groups, use the following headers. Each header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . In the header, you specify a list of grantees who get the specific permission. To grant permissions explicitly use: 

       
      * x-amz-grant-read 
       
      * x-amz-grant-write 
       
      * x-amz-grant-read-acp 
       
      * x-amz-grant-write-acp 
       
      * x-amz-grant-full-control 
       

     

    You specify each grantee as a type=value pair, where the type is one of the following:

     

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 

      .. warning::

         Using email addresses to specify a grantee is only supported in the following AWS Regions:  

           
          * US East (N. Virginia) 
           
          * US West (N. California) 
           
          * US West (Oregon) 
           
          * Asia Pacific (Singapore) 
           
          * Asia Pacific (Sydney) 
           
          * Asia Pacific (Tokyo) 
           
          * EU (Ireland) 
           
          * South America (São Paulo) 
           

         

        For a list of all the Amazon S3 supported Regions and endpoints, see `Regions and Endpoints <https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region>`__ in the AWS General Reference

         

       
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants the AWS accounts identified by email addresses permissions to read object data and its metadata:

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

      Server-Side- Encryption-Specific Request Headers  

    You can optionally tell Amazon S3 to encrypt data at rest using server-side encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. The option you use depends on whether you want to use AWS-managed encryption keys or provide your own encryption key. 

     

     
    * Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys used to encrypt data, specify the following headers in the request. 

       
      * x-amz-server-side​-encryption 
       
      * x-amz-server-side-encryption-aws-kms-key-id 
       
      * x-amz-server-side-encryption-context 
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data. If you want to use a customer managed AWS KMS CMK, you must provide the ``x-amz-server-side-encryption-aws-kms-key-id`` of the symmetric customer managed CMK. Amazon S3 only supports symmetric CMKs and not asymmetric CMKs. For more information, see `Using Symmetric and Asymmetric Keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html>`__ in the *AWS Key Management Service Developer Guide* .

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * Use customer-provided encryption keys – If you want to manage your own encryption keys, provide all the following headers in the request. 

    .. note::

       If you use this feature, the ETag value that Amazon S3 returns in the response is not the MD5 of the object. 

     

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

       

     **Storage Class Options**  

     

    By default, Amazon S3 uses the Standard storage class to store newly created objects. The Standard storage class provides high durability and high availability. You can specify other storage classes depending on the performance needs. For more information, see `Storage Classes <https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html>`__ in the Amazon Simple Storage Service Developer Guide.

     

     **Versioning**  

     

    If you enable versioning for a bucket, Amazon S3 automatically generates a unique version ID for the object being stored. Amazon S3 returns this ID in the response using the ``x-amz-version-id response`` header. If versioning is suspended, Amazon S3 always uses null as the version ID for the object stored. For more information about returning the versioning state of a bucket, see  GetBucketVersioning . If you enable versioning for a bucket, when Amazon S3 receives multiple write requests for the same object simultaneously, it stores all of the objects.

     

     **Related Resources**  

     

     
    *  CopyObject   
     
    *  DeleteObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutObject>`_    


    **Request Syntax** 
    ::

      response = client.put_object(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read'|'aws-exec-read'|'bucket-owner-read'|'bucket-owner-full-control',
          Body=b'bytes'|file,
          Bucket='string',
          CacheControl='string',
          ContentDisposition='string',
          ContentEncoding='string',
          ContentLanguage='string',
          ContentLength=123,
          ContentMD5='string',
          ContentType='string',
          Expires=datetime(2015, 1, 1),
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWriteACP='string',
          Key='string',
          Metadata={
              'string': 'string'
          },
          RetentionExpirationDate=datetime(2015, 1, 1),
          RetentionLegalHoldId='string',
          RetentionPeriod=123,
          ServerSideEncryption='AES256',
          StorageClass='ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
          WebsiteRedirectLocation='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          SSEKMSKeyId='string',
          RequestPayer='requester'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the object. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ .

      

    
    :type Body: bytes or seekable file-like object
    :param Body: 

      Object data.

      

    
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Bucket name to which the PUT operation was initiated. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type CacheControl: string
    :param CacheControl: 

      Can be used to specify caching behavior along the request/reply chain. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9>`__ .

      

    
    :type ContentDisposition: string
    :param ContentDisposition: 

      Specifies presentational information for the object. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1>`__ .

      

    
    :type ContentEncoding: string
    :param ContentEncoding: 

      Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11>`__ .

      

    
    :type ContentLanguage: string
    :param ContentLanguage: 

      The language the content is in.

      

    
    :type ContentLength: integer
    :param ContentLength: 

      Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13>`__ .

      

    
    :type ContentMD5: string
    :param ContentMD5: 

      The base64-encoded 128-bit MD5 digest of the message (without the headers) according to RFC 1864. This header can be used as a message integrity check to verify that the data is the same data that was originally sent. Although it is optional, we recommend using the Content-MD5 mechanism as an end-to-end integrity check. For more information about REST request authentication, see `REST Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html>`__ .

      

    
    :type ContentType: string
    :param ContentType: 

      A standard MIME type describing the format of the contents. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17>`__ .

      

    
    :type Expires: datetime
    :param Expires: 

      The date and time at which the object is no longer cacheable. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21>`__ .

      

    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to read the object data and its metadata.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the object ACL.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable object.

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      Object key for which the PUT operation was initiated.

      

    
    :type Metadata: dict
    :param Metadata: 

      A map of metadata to store with the object in S3.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type RetentionExpirationDate: datetime
    :param RetentionExpirationDate: Date on which it will be legal to delete or modify the object. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used.

    
    :type RetentionLegalHoldId: string
    :param RetentionLegalHoldId: A single legal hold to apply to the object. A legal hold is a character long string of max length 64. The object cannot be overwritten or deleted until all legal holds associated with the object are removed.

    
    :type RetentionPeriod: integer
    :param RetentionPeriod: Retention period to store on the object in seconds. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.

    
    :type ServerSideEncryption: string
    :param ServerSideEncryption: 

      The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

      

    
    :type StorageClass: string
    :param StorageClass: 

      If you don't specify, Standard is the default storage class. Amazon S3 supports other storage classes.

      

    
    :type WebsiteRedirectLocation: string
    :param WebsiteRedirectLocation: 

      If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. For information about object metadata, see `Object Key and Metadata <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html>`__ .

       

      In the following example, the request header sets the redirect to an object (anotherPage.html) in the same bucket:

       

       ``x-amz-website-redirect-location: /anotherPage.html``  

       

      In the following example, the request header sets the object redirect to another website:

       

       ``x-amz-website-redirect-location: http://www.example.com/``  

       

      For more information about website hosting in Amazon S3, see `Hosting Websites on Amazon S3 <https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html>`__ and `How to Configure Website Page Redirects <https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html>`__ . 

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type SSEKMSKeyId: string
    :param SSEKMSKeyId: Ignored by COS if present.

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Expiration': 'string',
            'ETag': 'string',
            'ServerSideEncryption': 'AES256',
            'VersionId': 'string',
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Expiration** *(string) --* 

          If the expiration is configured for the object (see  PutBucketLifecycleConfiguration ), the response includes this header. It includes the expiry-date and rule-id key-value pairs that provide information about object expiration. The value of the rule-id is URL encoded.

          
        

        - **ETag** *(string) --* 

          Entity tag for the uploaded object.

          
        

        - **ServerSideEncryption** *(string) --* 

          If you specified server-side encryption either with an AWS KMS customer master key (CMK) or Amazon S3-managed encryption key in your PUT request, the response includes this header. It confirms the encryption algorithm that Amazon S3 used to encrypt the object.

          
        

        - **VersionId** *(string) --* 

          Version of the object.

          
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* Not returned by COS.
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: put_object_acl(**kwargs)

    

    Uses the ``acl`` subresource to set the access control list (ACL) permissions for an object that already exists in a bucket. You must have ``WRITE_ACP`` permission to set the ACL of an object.

     

    Depending on your application needs, you can choose to set the ACL on an object using either the request body or the headers. For example, if you have an existing application that updates a bucket ACL using the request body, you can continue to use that approach.

     

     **Access Permissions**  

     

    You can set access permissions using one of the following methods:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. Amazon S3 supports a set of predefined ACLs, known as canned ACLs. Each canned ACL has a predefined set of grantees and permissions. Specify the canned ACL name as the value of ``x-amz-ac`` l. If you use this header, you cannot use other access control-specific headers in your request. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. When using these headers, you specify explicit access permissions and grantees (AWS accounts or Amazon S3 groups) who will receive the permission. If you use these ACL-specific headers, you cannot use ``x-amz-acl`` header to set a canned ACL. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . You specify each grantee as a type=value pair, where the type is one of the following: 

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants list objects permission to the two AWS accounts identified by their email addresses.

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

     

     **Grantee Values**  

     

    You can specify the person (grantee) to whom you're assigning access rights (using request elements) in the following ways:

     

     
    * By Email address:  ``<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="AmazonCustomerByEmail"><EmailAddress><>Grantees@email.com<></EmailAddress>lt;/Grantee>``   The grantee is resolved to the CanonicalUser and, in a response to a GET Object acl request, appears as the CanonicalUser. 
     
    * By the person's ID:  ``<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser"><ID><>ID<></ID><DisplayName><>GranteesEmail<></DisplayName> </Grantee>``   DisplayName is optional and ignored in the request. 
     
    * By URI:  ``<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Group"><URI><>http://acs.amazonaws.com/groups/global/AuthenticatedUsers<></URI></Grantee>``   
     

     

     **Versioning**  

     

    The ACL of an object is set at the object version level. By default, PUT sets the ACL of the current version of an object. To set the ACL of a different version, use the ``versionId`` subresource.

     

     **Related Resources**  

     

     
    *  CopyObject   
     
    *  GetObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutObjectAcl>`_    


    **Request Syntax** 
    ::

      response = client.put_object_acl(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read'|'aws-exec-read'|'bucket-owner-read'|'bucket-owner-full-control',
          AccessControlPolicy={
              'Grants': [
                  {
                      'Grantee': {
                          'DisplayName': 'string',
                          'EmailAddress': 'string',
                          'ID': 'string',
                          'Type': 'CanonicalUser'|'AmazonCustomerByEmail'|'Group',
                          'URI': 'string'
                      },
                      'Permission': 'FULL_CONTROL'|'WRITE'|'WRITE_ACP'|'READ'|'READ_ACP'
                  },
              ],
              'Owner': {
                  'DisplayName': 'string',
                  'ID': 'string'
              }
          },
          Bucket='string',
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWrite='string',
          GrantWriteACP='string',
          Key='string',
          RequestPayer='requester',
          VersionId='string'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the object. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ .

      

    
    :type AccessControlPolicy: dict
    :param AccessControlPolicy: 

      Contains the elements that set the ACL permissions for an object per grantee.

      

    
      - **Grants** *(list) --* 

        A list of grants.

        

      
        - *(dict) --* 

          Container for grant information.

          

        
          - **Grantee** *(dict) --* 

            The person being granted permissions.

            

          
            - **DisplayName** *(string) --* 

              Screen name of the grantee.

              

            
            - **EmailAddress** *(string) --* 

              Email address of the grantee.

              

            
            - **ID** *(string) --* 

              The canonical user ID of the grantee.

              

            
            - **Type** *(string) --* **[REQUIRED]** 

              Type of grantee

              

            
            - **URI** *(string) --* 

              URI of the grantee group.

              

            
          
          - **Permission** *(string) --* 

            Specifies the permission given to the grantee.

            

          
        
    
      - **Owner** *(dict) --* 

        Container for the bucket owner's display name and ID.

        

      
        - **DisplayName** *(string) --* 

          Container for the display name of the owner.

          

        
        - **ID** *(string) --* 

          Container for the ID of the owner.

          

        
      
    
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name that contains the object to which you want to attach the ACL. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to list the objects in the bucket.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the bucket ACL.

      

    
    :type GrantWrite: string
    :param GrantWrite: 

      Allows grantee to create, overwrite, and delete any object in the bucket.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable bucket.

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      Key for which the PUT operation was initiated.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: restore_object(**kwargs)

    

    Restores an archived copy of an object back into Amazon S3

     

    This operation performs the following types of requests: 

     

     
    * ``select`` - Perform a select query on an archived object 
     
    * ``restore an archive`` - Restore an archived object 
     

     

    To use this operation, you must have permissions to perform the ``s3:RestoreObject`` and ``s3:GetObject`` actions. The bucket owner has this permission by default and can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

     **Querying Archives with Select Requests**  

     

    You use a select type of request to perform SQL queries on archived objects. The archived objects that are being queried by the select request must be formatted as uncompressed comma-separated values (CSV) files. You can run queries and custom analytics on your archived data without having to restore your data to a hotter Amazon S3 tier. For an overview about select requests, see `Querying Archived Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/querying-glacier-archives.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    When making a select request, do the following:

     

     
    * Define an output location for the select query's output. This must be an Amazon S3 bucket in the same AWS Region as the bucket that contains the archive object that is being queried. The AWS account that initiates the job must have permissions to write to the S3 bucket. You can specify the storage class and encryption for the output objects stored in the bucket. For more information about output, see `Querying Archived Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/querying-glacier-archives.html>`__ in the *Amazon Simple Storage Service Developer Guide* . For more information about the ``S3`` structure in the request body, see the following: 

       
      *  PutObject   
       
      * `Managing Access with ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ in the *Amazon Simple Storage Service Developer Guide*   
       
      * `Protecting Data Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html>`__ in the *Amazon Simple Storage Service Developer Guide*   
       

     
     
    * Define the SQL expression for the ``SELECT`` type of restoration for your query in the request body's ``SelectParameters`` structure. You can use expressions like the following examples. 

       
      * The following expression returns all records from the specified object.  ``SELECT * FROM Object``   
       
      * Assuming that you are not using any headers for data stored in the object, you can specify columns with positional headers.  ``SELECT s._1, s._2 FROM Object s WHERE s._3 > 100``   
       
      * If you have headers and you set the ``fileHeaderInfo`` in the ``CSV`` structure in the request body to ``USE`` , you can specify headers in the query. (If you set the ``fileHeaderInfo`` field to ``IGNORE`` , the first row is skipped for the query.) You cannot mix ordinal positions with header column names.   ``SELECT s.Id, s.FirstName, s.SSN FROM S3Object s``   
       

     
     

     

    For more information about using SQL with Glacier Select restore, see `SQL Reference for Amazon S3 Select and Glacier Select <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-glacier-select-sql-reference.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 

     

    When making a select request, you can also do the following:

     

     
    * To expedite your queries, specify the ``Expedited`` tier. For more information about tiers, see "Restoring Archives," later in this topic. 
     
    * Specify details about the data serialization format of both the input object that is being queried and the serialization of the CSV-encoded query results. 
     

     

    The following are additional important facts about the select feature:

     

     
    * The output results are new Amazon S3 objects. Unlike archive retrievals, they are stored until explicitly deleted-manually or through a lifecycle policy. 
     
    * You can issue more than one select request on the same Amazon S3 object. Amazon S3 doesn't deduplicate requests, so avoid issuing duplicate requests. 
     
    * Amazon S3 accepts a select request even if the object has already been restored. A select request doesn’t return error response ``409`` . 
     

     

     **Restoring Archives**  

     

    Objects in the GLACIER and DEEP_ARCHIVE storage classes are archived. To access an archived object, you must first initiate a restore request. This restores a temporary copy of the archived object. In a restore request, you specify the number of days that you want the restored copy to exist. After the specified period, Amazon S3 deletes the temporary copy but the object remains archived in the GLACIER or DEEP_ARCHIVE storage class that object was restored from. 

     

    To restore a specific object version, you can provide a version ID. If you don't provide a version ID, Amazon S3 restores the current version.

     

    The time it takes restore jobs to finish depends on which storage class the object is being restored from and which data access tier you specify. 

     

    When restoring an archived object (or using a select request), you can specify one of the following data access tier options in the ``Tier`` element of the request body: 

     

     
    * **``Expedited`` ** - Expedited retrievals allow you to quickly access your data stored in the GLACIER storage class when occasional urgent requests for a subset of archives are required. For all but the largest archived objects (250 MB+), data accessed using Expedited retrievals are typically made available within 1–5 minutes. Provisioned capacity ensures that retrieval capacity for Expedited retrievals is available when you need it. Expedited retrievals and provisioned capacity are not available for the DEEP_ARCHIVE storage class. 
     
    * **``Standard`` ** - Standard retrievals allow you to access any of your archived objects within several hours. This is the default option for the GLACIER and DEEP_ARCHIVE retrieval requests that do not specify the retrieval option. Standard retrievals typically complete within 3-5 hours from the GLACIER storage class and typically complete within 12 hours from the DEEP_ARCHIVE storage class.  
     
    * **``Bulk`` ** - Bulk retrievals are Amazon S3 Glacier’s lowest-cost retrieval option, enabling you to retrieve large amounts, even petabytes, of data inexpensively in a day. Bulk retrievals typically complete within 5-12 hours from the GLACIER storage class and typically complete within 48 hours from the DEEP_ARCHIVE storage class. 
     

     

    For more information about archive retrieval options and provisioned capacity for ``Expedited`` data access, see `Restoring Archived Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 

     

    You can use Amazon S3 restore speed upgrade to change the restore speed to a faster speed while it is in progress. You upgrade the speed of an in-progress restoration by issuing another restore request to the same object, setting a new ``Tier`` request element. When issuing a request to upgrade the restore tier, you must choose a tier that is faster than the tier that the in-progress restore is using. You must not change any other parameters, such as the ``Days`` request element. For more information, see `Upgrading the Speed of an In-Progress Restore <https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html#restoring-objects-upgrade-tier.title.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 

     

    To get the status of object restoration, you can send a ``HEAD`` request. Operations return the ``x-amz-restore`` header, which provides information about the restoration status, in the response. You can use Amazon S3 event notifications to notify you when a restore is initiated or completed. For more information, see `Configuring Amazon S3 Event Notifications <https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    After restoring an archived object, you can update the restoration period by reissuing the request with a new period. Amazon S3 updates the restoration period relative to the current time and charges only for the request-there are no data transfer charges. You cannot update the restoration period when Amazon S3 is actively processing your current restore request for the object.

     

    If your bucket has a lifecycle configuration with a rule that includes an expiration action, the object expiration overrides the life span that you specify in a restore request. For example, if you restore an object copy for 10 days, but the object is scheduled to expire in 3 days, Amazon S3 deletes the object in 3 days. For more information about lifecycle configuration, see  PutBucketLifecycleConfiguration and `Object Lifecycle Management <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html>`__ in *Amazon Simple Storage Service Developer Guide* .

     

     **Responses**  

     

    A successful operation returns either the ``200 OK`` or ``202 Accepted`` status code. 

     

     
    * If the object copy is not previously restored, then Amazon S3 returns ``202 Accepted`` in the response.  
     
    * If the object copy is previously restored, Amazon S3 returns ``200 OK`` in the response.  
     

     

     **Special Errors**  

     

     
    * 

      
      * *Code: RestoreAlreadyInProgress*   
       
      * *Cause: Object restore is already in progress. (This error does not apply to SELECT type requests.)*   
       
      * *HTTP Status Code: 409 Conflict*   
       
      * *SOAP Fault Code Prefix: Client*   
       

     
     
    * 

      
      * *Code: GlacierExpeditedRetrievalNotAvailable*   
       
      * *Cause: Glacier expedited retrievals are currently not available. Try again later. (Returned if there is insufficient capacity to process the Expedited request. This error applies only to Expedited retrievals and not to Standard or Bulk retrievals.)*   
       
      * *HTTP Status Code: 503*   
       
      * *SOAP Fault Code Prefix: N/A*   
       

     
     

     

     **Related Resources**  

     

     
    *  PutBucketLifecycleConfiguration   
     
    *  GetBucketNotificationConfiguration   
     
    * `SQL Reference for Amazon S3 Select and Glacier Select <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-glacier-select-sql-reference.html>`__ in the *Amazon Simple Storage Service Developer Guide*   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/RestoreObject>`_    


    **Request Syntax** 
    ::

      response = client.restore_object(
          Bucket='string',
          Key='string',
          VersionId='string',
          RestoreRequest={
              'Days': 123,
              'GlacierJobParameters': {
                  'Tier': 'Accelerated'|'Standard'|'Bulk'|'Expedited'
              }
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name or containing the object to restore. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      Object key for which the operation was initiated.

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type RestoreRequest: dict
    :param RestoreRequest: 

    
      - **Days** *(integer) --* **[REQUIRED]** 

        Lifetime of the active copy in days. Do not use with restores that specify ``OutputLocation`` .

        

      
      - **GlacierJobParameters** *(dict) --* 

        Glacier related parameters pertaining to this job. Do not use with restores that specify ``OutputLocation`` .

        

      
        - **Tier** *(string) --* **[REQUIRED]** 

          Glacier retrieval tier at which the restore will be processed.

          

        
      
    
    
    :returns: None

  .. py:method:: upload_file(Filename, Bucket, Key, ExtraArgs=None, Callback=None, Config=None)

        
    Upload a file to an S3 object.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.resource('s3')
        s3.meta.client.upload_file('/tmp/hello.txt', 'mybucket', 'hello.txt')
    
    Similar behavior as S3Transfer's upload_file() method,
    except that parameters are capitalized. Detailed examples can be found at
    :ref:`S3Transfer's Usage <ref_s3transfer_usage>`.
    
    :type Filename: str
    :param Filename: The path to the file to upload.
    
    :type Bucket: str
    :param Bucket: The name of the bucket to upload to.
    
    :type Key: str
    :param Key: The name of the key to upload to.
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation.
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the upload.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        transfer.


  .. py:method:: upload_fileobj(Fileobj, Bucket, Key, ExtraArgs=None, Callback=None, Config=None)

        
    Upload a file-like object to S3.
    
    The file-like object must be in binary mode.
    
    This is a managed transfer which will perform a multipart upload in
    multiple threads if necessary.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.client('s3')
    
        with open('filename', 'rb') as data:
            s3.upload_fileobj(data, 'mybucket', 'mykey')
    
    :type Fileobj: a file-like object
    :param Fileobj: A file-like object to upload. At a minimum, it must
        implement the `read` method, and must return bytes.
    
    :type Bucket: str
    :param Bucket: The name of the bucket to upload to.
    
    :type Key: str
    :param Key: The name of the key to upload to.
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation.
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the upload.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        upload.


  .. py:method:: upload_part(**kwargs)

    

    Uploads a part in a multipart upload.

     

    .. note::

       

      In this operation, you provide part data in your request. However, you have an option to specify your existing Amazon S3 object as a data source for the part you are uploading. To upload a part from an existing object, you use the  UploadPartCopy operation. 

       

     

    You must initiate a multipart upload (see  CreateMultipartUpload ) before you can upload any part. In response to your initiate request, Amazon S3 returns an upload ID, a unique identifier, that you must include in your upload part request.

     

    Part numbers can be any number from 1 to 10,000, inclusive. A part number uniquely identifies a part and also defines its position within the object being created. If you upload a new part using the same part number that was used with a previous part, the previously uploaded part is overwritten. Each part must be at least 5 MB in size, except the last part. There is no size limit on the last part of your multipart upload.

     

    To ensure that data is not corrupted when traversing the network, specify the ``Content-MD5`` header in the upload part request. Amazon S3 checks the part data against the provided MD5 value. If they do not match, Amazon S3 returns an error. 

     

     **Note:** After you initiate multipart upload and upload one or more parts, you must either complete or abort multipart upload in order to stop getting charged for storage of the uploaded parts. Only after you either complete or abort multipart upload, Amazon S3 frees up the parts storage and stops charging you for the parts storage.

     

    For more information on multipart uploads, go to `Multipart Upload Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    For information on the permissions required to use the multipart upload API, go to `Multipart Upload API and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    You can optionally request server-side encryption where Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it for you when you access it. You have the option of providing your own encryption key, or you can use the AWS managed encryption keys. If you choose to provide your own encryption key, the request headers you provide in the request must match the headers you used in the request to initiate the upload by using  CreateMultipartUpload . For more information, go to `Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    Server-side encryption is supported by the S3 Multipart Upload actions. Unless you are using a customer-provided encryption key, you don't need to specify the encryption parameters in each UploadPart request. Instead, you only need to specify the server-side encryption parameters in the initial Initiate Multipart request. For more information, see  CreateMultipartUpload .

     

    If you requested server-side encryption using a customer-provided encryption key in your initiate multipart upload request, you must provide identical encryption information in each part upload using the following headers.

     

     
    * x-amz-server-side​-encryption​-customer-algorithm 
     
    * x-amz-server-side​-encryption​-customer-key 
     
    * x-amz-server-side​-encryption​-customer-key-MD5 
     

     

     **Special Errors**  

     

     
    * 

      
      * *Code: NoSuchUpload*   
       
      * *Cause: The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed.*   
       
      * *HTTP Status Code: 404 Not Found*   
       
      * *SOAP Fault Code Prefix: Client*   
       

     
     

     

     **Related Resources**  

     

     
    *  CreateMultipartUpload   
     
    *  CompleteMultipartUpload   
     
    *  AbortMultipartUpload   
     
    *  ListParts   
     
    *  ListMultipartUploads   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/UploadPart>`_    


    **Request Syntax** 
    ::

      response = client.upload_part(
          Body=b'bytes'|file,
          Bucket='string',
          ContentLength=123,
          ContentMD5='string',
          Key='string',
          PartNumber=123,
          UploadId='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester'
      )
    :type Body: bytes or seekable file-like object
    :param Body: 

      Object data.

      

    
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Name of the bucket to which the multipart upload was initiated.

      

    
    :type ContentLength: integer
    :param ContentLength: 

      Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.

      

    
    :type ContentMD5: string
    :param ContentMD5: 

      The base64-encoded 128-bit MD5 digest of the part data. This parameter is auto-populated when using the command from the CLI. This parameter is required if object lock parameters are specified.

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      Object key for which the multipart upload was initiated.

      

    
    :type PartNumber: integer
    :param PartNumber: **[REQUIRED]** 

      Part number of part being uploaded. This is a positive integer between 1 and 10,000.

      

    
    :type UploadId: string
    :param UploadId: **[REQUIRED]** 

      Upload ID identifying the multipart upload whose part is being uploaded.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm header`` . This must be the same encryption key specified in the initiate multipart upload request.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ServerSideEncryption': 'AES256',
            'ETag': 'string',
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ServerSideEncryption** *(string) --* 

          The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **ETag** *(string) --* 

          Entity tag for the uploaded object.

          
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* Not returned by COS.
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: upload_part_copy(**kwargs)

    

    Uploads a part by copying data from an existing object as data source. You specify the data source by adding the request header ``x-amz-copy-source`` in your request and a byte range by adding the request header ``x-amz-copy-source-range`` in your request. 

     

    The minimum allowable part size for a multipart upload is 5 MB. For more information about multipart upload limits, go to `Quick Facts <https://docs.aws.amazon.com/AmazonS3/latest/dev/qfacts.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 

     

    .. note::

       

      Instead of using an existing object as part data, you might use the  UploadPart operation and provide data in your request.

       

     

    You must initiate a multipart upload before you can upload any part. In response to your initiate request. Amazon S3 returns a unique identifier, the upload ID, that you must include in your upload part request.

     

    For more information about using the ``UploadPartCopy`` operation, see the following:

     

     
    * For conceptual information about multipart uploads, see `Uploading Objects Using Multipart Upload <https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 
     
    * For information about permissions required to use the multipart upload API, see `Multipart Upload API and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 
     
    * For information about copying objects using a single atomic operation vs. the multipart upload, see `Operations on Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectOperations.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 
     
    * For information about using server-side encryption with customer-provided encryption keys with the UploadPartCopy operation, see  CopyObject and  UploadPart . 
     

     

    Note the following additional considerations about the request headers ``x-amz-copy-source-if-match`` , ``x-amz-copy-source-if-none-match`` , ``x-amz-copy-source-if-unmodified-since`` , and ``x-amz-copy-source-if-modified-since`` :

     

     

     

     
    * **Consideration 1** - If both of the ``x-amz-copy-source-if-match`` and ``x-amz-copy-source-if-unmodified-since`` headers are present in the request as follows:  ``x-amz-copy-source-if-match`` condition evaluates to ``true`` , and;  ``x-amz-copy-source-if-unmodified-since`` condition evaluates to ``false`` ; Amazon S3 returns ``200 OK`` and copies the data.  
     
    * **Consideration 2** - If both of the ``x-amz-copy-source-if-none-match`` and ``x-amz-copy-source-if-modified-since`` headers are present in the request as follows:  ``x-amz-copy-source-if-none-match`` condition evaluates to ``false`` , and;  ``x-amz-copy-source-if-modified-since`` condition evaluates to ``true`` ; Amazon S3 returns ``412 Precondition Failed`` response code.  
     

     

     **Versioning**  

     

    If your bucket has versioning enabled, you could have multiple versions of the same object. By default, ``x-amz-copy-source`` identifies the current version of the object to copy. If the current version is a delete marker and you don't specify a versionId in the ``x-amz-copy-source`` , Amazon S3 returns a 404 error, because the object does not exist. If you specify versionId in the ``x-amz-copy-source`` and the versionId is a delete marker, Amazon S3 returns an HTTP 400 error, because you are not allowed to specify a delete marker as a version for the ``x-amz-copy-source`` . 

     

    You can optionally specify a specific version of the source object to copy by adding the ``versionId`` subresource as shown in the following example:

     

     ``x-amz-copy-source: /bucket/object?versionId=version id``  

     

     **Special Errors**  

     

     
    * 

      
      * *Code: NoSuchUpload*   
       
      * *Cause: The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed.*   
       
      * *HTTP Status Code: 404 Not Found*   
       

     
     
    * 

      
      * *Code: InvalidRequest*   
       
      * *Cause: The specified copy source is not supported as a byte-range copy source.*   
       
      * *HTTP Status Code: 400 Bad Request*   
       

     
     

     

     **Related Resources**  

     

     
    *  CreateMultipartUpload   
     
    *  UploadPart   
     
    *  CompleteMultipartUpload   
     
    *  AbortMultipartUpload   
     
    *  ListParts   
     
    *  ListMultipartUploads   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/UploadPartCopy>`_    


    **Request Syntax** 
    ::

      response = client.upload_part_copy(
          Bucket='string',
          CopySource='string' or {'Bucket': 'string', 'Key': 'string', 'VersionId': 'string'},
          CopySourceIfMatch='string',
          CopySourceIfModifiedSince=datetime(2015, 1, 1),
          CopySourceIfNoneMatch='string',
          CopySourceIfUnmodifiedSince=datetime(2015, 1, 1),
          CopySourceRange='string',
          Key='string',
          PartNumber=123,
          UploadId='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          CopySourceSSECustomerAlgorithm='string',
          CopySourceSSECustomerKey='string',
          RequestPayer='requester'
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name.

      

    
    :type CopySource: str or dict
    :param CopySource: **[REQUIRED]** The name of the source bucket, key name of the source object, and optional version ID of the source object.  You can either provide this value as a string or a dictionary.  The string form is {bucket}/{key} or {bucket}/{key}?versionId={versionId} if you want to copy a specific version.  You can also provide this value as a dictionary.  The dictionary format is recommended over the string format because it is more explicit.  The dictionary format is: {'Bucket': 'bucket', 'Key': 'key', 'VersionId': 'id'}.  Note that the VersionId key is optional and may be omitted.

    
    :type CopySourceIfMatch: string
    :param CopySourceIfMatch: 

      Copies the object if its entity tag (ETag) matches the specified tag.

      

    
    :type CopySourceIfModifiedSince: datetime
    :param CopySourceIfModifiedSince: 

      Copies the object if it has been modified since the specified time.

      

    
    :type CopySourceIfNoneMatch: string
    :param CopySourceIfNoneMatch: 

      Copies the object if its entity tag (ETag) is different than the specified ETag.

      

    
    :type CopySourceIfUnmodifiedSince: datetime
    :param CopySourceIfUnmodifiedSince: 

      Copies the object if it hasn't been modified since the specified time.

      

    
    :type CopySourceRange: string
    :param CopySourceRange: 

      The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You can copy a range only if the source object is greater than 5 MB.

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      Object key for which the multipart upload was initiated.

      

    
    :type PartNumber: integer
    :param PartNumber: **[REQUIRED]** 

      Part number of part being copied. This is a positive integer between 1 and 10,000.

      

    
    :type UploadId: string
    :param UploadId: **[REQUIRED]** 

      Upload ID identifying the multipart upload whose part is being copied.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header. This must be the same encryption key specified in the initiate multipart upload request.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type CopySourceSSECustomerAlgorithm: string
    :param CopySourceSSECustomerAlgorithm: 

      Specifies the algorithm to use when decrypting the source object (for example, AES256).

      

    
    :type CopySourceSSECustomerKey: string
    :param CopySourceSSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.

      

    
    :type CopySourceSSECustomerKeyMD5: string
    :param CopySourceSSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CopySourceVersionId': 'string',
            'CopyPartResult': {
                'ETag': 'string',
                'LastModified': datetime(2015, 1, 1)
            },
            'ServerSideEncryption': 'AES256',
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CopySourceVersionId** *(string) --* 

          The version of the source object that was copied, if you have enabled versioning on the source bucket.

          
        

        - **CopyPartResult** *(dict) --* 

          Container for all response elements.

          
          

          - **ETag** *(string) --* 

            Entity tag of the object.

            
          

          - **LastModified** *(datetime) --* 

            Date and time at which the object was uploaded.

            
      
        

        - **ServerSideEncryption** *(string) --* 

          The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* Not returned by COS.
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

==========
Paginators
==========


The available paginators are:

* :py:class:`S3.Paginator.ListBucketsExtended`


* :py:class:`S3.Paginator.ListMultipartUploads`


* :py:class:`S3.Paginator.ListObjects`


* :py:class:`S3.Paginator.ListObjectsV2`


* :py:class:`S3.Paginator.ListParts`



.. py:class:: S3.Paginator.ListBucketsExtended

  ::

    
    paginator = client.get_paginator('list_buckets_extended')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`S3.Client.list_buckets_extended`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListBucketsExtended>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          IBMServiceInstanceId='string',
          Prefix='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type IBMServiceInstanceId: string
    :param IBMServiceInstanceId: The owning storage account. All buckets owned by this storage account are returned.

    
    :type Prefix: string
    :param Prefix: Limits the response to keys that begin with the specified prefix.

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IsTruncated': True|False,
            'NextMarker': 'string',
            'Buckets': [
                {
                    'Name': 'string',
                    'CreationDate': datetime(2015, 1, 1),
                    'LocationConstraint': 'us-standard'|'us-vault'|'us-cold'|'us-flex'|'us-east-standard'|'us-east-vault'|'us-east-cold'|'us-east-flex'|'us-south-standard'|'us-south-vault'|'us-south-cold'|'us-south-flex'|'eu-standard'|'eu-vault'|'eu-cold'|'eu-flex'|'eu-gb-standard'|'eu-gb-vault'|'eu-gb-cold'|'eu-gb-flex'|'eu-de-standard'|'eu-de-vault'|'eu-de-cold'|'eu-de-flex'|'ap-standard'|'ap-vault'|'ap-cold'|'ap-flex'|'ams03-standard'|'ams03-vault'|'ams03-cold'|'ams03-flex'|'che01-standard'|'che01-vault'|'che01-cold'|'che01-flex'|'mel01-standard'|'mel01-vault'|'mel01-cold'|'mel01-flex'|'osl01-standard'|'osl01-vault'|'osl01-cold'|'osl01-flex'|'sao01-standard'|'sao01-vault'|'sao01-cold'|'sao01-flex'|'tor01-standard'|'tor01-vault'|'tor01-cold'|'tor01-flex'
                },
            ],
            'Owner': {
                'DisplayName': 'string',
                'ID': 'string'
            },
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IsTruncated** *(boolean) --* 
        

        - **NextMarker** *(string) --* 
        

        - **Buckets** *(list) --* 
          

          - *(dict) --* 

            In terms of implementation, a Bucket is a resource. An Amazon S3 bucket name is globally unique, and the namespace is shared by all AWS accounts. 

            
            

            - **Name** *(string) --* 

              The name of the bucket.

              
            

            - **CreationDate** *(datetime) --* Date the bucket was created.
            

            - **LocationConstraint** *(string) --* Specifies the region where the bucket will be created. If you don't specify a region, the bucket will be created in US Standard.
        
      
        

        - **Owner** *(dict) --* 

          Container for the owner's display name and ID.

          
          

          - **DisplayName** *(string) --* 

            Container for the display name of the owner.

            
          

          - **ID** *(string) --* 

            Container for the ID of the owner.

            
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: S3.Paginator.ListMultipartUploads

  ::

    
    paginator = client.get_paginator('list_multipart_uploads')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`S3.Client.list_multipart_uploads`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListMultipartUploads>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Bucket='string',
          Delimiter='string',
          EncodingType='url',
          MirrorDestination='string',
          Prefix='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Name of the bucket to which the multipart upload was initiated. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type Delimiter: string
    :param Delimiter: 

      Character you use to group keys.

       

      All keys that contain the same string between the prefix, if specified, and the first occurrence of the delimiter after the prefix are grouped under a single result element, ``CommonPrefixes`` . If you don't specify the prefix parameter, then the substring starts at the beginning of the key. The keys that are grouped under ``CommonPrefixes`` result element are not returned elsewhere in the response.

      

    
    :type EncodingType: string
    :param EncodingType: 

      Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Prefix: string
    :param Prefix: 

      Lists in-progress uploads only for those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different grouping of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.)

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Bucket': 'string',
            'KeyMarker': 'string',
            'UploadIdMarker': 'string',
            'Prefix': 'string',
            'Delimiter': 'string',
            'MaxUploads': 123,
            'IsTruncated': True|False,
            'Uploads': [
                {
                    'UploadId': 'string',
                    'Key': 'string',
                    'Initiated': datetime(2015, 1, 1),
                    'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
                    'Owner': {
                        'DisplayName': 'string',
                        'ID': 'string'
                    },
                    'Initiator': {
                        'ID': 'string',
                        'DisplayName': 'string'
                    }
                },
            ],
            'CommonPrefixes': [
                {
                    'Prefix': 'string'
                },
            ],
            'EncodingType': 'url',
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Bucket** *(string) --* 

          Name of the bucket to which the multipart upload was initiated.

          
        

        - **KeyMarker** *(string) --* 

          The key at or after which the listing began.

          
        

        - **UploadIdMarker** *(string) --* 

          Upload ID after which listing began.

          
        

        - **Prefix** *(string) --* 

          When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix.

          
        

        - **Delimiter** *(string) --* 

          Contains the delimiter you specified in the request. If you don't specify a delimiter in your request, this element is absent from the response.

          
        

        - **MaxUploads** *(integer) --* 

          Maximum number of multipart uploads that could have been included in the response.

          
        

        - **IsTruncated** *(boolean) --* 

          Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads.

          
        

        - **Uploads** *(list) --* 

          Container for elements related to a particular multipart upload. A response can contain zero or more ``Upload`` elements.

          
          

          - *(dict) --* 

            Container for the ``MultipartUpload`` for the Amazon S3 object.

            
            

            - **UploadId** *(string) --* 

              Upload ID that identifies the multipart upload.

              
            

            - **Key** *(string) --* 

              Key of the object for which the multipart upload was initiated.

              
            

            - **Initiated** *(datetime) --* 

              Date and time at which the multipart upload was initiated.

              
            

            - **StorageClass** *(string) --* 

              The class of storage used to store the object.

              
            

            - **Owner** *(dict) --* 

              Specifies the owner of the object that is part of the multipart upload. 

              
              

              - **DisplayName** *(string) --* 

                Container for the display name of the owner.

                
              

              - **ID** *(string) --* 

                Container for the ID of the owner.

                
          
            

            - **Initiator** *(dict) --* 

              Identifies who initiated the multipart upload.

              
              

              - **ID** *(string) --* 

                If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value.

                
              

              - **DisplayName** *(string) --* 

                Name of the Principal.

                
          
        
      
        

        - **CommonPrefixes** *(list) --* 

          If you specify a delimiter in the request, then the result returns each distinct key prefix containing the delimiter in a ``CommonPrefixes`` element. The distinct key prefixes are returned in the ``Prefix`` child element.

          
          

          - *(dict) --* 

            Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. 

            
            

            - **Prefix** *(string) --* 

              Container for the specified common prefix.

              
        
      
        

        - **EncodingType** *(string) --* 

          Encoding type used by Amazon S3 to encode object keys in the response.

           

          If you specify ``encoding-type`` request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements:

           

           ``Delimiter`` , ``KeyMarker`` , ``Prefix`` , ``NextKeyMarker`` , ``Key`` .

          
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: S3.Paginator.ListObjects

  ::

    
    paginator = client.get_paginator('list_objects')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`S3.Client.list_objects`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjects>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Bucket='string',
          Delimiter='string',
          EncodingType='url',
          MirrorDestination='string',
          Prefix='string',
          RequestPayer='requester',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket containing the objects.

      

    
    :type Delimiter: string
    :param Delimiter: 

      A delimiter is a character you use to group keys.

      

    
    :type EncodingType: string
    :param EncodingType: 

      Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Prefix: string
    :param Prefix: 

      Limits the response to keys that begin with the specified prefix.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IsTruncated': True|False,
            'Marker': 'string',
            'NextMarker': 'string',
            'Contents': [
                {
                    'Key': 'string',
                    'LastModified': datetime(2015, 1, 1),
                    'ETag': 'string',
                    'Size': 123,
                    'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'GLACIER'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'DEEP_ARCHIVE',
                    'Owner': {
                        'DisplayName': 'string',
                        'ID': 'string'
                    }
                },
            ],
            'Name': 'string',
            'IBMSSEKPEnabled': True|False,
            'IBMSSEKPCrkId': 'string',
            'Prefix': 'string',
            'Delimiter': 'string',
            'MaxKeys': 123,
            'CommonPrefixes': [
                {
                    'Prefix': 'string'
                },
            ],
            'EncodingType': 'url',
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IsTruncated** *(boolean) --* 

          A flag that indicates whether Amazon S3 returned all of the results that satisfied the search criteria.

          
        

        - **Marker** *(string) --* 

          Indicates where in the bucket listing begins. Marker is included in the response if it was sent with the request.

          
        

        - **NextMarker** *(string) --* 

          When response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as marker in the subsequent request to get next set of objects. Amazon S3 lists objects in alphabetical order Note: This element is returned only if you have delimiter request parameter specified. If response does not include the NextMaker and it is truncated, you can use the value of the last Key in the response as the marker in the subsequent request to get the next set of object keys.

          
        

        - **Contents** *(list) --* 

          Metadata about each object returned.

          
          

          - *(dict) --* 

            An object consists of data and its descriptive metadata.

            
            

            - **Key** *(string) --* 

              The name that you assign to an object. You use the object key to retrieve the object.

              
            

            - **LastModified** *(datetime) --* 

              The date the Object was Last Modified

              
            

            - **ETag** *(string) --* 

              The entity tag is an MD5 hash of the object. ETag reflects only changes to the contents of an object, not its metadata.

              
            

            - **Size** *(integer) --* 

              Size in bytes of the object

              
            

            - **StorageClass** *(string) --* 

              The class of storage used to store the object.

              
            

            - **Owner** *(dict) --* 

              The owner of the object

              
              

              - **DisplayName** *(string) --* 

                Container for the display name of the owner.

                
              

              - **ID** *(string) --* 

                Container for the ID of the owner.

                
          
        
      
        

        - **Name** *(string) --* 

          Bucket name.

          
        

        - **IBMSSEKPEnabled** *(boolean) --* The bucket encryption enabled or not.
        

        - **IBMSSEKPCrkId** *(string) --* CRK ID of the Bucket encryption
        

        - **Prefix** *(string) --* 

          Keys that begin with the indicated prefix.

          
        

        - **Delimiter** *(string) --* 

          Causes keys that contain the same string between the prefix and the first occurrence of the delimiter to be rolled up into a single result element in the ``CommonPrefixes`` collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up result counts as only one return against the ``MaxKeys`` value.

          
        

        - **MaxKeys** *(integer) --* 

          The maximum number of keys returned in the response body.

          
        

        - **CommonPrefixes** *(list) --* 

          All of the keys rolled up in a common prefix count as a single return when calculating the number of returns. 

           

          A response can contain CommonPrefixes only if you specify a delimiter.

           

          CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by the delimiter.

           

          CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix.

           

          For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. All of the keys that roll up into a common prefix count as a single return when calculating the number of returns.

          
          

          - *(dict) --* 

            Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. 

            
            

            - **Prefix** *(string) --* 

              Container for the specified common prefix.

              
        
      
        

        - **EncodingType** *(string) --* 

          Encoding type used by Amazon S3 to encode object keys in the response.

          
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: S3.Paginator.ListObjectsV2

  ::

    
    paginator = client.get_paginator('list_objects_v2')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`S3.Client.list_objects_v2`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjectsV2>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Bucket='string',
          Delimiter='string',
          EncodingType='url',
          Prefix='string',
          FetchOwner=True|False,
          StartAfter='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Bucket name to list. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type Delimiter: string
    :param Delimiter: 

      A delimiter is a character you use to group keys.

      

    
    :type EncodingType: string
    :param EncodingType: 

      Encoding type used by Amazon S3 to encode object keys in the response.

      

    
    :type Prefix: string
    :param Prefix: 

      Limits the response to keys that begin with the specified prefix.

      

    
    :type FetchOwner: boolean
    :param FetchOwner: 

      The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true.

      

    
    :type StartAfter: string
    :param StartAfter: 

      StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IsTruncated': True|False,
            'Contents': [
                {
                    'Key': 'string',
                    'LastModified': datetime(2015, 1, 1),
                    'ETag': 'string',
                    'Size': 123,
                    'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'GLACIER'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'DEEP_ARCHIVE',
                    'Owner': {
                        'DisplayName': 'string',
                        'ID': 'string'
                    }
                },
            ],
            'Name': 'string',
            'Prefix': 'string',
            'Delimiter': 'string',
            'MaxKeys': 123,
            'CommonPrefixes': [
                {
                    'Prefix': 'string'
                },
            ],
            'EncodingType': 'url',
            'KeyCount': 123,
            'ContinuationToken': 'string',
            'StartAfter': 'string',
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IsTruncated** *(boolean) --* 

          Set to false if all of the results were returned. Set to true if more keys are available to return. If the number of results exceeds that specified by MaxKeys, all of the results might not be returned.

          
        

        - **Contents** *(list) --* 

          Metadata about each object returned.

          
          

          - *(dict) --* 

            An object consists of data and its descriptive metadata.

            
            

            - **Key** *(string) --* 

              The name that you assign to an object. You use the object key to retrieve the object.

              
            

            - **LastModified** *(datetime) --* 

              The date the Object was Last Modified

              
            

            - **ETag** *(string) --* 

              The entity tag is an MD5 hash of the object. ETag reflects only changes to the contents of an object, not its metadata.

              
            

            - **Size** *(integer) --* 

              Size in bytes of the object

              
            

            - **StorageClass** *(string) --* 

              The class of storage used to store the object.

              
            

            - **Owner** *(dict) --* 

              The owner of the object

              
              

              - **DisplayName** *(string) --* 

                Container for the display name of the owner.

                
              

              - **ID** *(string) --* 

                Container for the ID of the owner.

                
          
        
      
        

        - **Name** *(string) --* 

          Bucket name. 

           

          When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

          
        

        - **Prefix** *(string) --* 

          Keys that begin with the indicated prefix.

          
        

        - **Delimiter** *(string) --* 

          Causes keys that contain the same string between the prefix and the first occurrence of the delimiter to be rolled up into a single result element in the CommonPrefixes collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up result counts as only one return against the ``MaxKeys`` value.

          
        

        - **MaxKeys** *(integer) --* 

          Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.

          
        

        - **CommonPrefixes** *(list) --* 

          All of the keys rolled up into a common prefix count as a single return when calculating the number of returns.

           

          A response can contain ``CommonPrefixes`` only if you specify a delimiter.

           

           ``CommonPrefixes`` contains all (if there are any) keys between ``Prefix`` and the next occurrence of the string specified by a delimiter.

           

           ``CommonPrefixes`` lists keys that act like subdirectories in the directory specified by ``Prefix`` .

           

          For example, if the prefix is ``notes/`` and the delimiter is a slash (``/`` ) as in ``notes/summer/july`` , the common prefix is ``notes/summer/`` . All of the keys that roll up into a common prefix count as a single return when calculating the number of returns. 

          
          

          - *(dict) --* 

            Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. 

            
            

            - **Prefix** *(string) --* 

              Container for the specified common prefix.

              
        
      
        

        - **EncodingType** *(string) --* 

          Encoding type used by Amazon S3 to encode object key names in the XML response.

           

          If you specify the encoding-type request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements:

           

           ``Delimiter, Prefix, Key,`` and ``StartAfter`` .

          
        

        - **KeyCount** *(integer) --* 

          KeyCount is the number of keys returned with this request. KeyCount will always be less than equals to MaxKeys field. Say you ask for 50 keys, your result will include less than equals 50 keys 

          
        

        - **ContinuationToken** *(string) --* 

          If ContinuationToken was sent with the request, it is included in the response.

          
        

        - **StartAfter** *(string) --* 

          If StartAfter was sent with the request, it is included in the response.

          
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: S3.Paginator.ListParts

  ::

    
    paginator = client.get_paginator('list_parts')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`S3.Client.list_parts`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListParts>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Bucket='string',
          Key='string',
          MirrorDestination='string',
          UploadId='string',
          RequestPayer='requester',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Name of the bucket to which the parts are being uploaded. 

       

      When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName* -*AccountId* .s3-accesspoint.*Region* .amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using Access Points <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      Object key for which the multipart upload was initiated.

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type UploadId: string
    :param UploadId: **[REQUIRED]** 

      Upload ID identifying the multipart upload whose parts are being listed.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AbortDate': datetime(2015, 1, 1),
            'AbortRuleId': 'string',
            'Bucket': 'string',
            'Key': 'string',
            'UploadId': 'string',
            'PartNumberMarker': 123,
            'MaxParts': 123,
            'IsTruncated': True|False,
            'Parts': [
                {
                    'PartNumber': 123,
                    'LastModified': datetime(2015, 1, 1),
                    'ETag': 'string',
                    'Size': 123
                },
            ],
            'Initiator': {
                'ID': 'string',
                'DisplayName': 'string'
            },
            'Owner': {
                'DisplayName': 'string',
                'ID': 'string'
            },
            'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'RequestCharged': 'requester',
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **AbortDate** *(datetime) --* 

          If the bucket has a lifecycle rule configured with an action to abort incomplete multipart uploads and the prefix in the lifecycle rule matches the object name in the request, then the response includes this header indicating when the initiated multipart upload will become eligible for abort operation. For more information, see `Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config>`__ .

           

          The response will also include the ``x-amz-abort-rule-id`` header that will provide the ID of the lifecycle configuration rule that defines this action.

          
        

        - **AbortRuleId** *(string) --* 

          This header is returned along with the ``x-amz-abort-date`` header. It identifies applicable lifecycle configuration rule that defines the action to abort incomplete multipart uploads.

          
        

        - **Bucket** *(string) --* 

          Name of the bucket to which the multipart upload was initiated.

          
        

        - **Key** *(string) --* 

          Object key for which the multipart upload was initiated.

          
        

        - **UploadId** *(string) --* 

          Upload ID identifying the multipart upload whose parts are being listed.

          
        

        - **PartNumberMarker** *(integer) --* 

          When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.

          
        

        - **MaxParts** *(integer) --* 

          Maximum number of parts that were allowed in the response.

          
        

        - **IsTruncated** *(boolean) --* 

          Indicates whether the returned list of parts is truncated. A true value indicates that the list was truncated. A list can be truncated if the number of parts exceeds the limit returned in the MaxParts element.

          
        

        - **Parts** *(list) --* 

          Container for elements related to a particular part. A response can contain zero or more ``Part`` elements.

          
          

          - *(dict) --* 

            Container for elements related to a part.

            
            

            - **PartNumber** *(integer) --* 

              Part number identifying the part. This is a positive integer between 1 and 10,000.

              
            

            - **LastModified** *(datetime) --* 

              Date and time at which the part was uploaded.

              
            

            - **ETag** *(string) --* 

              Entity tag returned when the part was uploaded.

              
            

            - **Size** *(integer) --* 

              Size in bytes of the uploaded part data.

              
        
      
        

        - **Initiator** *(dict) --* 

          Container element that identifies who initiated the multipart upload. If the initiator is an AWS account, this element provides the same information as the ``Owner`` element. If the initiator is an IAM User, this element provides the user ARN and display name.

          
          

          - **ID** *(string) --* 

            If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value.

            
          

          - **DisplayName** *(string) --* 

            Name of the Principal.

            
      
        

        - **Owner** *(dict) --* 

          Container element that identifies the object owner, after the object is created. If multipart upload is initiated by an IAM user, this element provides the parent account ID and display name.

          
          

          - **DisplayName** *(string) --* 

            Container for the display name of the owner.

            
          

          - **ID** *(string) --* 

            Container for the ID of the owner.

            
      
        

        - **StorageClass** *(string) --* 

          Class of storage (STANDARD or REDUCED_REDUNDANCY) used to store the uploaded object.

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

=======
Waiters
=======


The available waiters are:

* :py:class:`S3.Waiter.BucketExists`


* :py:class:`S3.Waiter.BucketNotExists`


* :py:class:`S3.Waiter.ObjectExists`


* :py:class:`S3.Waiter.ObjectNotExists`



.. py:class:: S3.Waiter.BucketExists

  ::

    
    waiter = client.get_waiter('bucket_exists')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`S3.Client.head_bucket` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadBucket>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          Bucket='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name.

      

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None

.. py:class:: S3.Waiter.BucketNotExists

  ::

    
    waiter = client.get_waiter('bucket_not_exists')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`S3.Client.head_bucket` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadBucket>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          Bucket='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The bucket name.

      

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None

.. py:class:: S3.Waiter.ObjectExists

  ::

    
    waiter = client.get_waiter('object_exists')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`S3.Client.head_object` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadObject>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          Bucket='string',
          IfMatch='string',
          IfModifiedSince=datetime(2015, 1, 1),
          IfNoneMatch='string',
          IfUnmodifiedSince=datetime(2015, 1, 1),
          Key='string',
          MirrorDestination='string',
          Range='string',
          VersionId='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester',
          PartNumber=123,
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket containing the object.

      

    
    :type IfMatch: string
    :param IfMatch: 

      Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).

      

    
    :type IfModifiedSince: datetime
    :param IfModifiedSince: 

      Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).

      

    
    :type IfNoneMatch: string
    :param IfNoneMatch: 

      Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).

      

    
    :type IfUnmodifiedSince: datetime
    :param IfUnmodifiedSince: 

      Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      The object key.

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Range: string
    :param Range: 

      Downloads the specified range bytes of an object. For more information about the HTTP Range header, see `http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35 .

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PartNumber: integer
    :param PartNumber: 

      Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.

      

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None

.. py:class:: S3.Waiter.ObjectNotExists

  ::

    
    waiter = client.get_waiter('object_not_exists')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`S3.Client.head_object` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadObject>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          Bucket='string',
          IfMatch='string',
          IfModifiedSince=datetime(2015, 1, 1),
          IfNoneMatch='string',
          IfUnmodifiedSince=datetime(2015, 1, 1),
          Key='string',
          MirrorDestination='string',
          Range='string',
          VersionId='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester',
          PartNumber=123,
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket containing the object.

      

    
    :type IfMatch: string
    :param IfMatch: 

      Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).

      

    
    :type IfModifiedSince: datetime
    :param IfModifiedSince: 

      Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).

      

    
    :type IfNoneMatch: string
    :param IfNoneMatch: 

      Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).

      

    
    :type IfUnmodifiedSince: datetime
    :param IfUnmodifiedSince: 

      Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      The object key.

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Range: string
    :param Range: 

      Downloads the specified range bytes of an object. For more information about the HTTP Range header, see `http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35 .

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PartNumber: integer
    :param PartNumber: 

      Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.

      

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None

================
Service Resource
================



.. py:class:: S3.ServiceResource()

  A resource representing Amazon Simple Storage Service (S3)::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')

  
  These are the resource's available actions:
  
  *   :py:meth:`create_bucket()`

  
  *   :py:meth:`get_available_subresources()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`Bucket()`

  
  *   :py:meth:`BucketAcl()`

  
  *   :py:meth:`BucketCors()`

  
  *   :py:meth:`BucketLifecycleConfiguration()`

  
  *   :py:meth:`BucketProtection()`

  
  *   :py:meth:`BucketTagging()`

  
  *   :py:meth:`BucketVersioning()`

  
  *   :py:meth:`BucketWebsite()`

  
  *   :py:meth:`MultipartUpload()`

  
  *   :py:meth:`MultipartUploadPart()`

  
  *   :py:meth:`Object()`

  
  *   :py:meth:`ObjectAcl()`

  
  *   :py:meth:`ObjectProtection()`

  
  *   :py:meth:`ObjectSummary()`

  
  *   :py:meth:`ObjectVersion()`

  
  These are the resource's available collections:
  
  *   :py:attr:`buckets`

  
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: create_bucket(**kwargs)

    

    Creates a new bucket. To create a bucket, you must register with Amazon S3 and have a valid AWS Access Key ID to authenticate requests. Anonymous requests are never allowed to create buckets. By creating the bucket, you become the bucket owner.

     

    Not every string is an acceptable bucket name. For information on bucket naming restrictions, see `Working with Amazon S3 Buckets <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html>`__ .

     

    By default, the bucket is created in the US East (N. Virginia) Region. You can optionally specify a Region in the request body. You might choose a Region to optimize latency, minimize costs, or address regulatory requirements. For example, if you reside in Europe, you will probably find it advantageous to create buckets in the EU (Ireland) Region. For more information, see `How to Select a Region for Your Buckets <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro>`__ .

     

    .. note::

       

      If you send your create bucket request to the ``s3.amazonaws.com`` endpoint, the request goes to the us-east-1 Region. Accordingly, the signature calculations in Signature Version 4 must use us-east-1 as the Region, even if the location constraint in the request specifies another Region where the bucket is to be created. If you create a bucket in a Region other than US East (N. Virginia), your application must be able to handle 307 redirect. For more information, see `Virtual Hosting of Buckets <https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html>`__ .

       

     

    When creating a bucket using this operation, you can optionally specify the accounts or groups that should be granted specific permissions on the bucket. There are two ways to grant the appropriate permissions using the request headers.

     

     
    * Specify a canned ACL using the ``x-amz-acl`` request header. Amazon S3 supports a set of predefined ACLs, known as *canned ACLs* . Each canned ACL has a predefined set of grantees and permissions. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly using the ``x-amz-grant-read`` , ``x-amz-grant-write`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. These headers map to the set of permissions Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . You specify each grantee as a type=value pair, where the type is one of the following: 

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants the AWS accounts identified by email addresses permissions to read object data and its metadata:

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

     

    .. note::

       

      You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

       

     

    The following operations are related to ``CreateBucket`` :

     

     
    *  PutObject   
     
    *  DeleteBucket   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/CreateBucket>`_    


    **Request Syntax** 
    ::

      bucket = s3.create_bucket(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read',
          Bucket='string',
          CreateBucketConfiguration={
              'LocationConstraint': 'us-standard'|'us-vault'|'us-cold'|'us-flex'|'us-east-standard'|'us-east-vault'|'us-east-cold'|'us-east-flex'|'us-south-standard'|'us-south-vault'|'us-south-cold'|'us-south-flex'|'eu-standard'|'eu-vault'|'eu-cold'|'eu-flex'|'eu-gb-standard'|'eu-gb-vault'|'eu-gb-cold'|'eu-gb-flex'|'eu-de-standard'|'eu-de-vault'|'eu-de-cold'|'eu-de-flex'|'ap-standard'|'ap-vault'|'ap-cold'|'ap-flex'|'ams03-standard'|'ams03-vault'|'ams03-cold'|'ams03-flex'|'che01-standard'|'che01-vault'|'che01-cold'|'che01-flex'|'mel01-standard'|'mel01-vault'|'mel01-cold'|'mel01-flex'|'osl01-standard'|'osl01-vault'|'osl01-cold'|'osl01-flex'|'sao01-standard'|'sao01-vault'|'sao01-cold'|'sao01-flex'|'tor01-standard'|'tor01-vault'|'tor01-cold'|'tor01-flex'
          },
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWrite='string',
          GrantWriteACP='string',
          IBMServiceInstanceId='string',
          IBMSSEKPEncryptionAlgorithm='AES256',
          IBMSSEKPCustomerRootKeyCrn='string'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the bucket.

      

    
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      The name of the bucket to create.

      

    
    :type CreateBucketConfiguration: dict
    :param CreateBucketConfiguration: 

      The configuration information for the bucket.

      

    
      - **LocationConstraint** *(string) --* 

        Specifies the Region where the bucket will be created. If you don't specify a Region, the bucket is created in the US East (N. Virginia) Region (us-east-1).

        

      
    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to list the objects in the bucket.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the bucket ACL.

      

    
    :type GrantWrite: string
    :param GrantWrite: 

      Allows grantee to create, overwrite, and delete any object in the bucket.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable bucket.

      

    
    :type IBMServiceInstanceId: string
    :param IBMServiceInstanceId: The storage account who will be the owner of the bucket.

    
    :type IBMSSEKPEncryptionAlgorithm: string
    :param IBMSSEKPEncryptionAlgorithm: The encryption algorithm that will be used for objects stored in the newly created bucket. Defaults to 'AES256'

    
    :type IBMSSEKPCustomerRootKeyCrn: string
    :param IBMSSEKPCustomerRootKeyCrn: Container for describing the KMS-KP Key CRN.

    
    
    :rtype: :py:class:`s3.Bucket`
    :returns: Bucket resource
    

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str

  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: Bucket(name)

    Creates a Bucket resource.::

      bucket = s3.Bucket('name')

    :type name: string
    :param name: The Bucket's name identifier. This **must** be set.
    
    :rtype: :py:class:`S3.Bucket`
    :returns: A Bucket resource
    

  .. py:method:: BucketAcl(bucket_name)

    Creates a BucketAcl resource.::

      bucket_acl = s3.BucketAcl('bucket_name')

    :type bucket_name: string
    :param bucket_name: The BucketAcl's bucket_name identifier. This **must** be set.
    
    :rtype: :py:class:`S3.BucketAcl`
    :returns: A BucketAcl resource
    

  .. py:method:: BucketCors(bucket_name)

    Creates a BucketCors resource.::

      bucket_cors = s3.BucketCors('bucket_name')

    :type bucket_name: string
    :param bucket_name: The BucketCors's bucket_name identifier. This **must** be set.
    
    :rtype: :py:class:`S3.BucketCors`
    :returns: A BucketCors resource
    

  .. py:method:: BucketLifecycleConfiguration(bucket_name)

    Creates a BucketLifecycleConfiguration resource.::

      bucket_lifecycle_configuration = s3.BucketLifecycleConfiguration('bucket_name')

    :type bucket_name: string
    :param bucket_name: The BucketLifecycleConfiguration's bucket_name identifier. This **must** be set.
    
    :rtype: :py:class:`S3.BucketLifecycleConfiguration`
    :returns: A BucketLifecycleConfiguration resource
    

  .. py:method:: BucketProtection(bucket_name)

    Creates a BucketProtection resource.::

      bucket_protection = s3.BucketProtection('bucket_name')

    :type bucket_name: string
    :param bucket_name: The BucketProtection's bucket_name identifier. This **must** be set.
    
    :rtype: :py:class:`S3.BucketProtection`
    :returns: A BucketProtection resource
    

  .. py:method:: BucketTagging(bucket_name)

    Creates a BucketTagging resource.::

      bucket_tagging = s3.BucketTagging('bucket_name')

    :type bucket_name: string
    :param bucket_name: The BucketTagging's bucket_name identifier. This **must** be set.
    
    :rtype: :py:class:`S3.BucketTagging`
    :returns: A BucketTagging resource
    

  .. py:method:: BucketVersioning(bucket_name)

    Creates a BucketVersioning resource.::

      bucket_versioning = s3.BucketVersioning('bucket_name')

    :type bucket_name: string
    :param bucket_name: The BucketVersioning's bucket_name identifier. This **must** be set.
    
    :rtype: :py:class:`S3.BucketVersioning`
    :returns: A BucketVersioning resource
    

  .. py:method:: BucketWebsite(bucket_name)

    Creates a BucketWebsite resource.::

      bucket_website = s3.BucketWebsite('bucket_name')

    :type bucket_name: string
    :param bucket_name: The BucketWebsite's bucket_name identifier. This **must** be set.
    
    :rtype: :py:class:`S3.BucketWebsite`
    :returns: A BucketWebsite resource
    

  .. py:method:: MultipartUpload(bucket_name,object_key,id)

    Creates a MultipartUpload resource.::

      multipart_upload = s3.MultipartUpload('bucket_name','object_key','id')

    :type bucket_name: string
    :param bucket_name: The MultipartUpload's bucket_name identifier. This **must** be set.
    :type object_key: string
    :param object_key: The MultipartUpload's object_key identifier. This **must** be set.
    :type id: string
    :param id: The MultipartUpload's id identifier. This **must** be set.
    
    :rtype: :py:class:`S3.MultipartUpload`
    :returns: A MultipartUpload resource
    

  .. py:method:: MultipartUploadPart(bucket_name,object_key,multipart_upload_id,part_number)

    Creates a MultipartUploadPart resource.::

      multipart_upload_part = s3.MultipartUploadPart('bucket_name','object_key','multipart_upload_id','part_number')

    :type bucket_name: string
    :param bucket_name: The MultipartUploadPart's bucket_name identifier. This **must** be set.
    :type object_key: string
    :param object_key: The MultipartUploadPart's object_key identifier. This **must** be set.
    :type multipart_upload_id: string
    :param multipart_upload_id: The MultipartUploadPart's multipart_upload_id identifier. This **must** be set.
    :type part_number: string
    :param part_number: The MultipartUploadPart's part_number identifier. This **must** be set.
    
    :rtype: :py:class:`S3.MultipartUploadPart`
    :returns: A MultipartUploadPart resource
    

  .. py:method:: Object(bucket_name,key)

    Creates a Object resource.::

      object = s3.Object('bucket_name','key')

    :type bucket_name: string
    :param bucket_name: The Object's bucket_name identifier. This **must** be set.
    :type key: string
    :param key: The Object's key identifier. This **must** be set.
    
    :rtype: :py:class:`S3.Object`
    :returns: A Object resource
    

  .. py:method:: ObjectAcl(bucket_name,object_key)

    Creates a ObjectAcl resource.::

      object_acl = s3.ObjectAcl('bucket_name','object_key')

    :type bucket_name: string
    :param bucket_name: The ObjectAcl's bucket_name identifier. This **must** be set.
    :type object_key: string
    :param object_key: The ObjectAcl's object_key identifier. This **must** be set.
    
    :rtype: :py:class:`S3.ObjectAcl`
    :returns: A ObjectAcl resource
    

  .. py:method:: ObjectProtection(bucket_name,object_key)

    Creates a ObjectProtection resource.::

      object_protection = s3.ObjectProtection('bucket_name','object_key')

    :type bucket_name: string
    :param bucket_name: The ObjectProtection's bucket_name identifier. This **must** be set.
    :type object_key: string
    :param object_key: The ObjectProtection's object_key identifier. This **must** be set.
    
    :rtype: :py:class:`S3.ObjectProtection`
    :returns: A ObjectProtection resource
    

  .. py:method:: ObjectSummary(bucket_name,key)

    Creates a ObjectSummary resource.::

      object_summary = s3.ObjectSummary('bucket_name','key')

    :type bucket_name: string
    :param bucket_name: The ObjectSummary's bucket_name identifier. This **must** be set.
    :type key: string
    :param key: The ObjectSummary's key identifier. This **must** be set.
    
    :rtype: :py:class:`S3.ObjectSummary`
    :returns: A ObjectSummary resource
    

  .. py:method:: ObjectVersion(bucket_name,object_key,id)

    Creates a ObjectVersion resource.::

      object_version = s3.ObjectVersion('bucket_name','object_key','id')

    :type bucket_name: string
    :param bucket_name: The ObjectVersion's bucket_name identifier. This **must** be set.
    :type object_key: string
    :param object_key: The ObjectVersion's object_key identifier. This **must** be set.
    :type id: string
    :param id: The ObjectVersion's id identifier. This **must** be set.
    
    :rtype: :py:class:`S3.ObjectVersion`
    :returns: A ObjectVersion resource
    
  .. rst-class:: admonition-title
  
  Collections
  
  Collections provide an interface to iterate over and manipulate groups of resources. 
  For more information about collections refer to the :ref:`Resources Introduction Guide<guide_collections>`.
  

  .. py:attribute:: buckets

    A collection of Bucket resources

    .. py:method:: all()

      Creates an iterable of all Bucket resources in the collection.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListBuckets>`_      


      **Request Syntax** 
      ::

        bucket_iterator = s3.buckets.all()
        
      
      :rtype: list(:py:class:`s3.Bucket`)
      :returns: A list of Bucket resources
      

    .. py:method:: filter(**kwargs)

      Creates an iterable of all Bucket resources in the collection filtered by kwargs passed to method.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListBuckets>`_      


      **Request Syntax** 
      ::

        bucket_iterator = s3.buckets.filter(
            IBMServiceInstanceId='string'
        )
      :type IBMServiceInstanceId: string
      :param IBMServiceInstanceId: The owning storage account. All buckets owned by this storage account are returned.

      
      
      :rtype: list(:py:class:`s3.Bucket`)
      :returns: A list of Bucket resources
      

    .. py:method:: limit(**kwargs)

      Creates an iterable up to a specified amount of Bucket resources in the collection.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListBuckets>`_      


      **Request Syntax** 
      ::

        bucket_iterator = s3.buckets.limit(
            count=123
        )
      :type count: integer
      :param count: The limit to the number of resources in the iterable.

      
      
      :rtype: list(:py:class:`s3.Bucket`)
      :returns: A list of Bucket resources
      

    .. py:method:: page_size(**kwargs)

      Creates an iterable of all Bucket resources in the collection, but limits the number of items returned by each service call by the specified amount.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListBuckets>`_      


      **Request Syntax** 
      ::

        bucket_iterator = s3.buckets.page_size(
            count=123
        )
      :type count: integer
      :param count: The number of items returned by each service call

      
      
      :rtype: list(:py:class:`s3.Bucket`)
      :returns: A list of Bucket resources
      

======
Bucket
======



.. py:class:: S3.Bucket(name)

  A resource representing an Amazon Simple Storage Service (S3) Bucket::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    bucket = s3.Bucket('name')

  :type name: string
  :param name: The Bucket's name identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`name`

  
  These are the resource's available attributes:
  
  *   :py:attr:`creation_date`

  
  *   :py:attr:`location_constraint`

  
  These are the resource's available actions:
  
  *   :py:meth:`copy()`

  
  *   :py:meth:`create()`

  
  *   :py:meth:`delete()`

  
  *   :py:meth:`delete_objects()`

  
  *   :py:meth:`download_file()`

  
  *   :py:meth:`download_fileobj()`

  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`load()`

  
  *   :py:meth:`put_object()`

  
  *   :py:meth:`upload_file()`

  
  *   :py:meth:`upload_fileobj()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`Acl()`

  
  *   :py:meth:`Cors()`

  
  *   :py:meth:`LifecycleConfiguration()`

  
  *   :py:meth:`Logging()`

  
  *   :py:meth:`Notification()`

  
  *   :py:meth:`Object()`

  
  *   :py:meth:`Policy()`

  
  *   :py:meth:`Protection()`

  
  *   :py:meth:`Tagging()`

  
  *   :py:meth:`Versioning()`

  
  *   :py:meth:`Website()`

  
  These are the resource's available collections:
  
  *   :py:attr:`multipart_uploads`

  
  *   :py:attr:`object_versions`

  
  *   :py:attr:`objects`

  
  These are the resource's available waiters:
  
  *   :py:meth:`wait_until_exists()`

  
  *   :py:meth:`wait_until_not_exists()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: name

    *(string)* The Bucket's name identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: creation_date

    

    - *(datetime) --* Date the bucket was created.

  .. py:attribute:: location_constraint

    

    - *(string) --* Specifies the region where the bucket will be created. If you don't specify a region, the bucket will be created in US Standard.
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: copy(CopySource, Key, ExtraArgs=None, Callback=None, SourceClient=None, Config=None)

        
    Copy an object from one S3 location to an object in this bucket.
    
    This is a managed transfer which will perform a multipart copy in
    multiple threads if necessary.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.resource('s3')
        copy_source = {
            'Bucket': 'mybucket',
            'Key': 'mykey'
        }
        bucket = s3.Bucket('otherbucket')
        bucket.copy(copy_source, 'otherkey')
    
    :type CopySource: dict
    :param CopySource: The name of the source bucket, key name of the
        source object, and optional version ID of the source object. The
        dictionary format is:
        ``{'Bucket': 'bucket', 'Key': 'key', 'VersionId': 'id'}``. Note
        that the ``VersionId`` key is optional and may be omitted.
    
    :type Key: str
    :param Key: The name of the key to copy to
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the copy.
    
    :type SourceClient: ibm_botocore or ibm_boto3 Client
    :param SourceClient: The client to be used for operation that
        may happen at the source object. For example, this client is
        used for the head_object that determines the size of the copy.
        If no client is provided, the current client is used as the client
        for the source object.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        copy.


  .. py:method:: create(**kwargs)

    

    Creates a new bucket. To create a bucket, you must register with Amazon S3 and have a valid AWS Access Key ID to authenticate requests. Anonymous requests are never allowed to create buckets. By creating the bucket, you become the bucket owner.

     

    Not every string is an acceptable bucket name. For information on bucket naming restrictions, see `Working with Amazon S3 Buckets <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html>`__ .

     

    By default, the bucket is created in the US East (N. Virginia) Region. You can optionally specify a Region in the request body. You might choose a Region to optimize latency, minimize costs, or address regulatory requirements. For example, if you reside in Europe, you will probably find it advantageous to create buckets in the EU (Ireland) Region. For more information, see `How to Select a Region for Your Buckets <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro>`__ .

     

    .. note::

       

      If you send your create bucket request to the ``s3.amazonaws.com`` endpoint, the request goes to the us-east-1 Region. Accordingly, the signature calculations in Signature Version 4 must use us-east-1 as the Region, even if the location constraint in the request specifies another Region where the bucket is to be created. If you create a bucket in a Region other than US East (N. Virginia), your application must be able to handle 307 redirect. For more information, see `Virtual Hosting of Buckets <https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html>`__ .

       

     

    When creating a bucket using this operation, you can optionally specify the accounts or groups that should be granted specific permissions on the bucket. There are two ways to grant the appropriate permissions using the request headers.

     

     
    * Specify a canned ACL using the ``x-amz-acl`` request header. Amazon S3 supports a set of predefined ACLs, known as *canned ACLs* . Each canned ACL has a predefined set of grantees and permissions. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly using the ``x-amz-grant-read`` , ``x-amz-grant-write`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. These headers map to the set of permissions Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . You specify each grantee as a type=value pair, where the type is one of the following: 

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants the AWS accounts identified by email addresses permissions to read object data and its metadata:

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

     

    .. note::

       

      You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

       

     

    The following operations are related to ``CreateBucket`` :

     

     
    *  PutObject   
     
    *  DeleteBucket   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/CreateBucket>`_    


    **Request Syntax** 
    ::

      response = bucket.create(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read',
          CreateBucketConfiguration={
              'LocationConstraint': 'us-standard'|'us-vault'|'us-cold'|'us-flex'|'us-east-standard'|'us-east-vault'|'us-east-cold'|'us-east-flex'|'us-south-standard'|'us-south-vault'|'us-south-cold'|'us-south-flex'|'eu-standard'|'eu-vault'|'eu-cold'|'eu-flex'|'eu-gb-standard'|'eu-gb-vault'|'eu-gb-cold'|'eu-gb-flex'|'eu-de-standard'|'eu-de-vault'|'eu-de-cold'|'eu-de-flex'|'ap-standard'|'ap-vault'|'ap-cold'|'ap-flex'|'ams03-standard'|'ams03-vault'|'ams03-cold'|'ams03-flex'|'che01-standard'|'che01-vault'|'che01-cold'|'che01-flex'|'mel01-standard'|'mel01-vault'|'mel01-cold'|'mel01-flex'|'osl01-standard'|'osl01-vault'|'osl01-cold'|'osl01-flex'|'sao01-standard'|'sao01-vault'|'sao01-cold'|'sao01-flex'|'tor01-standard'|'tor01-vault'|'tor01-cold'|'tor01-flex'
          },
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWrite='string',
          GrantWriteACP='string',
          IBMServiceInstanceId='string',
          IBMSSEKPEncryptionAlgorithm='AES256',
          IBMSSEKPCustomerRootKeyCrn='string'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the bucket.

      

    
    :type CreateBucketConfiguration: dict
    :param CreateBucketConfiguration: 

      The configuration information for the bucket.

      

    
      - **LocationConstraint** *(string) --* 

        Specifies the Region where the bucket will be created. If you don't specify a Region, the bucket is created in the US East (N. Virginia) Region (us-east-1).

        

      
    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to list the objects in the bucket.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the bucket ACL.

      

    
    :type GrantWrite: string
    :param GrantWrite: 

      Allows grantee to create, overwrite, and delete any object in the bucket.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable bucket.

      

    
    :type IBMServiceInstanceId: string
    :param IBMServiceInstanceId: The storage account who will be the owner of the bucket.

    
    :type IBMSSEKPEncryptionAlgorithm: string
    :param IBMSSEKPEncryptionAlgorithm: The encryption algorithm that will be used for objects stored in the newly created bucket. Defaults to 'AES256'

    
    :type IBMSSEKPCustomerRootKeyCrn: string
    :param IBMSSEKPCustomerRootKeyCrn: Container for describing the KMS-KP Key CRN.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Location': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Location** *(string) --* 

          Specifies the Region where the bucket will be created. If you are creating a bucket on the US East (N. Virginia) Region (us-east-1), you do not need to specify the location.

          
    

  .. py:method:: delete()

    

    Deletes the bucket. All objects (including all object versions and delete markers) in the bucket must be deleted before the bucket itself can be deleted.

     

     **Related Resources**  

     

     
    * 
     
    * 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucket>`_    


    **Request Syntax** 
    ::

      response = bucket.delete()
      
    
    :returns: None

  .. py:method:: delete_objects(**kwargs)

    

    This operation enables you to delete multiple objects from a bucket using a single HTTP request. If you know the object keys that you want to delete, then this operation provides a suitable alternative to sending individual delete requests, reducing per-request overhead.

     

    The request contains a list of up to 1000 keys that you want to delete. In the XML, you provide the object key names, and optionally, version IDs if you want to delete a specific version of the object from a versioning-enabled bucket. For each key, Amazon S3 performs a delete operation and returns the result of that delete, success, or failure, in the response. Note that if the object specified in the request is not found, Amazon S3 returns the result as deleted.

     

    The operation supports two modes for the response: verbose and quiet. By default, the operation uses verbose mode in which the response includes the result of deletion of each key in your request. In quiet mode the response includes only keys where the delete operation encountered an error. For a successful deletion, the operation does not return any information about the delete in the response body.

     

    When performing this operation on an MFA Delete enabled bucket, that attempts to delete any versioned objects, you must include an MFA token. If you do not provide one, the entire request will fail, even if there are non-versioned objects you are trying to delete. If you provide an invalid token, whether there are versioned keys in the request or not, the entire Multi-Object Delete request will fail. For information about MFA Delete, see `MFA Delete <https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html#MultiFactorAuthenticationDelete>`__ .

     

    Finally, the Content-MD5 header is required for all Multi-Object Delete requests. Amazon S3 uses the header value to ensure that your request body has not been altered in transit.

     

    The following operations are related to ``DeleteObjects`` :

     

     
    *  CreateMultipartUpload   
     
    *  UploadPart   
     
    *  CompleteMultipartUpload   
     
    *  ListParts   
     
    *  AbortMultipartUpload   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteObjects>`_    


    **Request Syntax** 
    ::

      response = bucket.delete_objects(
          Delete={
              'Objects': [
                  {
                      'Key': 'string',
                      'VersionId': 'string'
                  },
              ],
              'Quiet': True|False
          },
          MFA='string',
          RequestPayer='requester'
      )
    :type Delete: dict
    :param Delete: **[REQUIRED]** 

      Container for the request.

      

    
      - **Objects** *(list) --* **[REQUIRED]** 

        The objects to delete.

        

      
        - *(dict) --* 

          Object Identifier is unique value to identify objects.

          

        
          - **Key** *(string) --* **[REQUIRED]** 

            Key name of the object to delete.

            

          
          - **VersionId** *(string) --* 

            VersionId for the specific version of the object to delete.

            

          
        
    
      - **Quiet** *(boolean) --* 

        Element to enable quiet mode for the request. When you add this element, you must set its value to true.

        

      
    
    :type MFA: string
    :param MFA: 

      The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA delete enabled.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Deleted': [
                {
                    'Key': 'string',
                    'VersionId': 'string',
                    'DeleteMarker': True|False,
                    'DeleteMarkerVersionId': 'string'
                },
            ],
            'RequestCharged': 'requester',
            'Errors': [
                {
                    'Key': 'string',
                    'VersionId': 'string',
                    'Code': 'string',
                    'Message': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Deleted** *(list) --* 

          Container element for a successful delete. It identifies the object that was successfully deleted.

          
          

          - *(dict) --* 

            Information about the deleted object.

            
            

            - **Key** *(string) --* 

              The name of the deleted object.

              
            

            - **VersionId** *(string) --* 

              The version ID of the deleted object.

              
            

            - **DeleteMarker** *(boolean) --* 

              Specifies whether the versioned object that was permanently deleted was (true) or was not (false) a delete marker. In a simple DELETE, this header indicates whether (true) or not (false) a delete marker was created.

              
            

            - **DeleteMarkerVersionId** *(string) --* 

              The version ID of the delete marker created as a result of the DELETE operation. If you delete a specific object version, the value returned by this header is the version ID of the object version deleted.

              
        
      
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
        

        - **Errors** *(list) --* 

          Container for a failed delete operation that describes the object that Amazon S3 attempted to delete and the error it encountered.

          
          

          - *(dict) --* 

            Container for all error elements.

            
            

            - **Key** *(string) --* 

              The error key.

              
            

            - **VersionId** *(string) --* 

              The version ID of the error.

              
            

            - **Code** *(string) --* 

              The error code is a string that uniquely identifies an error condition. It is meant to be read and understood by programs that detect and handle errors by type. 

               

               **Amazon S3 error codes**  

               

               
              * 

                
                * *Code:* AccessDenied  
                 
                * *Description:* Access Denied 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* AccountProblem 
                 
                * *Description:* There is a problem with your AWS account that prevents the operation from completing successfully. Contact AWS Support for further assistance. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* AllAccessDisabled 
                 
                * *Description:* All access to this Amazon S3 resource has been disabled. Contact AWS Support for further assistance. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* AmbiguousGrantByEmailAddress 
                 
                * *Description:* The email address you provided is associated with more than one account. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* AuthorizationHeaderMalformed 
                 
                * *Description:* The authorization header you provided is invalid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *HTTP Status Code:* N/A 
                 

               
               
              * 

                
                * *Code:* BadDigest 
                 
                * *Description:* The Content-MD5 you specified did not match what we received. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* BucketAlreadyExists 
                 
                * *Description:* The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again. 
                 
                * *HTTP Status Code:* 409 Conflict 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* BucketAlreadyOwnedByYou 
                 
                * *Description:* The bucket you tried to create already exists, and you own it. Amazon S3 returns this error in all AWS Regions except in the North Virginia Region. For legacy compatibility, if you re-create an existing bucket that you already own in the North Virginia Region, Amazon S3 returns 200 OK and resets the bucket access control lists (ACLs). 
                 
                * *Code:* 409 Conflict (in all Regions except the North Virginia Region)  
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* BucketNotEmpty 
                 
                * *Description:* The bucket you tried to delete is not empty. 
                 
                * *HTTP Status Code:* 409 Conflict 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* CredentialsNotSupported 
                 
                * *Description:* This request does not support credentials. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* CrossLocationLoggingProhibited 
                 
                * *Description:* Cross-location logging not allowed. Buckets in one geographic location cannot log information to a bucket in another location. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* EntityTooSmall 
                 
                * *Description:* Your proposed upload is smaller than the minimum allowed object size. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* EntityTooLarge 
                 
                * *Description:* Your proposed upload exceeds the maximum allowed object size. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* ExpiredToken 
                 
                * *Description:* The provided token has expired. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* IllegalVersioningConfigurationException  
                 
                * *Description:* Indicates that the versioning configuration specified in the request is invalid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* IncompleteBody 
                 
                * *Description:* You did not provide the number of bytes specified by the Content-Length HTTP header 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* IncorrectNumberOfFilesInPostRequest 
                 
                * *Description:* POST requires exactly one file upload per request. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InlineDataTooLarge 
                 
                * *Description:* Inline data exceeds the maximum allowed size. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InternalError 
                 
                * *Description:* We encountered an internal error. Please try again. 
                 
                * *HTTP Status Code:* 500 Internal Server Error 
                 
                * *SOAP Fault Code Prefix:* Server 
                 

               
               
              * 

                
                * *Code:* InvalidAccessKeyId 
                 
                * *Description:* The AWS access key ID you provided does not exist in our records. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidAddressingHeader 
                 
                * *Description:* You must specify the Anonymous role. 
                 
                * *HTTP Status Code:* N/A 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidArgument 
                 
                * *Description:* Invalid Argument 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidBucketName 
                 
                * *Description:* The specified bucket is not valid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidBucketState 
                 
                * *Description:* The request is not valid with the current state of the bucket. 
                 
                * *HTTP Status Code:* 409 Conflict 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidDigest 
                 
                * *Description:* The Content-MD5 you specified is not valid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidEncryptionAlgorithmError 
                 
                * *Description:* The encryption request you specified is not valid. The valid value is AES256. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidLocationConstraint 
                 
                * *Description:* The specified location constraint is not valid. For more information about Regions, see `How to Select a Region for Your Buckets <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro>`__ .  
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidObjectState 
                 
                * *Description:* The operation is not valid for the current state of the object. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidPart 
                 
                * *Description:* One or more of the specified parts could not be found. The part might not have been uploaded, or the specified entity tag might not have matched the part's entity tag. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidPartOrder 
                 
                * *Description:* The list of parts was not in ascending order. Parts list must be specified in order by part number. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidPayer 
                 
                * *Description:* All access to this object has been disabled. Please contact AWS Support for further assistance. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidPolicyDocument 
                 
                * *Description:* The content of the form does not meet the conditions specified in the policy document. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidRange 
                 
                * *Description:* The requested range cannot be satisfied. 
                 
                * *HTTP Status Code:* 416 Requested Range Not Satisfiable 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Please use AWS4-HMAC-SHA256. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* SOAP requests must be made over an HTTPS connection. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Acceleration is not supported for buckets with non-DNS compliant names. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Acceleration is not supported for buckets with periods (.) in their names. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Accelerate endpoint only supports virtual style requests. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Accelerate is not configured on this bucket. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Accelerate is disabled on this bucket. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Acceleration is not supported on this bucket. Contact AWS Support for more information. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidRequest 
                 
                * *Description:* Amazon S3 Transfer Acceleration cannot be enabled on this bucket. Contact AWS Support for more information. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *Code:* N/A 
                 

               
               
              * 

                
                * *Code:* InvalidSecurity 
                 
                * *Description:* The provided security credentials are not valid. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidSOAPRequest 
                 
                * *Description:* The SOAP request body is invalid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidStorageClass 
                 
                * *Description:* The storage class you specified is not valid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidTargetBucketForLogging 
                 
                * *Description:* The target bucket for logging does not exist, is not owned by you, or does not have the appropriate grants for the log-delivery group.  
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidToken 
                 
                * *Description:* The provided token is malformed or otherwise invalid. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* InvalidURI 
                 
                * *Description:* Couldn't parse the specified URI. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* KeyTooLongError 
                 
                * *Description:* Your key is too long. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MalformedACLError 
                 
                * *Description:* The XML you provided was not well-formed or did not validate against our published schema. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MalformedPOSTRequest  
                 
                * *Description:* The body of your POST request is not well-formed multipart/form-data. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MalformedXML 
                 
                * *Description:* This happens when the user sends malformed XML (XML that doesn't conform to the published XSD) for the configuration. The error message is, "The XML you provided was not well-formed or did not validate against our published schema."  
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MaxMessageLengthExceeded 
                 
                * *Description:* Your request was too big. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MaxPostPreDataLengthExceededError 
                 
                * *Description:* Your POST request fields preceding the upload file were too large. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MetadataTooLarge 
                 
                * *Description:* Your metadata headers exceed the maximum allowed metadata size. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MethodNotAllowed 
                 
                * *Description:* The specified method is not allowed against this resource. 
                 
                * *HTTP Status Code:* 405 Method Not Allowed 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MissingAttachment 
                 
                * *Description:* A SOAP attachment was expected, but none were found. 
                 
                * *HTTP Status Code:* N/A 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MissingContentLength 
                 
                * *Description:* You must provide the Content-Length HTTP header. 
                 
                * *HTTP Status Code:* 411 Length Required 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MissingRequestBodyError 
                 
                * *Description:* This happens when the user sends an empty XML document as a request. The error message is, "Request body is empty."  
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MissingSecurityElement 
                 
                * *Description:* The SOAP 1.1 request is missing a security element. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* MissingSecurityHeader 
                 
                * *Description:* Your request is missing a required header. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoLoggingStatusForKey 
                 
                * *Description:* There is no such thing as a logging status subresource for a key. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoSuchBucket 
                 
                * *Description:* The specified bucket does not exist. 
                 
                * *HTTP Status Code:* 404 Not Found 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoSuchBucketPolicy 
                 
                * *Description:* The specified bucket does not have a bucket policy. 
                 
                * *HTTP Status Code:* 404 Not Found 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoSuchKey 
                 
                * *Description:* The specified key does not exist. 
                 
                * *HTTP Status Code:* 404 Not Found 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoSuchLifecycleConfiguration 
                 
                * *Description:* The lifecycle configuration does not exist.  
                 
                * *HTTP Status Code:* 404 Not Found 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoSuchUpload 
                 
                * *Description:* The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed. 
                 
                * *HTTP Status Code:* 404 Not Found 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NoSuchVersion  
                 
                * *Description:* Indicates that the version ID specified in the request does not match an existing version. 
                 
                * *HTTP Status Code:* 404 Not Found 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* NotImplemented 
                 
                * *Description:* A header you provided implies functionality that is not implemented. 
                 
                * *HTTP Status Code:* 501 Not Implemented 
                 
                * *SOAP Fault Code Prefix:* Server 
                 

               
               
              * 

                
                * *Code:* NotSignedUp 
                 
                * *Description:* Your account is not signed up for the Amazon S3 service. You must sign up before you can use Amazon S3. You can sign up at the following URL: https://aws.amazon.com/s3 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* OperationAborted 
                 
                * *Description:* A conflicting conditional operation is currently in progress against this resource. Try again. 
                 
                * *HTTP Status Code:* 409 Conflict 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* PermanentRedirect 
                 
                * *Description:* The bucket you are attempting to access must be addressed using the specified endpoint. Send all future requests to this endpoint. 
                 
                * *HTTP Status Code:* 301 Moved Permanently 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* PreconditionFailed 
                 
                * *Description:* At least one of the preconditions you specified did not hold. 
                 
                * *HTTP Status Code:* 412 Precondition Failed 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* Redirect 
                 
                * *Description:* Temporary redirect. 
                 
                * *HTTP Status Code:* 307 Moved Temporarily 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* RestoreAlreadyInProgress 
                 
                * *Description:* Object restore is already in progress. 
                 
                * *HTTP Status Code:* 409 Conflict 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* RequestIsNotMultiPartContent 
                 
                * *Description:* Bucket POST must be of the enclosure-type multipart/form-data. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* RequestTimeout 
                 
                * *Description:* Your socket connection to the server was not read from or written to within the timeout period. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* RequestTimeTooSkewed 
                 
                * *Description:* The difference between the request time and the server's time is too large. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* RequestTorrentOfBucketError 
                 
                * *Description:* Requesting the torrent file of a bucket is not permitted. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* SignatureDoesNotMatch 
                 
                * *Description:* The request signature we calculated does not match the signature you provided. Check your AWS secret access key and signing method. For more information, see `REST Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html>`__ and `SOAP Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/SOAPAuthentication.html>`__ for details. 
                 
                * *HTTP Status Code:* 403 Forbidden 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* ServiceUnavailable 
                 
                * *Description:* Reduce your request rate. 
                 
                * *HTTP Status Code:* 503 Service Unavailable 
                 
                * *SOAP Fault Code Prefix:* Server 
                 

               
               
              * 

                
                * *Code:* SlowDown 
                 
                * *Description:* Reduce your request rate. 
                 
                * *HTTP Status Code:* 503 Slow Down 
                 
                * *SOAP Fault Code Prefix:* Server 
                 

               
               
              * 

                
                * *Code:* TemporaryRedirect 
                 
                * *Description:* You are being redirected to the bucket while DNS updates. 
                 
                * *HTTP Status Code:* 307 Moved Temporarily 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* TokenRefreshRequired 
                 
                * *Description:* The provided token must be refreshed. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* TooManyBuckets 
                 
                * *Description:* You have attempted to create more buckets than allowed. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* UnexpectedContent 
                 
                * *Description:* This request does not support content. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* UnresolvableGrantByEmailAddress 
                 
                * *Description:* The email address you provided does not match any account on record. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               
              * 

                
                * *Code:* UserKeyMustBeSpecified 
                 
                * *Description:* The bucket POST must contain the specified field name. If it is specified, check the order of the fields. 
                 
                * *HTTP Status Code:* 400 Bad Request 
                 
                * *SOAP Fault Code Prefix:* Client 
                 

               
               

               

              

              
            

            - **Message** *(string) --* 

              The error message contains a generic description of the error condition in English. It is intended for a human audience. Simple programs display the message directly to the end user if they encounter an error condition they don't know how or don't care to handle. Sophisticated programs with more exhaustive error handling and proper internationalization are more likely to ignore the error message.

              
        
      
    

  .. py:method:: download_file(Key, Filename, ExtraArgs=None, Callback=None, Config=None)

        
    Download an S3 object to a file.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.resource('s3')
        s3.Bucket('mybucket').download_file('hello.txt', '/tmp/hello.txt')
    
    Similar behavior as S3Transfer's download_file() method,
    except that parameters are capitalized. Detailed examples can be found at
    :ref:`S3Transfer's Usage <ref_s3transfer_usage>`.
    
    :type Key: str
    :param Key: The name of the key to download from.
    
    :type Filename: str
    :param Filename: The path to the file to download to.
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation.
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the download.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        transfer.


  .. py:method:: download_fileobj(Key, Fileobj, ExtraArgs=None, Callback=None, Config=None)

        
    Download an object from this bucket to a file-like-object.
    
    The file-like object must be in binary mode.
    
    This is a managed transfer which will perform a multipart download in
    multiple threads if necessary.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.resource('s3')
        bucket = s3.Bucket('mybucket')
    
        with open('filename', 'wb') as data:
            bucket.download_fileobj('mykey', data)
    
    :type Fileobj: a file-like object
    :param Fileobj: A file-like object to download into. At a minimum, it must
        implement the `write` method and must accept bytes.
    
    :type Key: str
    :param Key: The name of the key to download from.
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation.
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the download.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        download.


  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: load(*args, **kwargs)

        
    Calls s3.Client.list_buckets() to update the attributes of the Bucket
    resource.


  .. py:method:: put_object(**kwargs)

    

    Adds an object to a bucket. You must have WRITE permissions on a bucket to add an object to it.

     

    Amazon S3 never adds partial objects; if you receive a success response, Amazon S3 added the entire object to the bucket.

     

    Amazon S3 is a distributed system. If it receives multiple write requests for the same object simultaneously, it overwrites all but the last object written. Amazon S3 does not provide object locking; if you need this, make sure to build it into your application layer or use versioning instead.

     

    To ensure that data is not corrupted traversing the network, use the ``Content-MD5`` header. When you use this header, Amazon S3 checks the object against the provided MD5 value and, if they do not match, returns an error. Additionally, you can calculate the MD5 while putting an object to Amazon S3 and compare the returned ETag to the calculated MD5 value.

     

    .. note::

       

      To configure your application to send the request headers before sending the request body, use the ``100-continue`` HTTP status code. For PUT operations, this helps you avoid sending the message body if the message is rejected based on the headers (for example, because authentication fails or a redirect occurs). For more information on the ``100-continue`` HTTP status code, see Section 8.2.3 of `http\://www.ietf.org/rfc/rfc2616.txt <http://www.ietf.org/rfc/rfc2616.txt>`__ .

       

     

    You can optionally request server-side encryption. With server-side encryption, Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts the data when you access it. You have the option to provide your own encryption key or use AWS managed encryption keys. For more information, see `Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html>`__ .

      Access Permissions  

    You can optionally specify the accounts or groups that should be granted specific permissions on the new object. There are two ways to grant the permissions using the request headers:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . 
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

      Server-Side- Encryption-Specific Request Headers  

    You can optionally tell Amazon S3 to encrypt data at rest using server-side encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. The option you use depends on whether you want to use AWS managed encryption keys or provide your own encryption key. 

     

     
    * Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys used to encrypt data, specify the following headers in the request. 

       
      * x-amz-server-side​-encryption 
       
      * x-amz-server-side-encryption-aws-kms-key-id 
       
      * x-amz-server-side-encryption-context 
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data. If you want to use a customer managed AWS KMS CMK, you must provide the ``x-amz-server-side-encryption-aws-kms-key-id`` of the symmetric customer managed CMK. Amazon S3 only supports symmetric CMKs and not asymmetric CMKs. For more information, see `Using Symmetric and Asymmetric Keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html>`__ in the *AWS Key Management Service Developer Guide* .

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * Use customer-provided encryption keys – If you want to manage your own encryption keys, provide all the following headers in the request. 

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

      Access-Control-List (ACL)-Specific Request Headers  

    You also can use the following access control–related headers with this operation. By default, all objects are private. Only the owner has full access control. When adding a new object, you can grant permissions to individual AWS accounts or to predefined groups defined by Amazon S3. These permissions are then added to the Access Control List (ACL) on the object. For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ . With this operation, you can grant access permissions using one of the following two methods:

     

     
    * Specify a canned ACL (``x-amz-acl`` ) — Amazon S3 supports a set of predefined ACLs, known as canned ACLs. Each canned ACL has a predefined set of grantees and permissions. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly — To explicitly grant access permissions to specific AWS accounts or groups, use the following headers. Each header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . In the header, you specify a list of grantees who get the specific permission. To grant permissions explicitly use: 

       
      * x-amz-grant-read 
       
      * x-amz-grant-write 
       
      * x-amz-grant-read-acp 
       
      * x-amz-grant-write-acp 
       
      * x-amz-grant-full-control 
       

     

    You specify each grantee as a type=value pair, where the type is one of the following:

     

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 

      .. warning::

         Using email addresses to specify a grantee is only supported in the following AWS Regions:  

           
          * US East (N. Virginia) 
           
          * US West (N. California) 
           
          * US West (Oregon) 
           
          * Asia Pacific (Singapore) 
           
          * Asia Pacific (Sydney) 
           
          * Asia Pacific (Tokyo) 
           
          * EU (Ireland) 
           
          * South America (São Paulo) 
           

         

        For a list of all the Amazon S3 supported Regions and endpoints, see `Regions and Endpoints <https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region>`__ in the AWS General Reference

         

       
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants the AWS accounts identified by email addresses permissions to read object data and its metadata:

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

      Server-Side- Encryption-Specific Request Headers  

    You can optionally tell Amazon S3 to encrypt data at rest using server-side encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. The option you use depends on whether you want to use AWS-managed encryption keys or provide your own encryption key. 

     

     
    * Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys used to encrypt data, specify the following headers in the request. 

       
      * x-amz-server-side​-encryption 
       
      * x-amz-server-side-encryption-aws-kms-key-id 
       
      * x-amz-server-side-encryption-context 
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data. If you want to use a customer managed AWS KMS CMK, you must provide the ``x-amz-server-side-encryption-aws-kms-key-id`` of the symmetric customer managed CMK. Amazon S3 only supports symmetric CMKs and not asymmetric CMKs. For more information, see `Using Symmetric and Asymmetric Keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html>`__ in the *AWS Key Management Service Developer Guide* .

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * Use customer-provided encryption keys – If you want to manage your own encryption keys, provide all the following headers in the request. 

    .. note::

       If you use this feature, the ETag value that Amazon S3 returns in the response is not the MD5 of the object. 

     

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

       

     **Storage Class Options**  

     

    By default, Amazon S3 uses the Standard storage class to store newly created objects. The Standard storage class provides high durability and high availability. You can specify other storage classes depending on the performance needs. For more information, see `Storage Classes <https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html>`__ in the Amazon Simple Storage Service Developer Guide.

     

     **Versioning**  

     

    If you enable versioning for a bucket, Amazon S3 automatically generates a unique version ID for the object being stored. Amazon S3 returns this ID in the response using the ``x-amz-version-id response`` header. If versioning is suspended, Amazon S3 always uses null as the version ID for the object stored. For more information about returning the versioning state of a bucket, see  GetBucketVersioning . If you enable versioning for a bucket, when Amazon S3 receives multiple write requests for the same object simultaneously, it stores all of the objects.

     

     **Related Resources**  

     

     
    *  CopyObject   
     
    *  DeleteObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutObject>`_    


    **Request Syntax** 
    ::

      object = bucket.put_object(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read'|'aws-exec-read'|'bucket-owner-read'|'bucket-owner-full-control',
          Body=b'bytes'|file,
          CacheControl='string',
          ContentDisposition='string',
          ContentEncoding='string',
          ContentLanguage='string',
          ContentLength=123,
          ContentMD5='string',
          ContentType='string',
          Expires=datetime(2015, 1, 1),
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWriteACP='string',
          Key='string',
          Metadata={
              'string': 'string'
          },
          RetentionExpirationDate=datetime(2015, 1, 1),
          RetentionLegalHoldId='string',
          RetentionPeriod=123,
          ServerSideEncryption='AES256',
          StorageClass='ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
          WebsiteRedirectLocation='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          SSEKMSKeyId='string',
          RequestPayer='requester'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the object. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ .

      

    
    :type Body: bytes or seekable file-like object
    :param Body: 

      Object data.

      

    
    :type CacheControl: string
    :param CacheControl: 

      Can be used to specify caching behavior along the request/reply chain. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9>`__ .

      

    
    :type ContentDisposition: string
    :param ContentDisposition: 

      Specifies presentational information for the object. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1>`__ .

      

    
    :type ContentEncoding: string
    :param ContentEncoding: 

      Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11>`__ .

      

    
    :type ContentLanguage: string
    :param ContentLanguage: 

      The language the content is in.

      

    
    :type ContentLength: integer
    :param ContentLength: 

      Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13>`__ .

      

    
    :type ContentMD5: string
    :param ContentMD5: 

      The base64-encoded 128-bit MD5 digest of the message (without the headers) according to RFC 1864. This header can be used as a message integrity check to verify that the data is the same data that was originally sent. Although it is optional, we recommend using the Content-MD5 mechanism as an end-to-end integrity check. For more information about REST request authentication, see `REST Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html>`__ .

      

    
    :type ContentType: string
    :param ContentType: 

      A standard MIME type describing the format of the contents. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17>`__ .

      

    
    :type Expires: datetime
    :param Expires: 

      The date and time at which the object is no longer cacheable. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21>`__ .

      

    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to read the object data and its metadata.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the object ACL.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable object.

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      Object key for which the PUT operation was initiated.

      

    
    :type Metadata: dict
    :param Metadata: 

      A map of metadata to store with the object in S3.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type RetentionExpirationDate: datetime
    :param RetentionExpirationDate: Date on which it will be legal to delete or modify the object. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used.

    
    :type RetentionLegalHoldId: string
    :param RetentionLegalHoldId: A single legal hold to apply to the object. A legal hold is a character long string of max length 64. The object cannot be overwritten or deleted until all legal holds associated with the object are removed.

    
    :type RetentionPeriod: integer
    :param RetentionPeriod: Retention period to store on the object in seconds. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.

    
    :type ServerSideEncryption: string
    :param ServerSideEncryption: 

      The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

      

    
    :type StorageClass: string
    :param StorageClass: 

      If you don't specify, Standard is the default storage class. Amazon S3 supports other storage classes.

      

    
    :type WebsiteRedirectLocation: string
    :param WebsiteRedirectLocation: 

      If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. For information about object metadata, see `Object Key and Metadata <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html>`__ .

       

      In the following example, the request header sets the redirect to an object (anotherPage.html) in the same bucket:

       

       ``x-amz-website-redirect-location: /anotherPage.html``  

       

      In the following example, the request header sets the object redirect to another website:

       

       ``x-amz-website-redirect-location: http://www.example.com/``  

       

      For more information about website hosting in Amazon S3, see `Hosting Websites on Amazon S3 <https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html>`__ and `How to Configure Website Page Redirects <https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html>`__ . 

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type SSEKMSKeyId: string
    :param SSEKMSKeyId: Ignored by COS if present.

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: :py:class:`s3.Object`
    :returns: Object resource
    

  .. py:method:: upload_file(Filename, Key, ExtraArgs=None, Callback=None, Config=None)

        
    Upload a file to an S3 object.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.resource('s3')
        s3.Bucket('mybucket').upload_file('/tmp/hello.txt', 'hello.txt')
    
    Similar behavior as S3Transfer's upload_file() method,
    except that parameters are capitalized. Detailed examples can be found at
    :ref:`S3Transfer's Usage <ref_s3transfer_usage>`.
    
    :type Filename: str
    :param Filename: The path to the file to upload.
    
    :type Key: str
    :param Key: The name of the key to upload to.
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation.
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the upload.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        transfer.


  .. py:method:: upload_fileobj(Fileobj, Key, ExtraArgs=None, Callback=None, Config=None)

        
    Upload a file-like object to this bucket.
    
    The file-like object must be in binary mode.
    
    This is a managed transfer which will perform a multipart upload in
    multiple threads if necessary.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.resource('s3')
        bucket = s3.Bucket('mybucket')
    
        with open('filename', 'rb') as data:
            bucket.upload_fileobj(data, 'mykey')
    
    :type Fileobj: a file-like object
    :param Fileobj: A file-like object to upload. At a minimum, it must
        implement the `read` method, and must return bytes.
    
    :type Key: str
    :param Key: The name of the key to upload to.
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation.
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the upload.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        upload.

  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: Acl()

    Creates a BucketAcl resource.::

      bucket_acl = bucket.Acl()

    
    :rtype: :py:class:`S3.BucketAcl`
    :returns: A BucketAcl resource
    

  .. py:method:: Cors()

    Creates a BucketCors resource.::

      bucket_cors = bucket.Cors()

    
    :rtype: :py:class:`S3.BucketCors`
    :returns: A BucketCors resource
    

  .. py:method:: LifecycleConfiguration()

    Creates a BucketLifecycleConfiguration resource.::

      bucket_lifecycle_configuration = bucket.LifecycleConfiguration()

    
    :rtype: :py:class:`S3.BucketLifecycleConfiguration`
    :returns: A BucketLifecycleConfiguration resource
    

  .. py:method:: Logging()

    Creates a BucketLogging resource.::

      bucket_logging = bucket.Logging()

    
    :rtype: :py:class:`S3.BucketLogging`
    :returns: A BucketLogging resource
    

  .. py:method:: Notification()

    Creates a BucketNotification resource.::

      bucket_notification = bucket.Notification()

    
    :rtype: :py:class:`S3.BucketNotification`
    :returns: A BucketNotification resource
    

  .. py:method:: Object(key)

    Creates a Object resource.::

      object = bucket.Object('key')

    :type key: string
    :param key: The Object's key identifier. This **must** be set.
    
    :rtype: :py:class:`S3.Object`
    :returns: A Object resource
    

  .. py:method:: Policy()

    Creates a BucketPolicy resource.::

      bucket_policy = bucket.Policy()

    
    :rtype: :py:class:`S3.BucketPolicy`
    :returns: A BucketPolicy resource
    

  .. py:method:: Protection()

    Creates a BucketProtection resource.::

      bucket_protection = bucket.Protection()

    
    :rtype: :py:class:`S3.BucketProtection`
    :returns: A BucketProtection resource
    

  .. py:method:: Tagging()

    Creates a BucketTagging resource.::

      bucket_tagging = bucket.Tagging()

    
    :rtype: :py:class:`S3.BucketTagging`
    :returns: A BucketTagging resource
    

  .. py:method:: Versioning()

    Creates a BucketVersioning resource.::

      bucket_versioning = bucket.Versioning()

    
    :rtype: :py:class:`S3.BucketVersioning`
    :returns: A BucketVersioning resource
    

  .. py:method:: Website()

    Creates a BucketWebsite resource.::

      bucket_website = bucket.Website()

    
    :rtype: :py:class:`S3.BucketWebsite`
    :returns: A BucketWebsite resource
    
  .. rst-class:: admonition-title
  
  Collections
  
  Collections provide an interface to iterate over and manipulate groups of resources. 
  For more information about collections refer to the :ref:`Resources Introduction Guide<guide_collections>`.
  

  .. py:attribute:: multipart_uploads

    A collection of MultipartUpload resources

    .. py:method:: all()

      Creates an iterable of all MultipartUpload resources in the collection.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListMultipartUploads>`_      


      **Request Syntax** 
      ::

        multipart_upload_iterator = bucket.multipart_uploads.all()
        
      
      :rtype: list(:py:class:`s3.MultipartUpload`)
      :returns: A list of MultipartUpload resources
      

    .. py:method:: filter(**kwargs)

      Creates an iterable of all MultipartUpload resources in the collection filtered by kwargs passed to method.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListMultipartUploads>`_      


      **Request Syntax** 
      ::

        multipart_upload_iterator = bucket.multipart_uploads.filter(
            Delimiter='string',
            EncodingType='url',
            KeyMarker='string',
            MaxUploads=123,
            MirrorDestination='string',
            Prefix='string',
            UploadIdMarker='string'
        )
      :type Delimiter: string
      :param Delimiter: 

        Character you use to group keys.

         

        All keys that contain the same string between the prefix, if specified, and the first occurrence of the delimiter after the prefix are grouped under a single result element, ``CommonPrefixes`` . If you don't specify the prefix parameter, then the substring starts at the beginning of the key. The keys that are grouped under ``CommonPrefixes`` result element are not returned elsewhere in the response.

        

      
      :type EncodingType: string
      :param EncodingType: 

        Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.

        

      
      :type KeyMarker: string
      :param KeyMarker: 

        Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.

         

        If ``upload-id-marker`` is not specified, only the keys lexicographically greater than the specified ``key-marker`` will be included in the list.

         

        If ``upload-id-marker`` is specified, any multipart uploads for a key equal to the ``key-marker`` might also be included, provided those multipart uploads have upload IDs lexicographically greater than the specified ``upload-id-marker`` .

        

      
      :type MaxUploads: integer
      :param MaxUploads: 

        Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.

        

      
      :type MirrorDestination: string
      :param MirrorDestination: Mirror source for object reads.

      
      :type Prefix: string
      :param Prefix: 

        Lists in-progress uploads only for those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different grouping of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.)

        

      
      :type UploadIdMarker: string
      :param UploadIdMarker: 

        Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored. Otherwise, any multipart uploads for a key equal to the key-marker might be included in the list only if they have an upload ID lexicographically greater than the specified ``upload-id-marker`` .

        

      
      
      :rtype: list(:py:class:`s3.MultipartUpload`)
      :returns: A list of MultipartUpload resources
      

    .. py:method:: limit(**kwargs)

      Creates an iterable up to a specified amount of MultipartUpload resources in the collection.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListMultipartUploads>`_      


      **Request Syntax** 
      ::

        multipart_upload_iterator = bucket.multipart_uploads.limit(
            count=123
        )
      :type count: integer
      :param count: The limit to the number of resources in the iterable.

      
      
      :rtype: list(:py:class:`s3.MultipartUpload`)
      :returns: A list of MultipartUpload resources
      

    .. py:method:: page_size(**kwargs)

      Creates an iterable of all MultipartUpload resources in the collection, but limits the number of items returned by each service call by the specified amount.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListMultipartUploads>`_      


      **Request Syntax** 
      ::

        multipart_upload_iterator = bucket.multipart_uploads.page_size(
            count=123
        )
      :type count: integer
      :param count: The number of items returned by each service call

      
      
      :rtype: list(:py:class:`s3.MultipartUpload`)
      :returns: A list of MultipartUpload resources
      

  .. py:attribute:: object_versions

    A collection of ObjectVersion resources

    .. py:method:: all()

      Creates an iterable of all ObjectVersion resources in the collection.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjectVersions>`_      


      **Request Syntax** 
      ::

        object_version_iterator = bucket.object_versions.all()
        
      
      :rtype: list(:py:class:`s3.ObjectVersion`)
      :returns: A list of ObjectVersion resources
      

    .. py:method:: delete(**kwargs)

      

      This operation enables you to delete multiple objects from a bucket using a single HTTP request. If you know the object keys that you want to delete, then this operation provides a suitable alternative to sending individual delete requests, reducing per-request overhead.

       

      The request contains a list of up to 1000 keys that you want to delete. In the XML, you provide the object key names, and optionally, version IDs if you want to delete a specific version of the object from a versioning-enabled bucket. For each key, Amazon S3 performs a delete operation and returns the result of that delete, success, or failure, in the response. Note that if the object specified in the request is not found, Amazon S3 returns the result as deleted.

       

      The operation supports two modes for the response: verbose and quiet. By default, the operation uses verbose mode in which the response includes the result of deletion of each key in your request. In quiet mode the response includes only keys where the delete operation encountered an error. For a successful deletion, the operation does not return any information about the delete in the response body.

       

      When performing this operation on an MFA Delete enabled bucket, that attempts to delete any versioned objects, you must include an MFA token. If you do not provide one, the entire request will fail, even if there are non-versioned objects you are trying to delete. If you provide an invalid token, whether there are versioned keys in the request or not, the entire Multi-Object Delete request will fail. For information about MFA Delete, see `MFA Delete <https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html#MultiFactorAuthenticationDelete>`__ .

       

      Finally, the Content-MD5 header is required for all Multi-Object Delete requests. Amazon S3 uses the header value to ensure that your request body has not been altered in transit.

       

      The following operations are related to ``DeleteObjects`` :

       

       
      *  CreateMultipartUpload   
       
      *  UploadPart   
       
      *  CompleteMultipartUpload   
       
      *  ListParts   
       
      *  AbortMultipartUpload   
       

      

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteObjects>`_      


      **Request Syntax** 
      ::

        response = bucket.object_versions.delete(
            MFA='string',
            RequestPayer='requester'
        )
      :type MFA: string
      :param MFA: 

        The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA delete enabled.

        

      
      :type RequestPayer: string
      :param RequestPayer: Ignored by COS if present.

      
      
      :rtype: dict
      :returns: 
        
        **Response Syntax** 

        
        ::

          {
              'Deleted': [
                  {
                      'Key': 'string',
                      'VersionId': 'string',
                      'DeleteMarker': True|False,
                      'DeleteMarkerVersionId': 'string'
                  },
              ],
              'RequestCharged': 'requester',
              'Errors': [
                  {
                      'Key': 'string',
                      'VersionId': 'string',
                      'Code': 'string',
                      'Message': 'string'
                  },
              ]
          }
        **Response Structure** 

        

        - *(dict) --* 
          

          - **Deleted** *(list) --* 

            Container element for a successful delete. It identifies the object that was successfully deleted.

            
            

            - *(dict) --* 

              Information about the deleted object.

              
              

              - **Key** *(string) --* 

                The name of the deleted object.

                
              

              - **VersionId** *(string) --* 

                The version ID of the deleted object.

                
              

              - **DeleteMarker** *(boolean) --* 

                Specifies whether the versioned object that was permanently deleted was (true) or was not (false) a delete marker. In a simple DELETE, this header indicates whether (true) or not (false) a delete marker was created.

                
              

              - **DeleteMarkerVersionId** *(string) --* 

                The version ID of the delete marker created as a result of the DELETE operation. If you delete a specific object version, the value returned by this header is the version ID of the object version deleted.

                
          
        
          

          - **RequestCharged** *(string) --* 

            If present, indicates that the requester was successfully charged for the request.

            
          

          - **Errors** *(list) --* 

            Container for a failed delete operation that describes the object that Amazon S3 attempted to delete and the error it encountered.

            
            

            - *(dict) --* 

              Container for all error elements.

              
              

              - **Key** *(string) --* 

                The error key.

                
              

              - **VersionId** *(string) --* 

                The version ID of the error.

                
              

              - **Code** *(string) --* 

                The error code is a string that uniquely identifies an error condition. It is meant to be read and understood by programs that detect and handle errors by type. 

                 

                 **Amazon S3 error codes**  

                 

                 
                * 

                  
                  * *Code:* AccessDenied  
                   
                  * *Description:* Access Denied 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* AccountProblem 
                   
                  * *Description:* There is a problem with your AWS account that prevents the operation from completing successfully. Contact AWS Support for further assistance. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* AllAccessDisabled 
                   
                  * *Description:* All access to this Amazon S3 resource has been disabled. Contact AWS Support for further assistance. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* AmbiguousGrantByEmailAddress 
                   
                  * *Description:* The email address you provided is associated with more than one account. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* AuthorizationHeaderMalformed 
                   
                  * *Description:* The authorization header you provided is invalid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *HTTP Status Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* BadDigest 
                   
                  * *Description:* The Content-MD5 you specified did not match what we received. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* BucketAlreadyExists 
                   
                  * *Description:* The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again. 
                   
                  * *HTTP Status Code:* 409 Conflict 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* BucketAlreadyOwnedByYou 
                   
                  * *Description:* The bucket you tried to create already exists, and you own it. Amazon S3 returns this error in all AWS Regions except in the North Virginia Region. For legacy compatibility, if you re-create an existing bucket that you already own in the North Virginia Region, Amazon S3 returns 200 OK and resets the bucket access control lists (ACLs). 
                   
                  * *Code:* 409 Conflict (in all Regions except the North Virginia Region)  
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* BucketNotEmpty 
                   
                  * *Description:* The bucket you tried to delete is not empty. 
                   
                  * *HTTP Status Code:* 409 Conflict 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* CredentialsNotSupported 
                   
                  * *Description:* This request does not support credentials. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* CrossLocationLoggingProhibited 
                   
                  * *Description:* Cross-location logging not allowed. Buckets in one geographic location cannot log information to a bucket in another location. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* EntityTooSmall 
                   
                  * *Description:* Your proposed upload is smaller than the minimum allowed object size. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* EntityTooLarge 
                   
                  * *Description:* Your proposed upload exceeds the maximum allowed object size. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* ExpiredToken 
                   
                  * *Description:* The provided token has expired. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* IllegalVersioningConfigurationException  
                   
                  * *Description:* Indicates that the versioning configuration specified in the request is invalid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* IncompleteBody 
                   
                  * *Description:* You did not provide the number of bytes specified by the Content-Length HTTP header 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* IncorrectNumberOfFilesInPostRequest 
                   
                  * *Description:* POST requires exactly one file upload per request. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InlineDataTooLarge 
                   
                  * *Description:* Inline data exceeds the maximum allowed size. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InternalError 
                   
                  * *Description:* We encountered an internal error. Please try again. 
                   
                  * *HTTP Status Code:* 500 Internal Server Error 
                   
                  * *SOAP Fault Code Prefix:* Server 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidAccessKeyId 
                   
                  * *Description:* The AWS access key ID you provided does not exist in our records. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidAddressingHeader 
                   
                  * *Description:* You must specify the Anonymous role. 
                   
                  * *HTTP Status Code:* N/A 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidArgument 
                   
                  * *Description:* Invalid Argument 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidBucketName 
                   
                  * *Description:* The specified bucket is not valid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidBucketState 
                   
                  * *Description:* The request is not valid with the current state of the bucket. 
                   
                  * *HTTP Status Code:* 409 Conflict 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidDigest 
                   
                  * *Description:* The Content-MD5 you specified is not valid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidEncryptionAlgorithmError 
                   
                  * *Description:* The encryption request you specified is not valid. The valid value is AES256. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidLocationConstraint 
                   
                  * *Description:* The specified location constraint is not valid. For more information about Regions, see `How to Select a Region for Your Buckets <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro>`__ .  
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidObjectState 
                   
                  * *Description:* The operation is not valid for the current state of the object. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidPart 
                   
                  * *Description:* One or more of the specified parts could not be found. The part might not have been uploaded, or the specified entity tag might not have matched the part's entity tag. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidPartOrder 
                   
                  * *Description:* The list of parts was not in ascending order. Parts list must be specified in order by part number. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidPayer 
                   
                  * *Description:* All access to this object has been disabled. Please contact AWS Support for further assistance. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidPolicyDocument 
                   
                  * *Description:* The content of the form does not meet the conditions specified in the policy document. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRange 
                   
                  * *Description:* The requested range cannot be satisfied. 
                   
                  * *HTTP Status Code:* 416 Requested Range Not Satisfiable 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Please use AWS4-HMAC-SHA256. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* SOAP requests must be made over an HTTPS connection. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Acceleration is not supported for buckets with non-DNS compliant names. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Acceleration is not supported for buckets with periods (.) in their names. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Accelerate endpoint only supports virtual style requests. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Accelerate is not configured on this bucket. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Accelerate is disabled on this bucket. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Acceleration is not supported on this bucket. Contact AWS Support for more information. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Acceleration cannot be enabled on this bucket. Contact AWS Support for more information. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidSecurity 
                   
                  * *Description:* The provided security credentials are not valid. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidSOAPRequest 
                   
                  * *Description:* The SOAP request body is invalid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidStorageClass 
                   
                  * *Description:* The storage class you specified is not valid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidTargetBucketForLogging 
                   
                  * *Description:* The target bucket for logging does not exist, is not owned by you, or does not have the appropriate grants for the log-delivery group.  
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidToken 
                   
                  * *Description:* The provided token is malformed or otherwise invalid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidURI 
                   
                  * *Description:* Couldn't parse the specified URI. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* KeyTooLongError 
                   
                  * *Description:* Your key is too long. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MalformedACLError 
                   
                  * *Description:* The XML you provided was not well-formed or did not validate against our published schema. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MalformedPOSTRequest  
                   
                  * *Description:* The body of your POST request is not well-formed multipart/form-data. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MalformedXML 
                   
                  * *Description:* This happens when the user sends malformed XML (XML that doesn't conform to the published XSD) for the configuration. The error message is, "The XML you provided was not well-formed or did not validate against our published schema."  
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MaxMessageLengthExceeded 
                   
                  * *Description:* Your request was too big. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MaxPostPreDataLengthExceededError 
                   
                  * *Description:* Your POST request fields preceding the upload file were too large. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MetadataTooLarge 
                   
                  * *Description:* Your metadata headers exceed the maximum allowed metadata size. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MethodNotAllowed 
                   
                  * *Description:* The specified method is not allowed against this resource. 
                   
                  * *HTTP Status Code:* 405 Method Not Allowed 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MissingAttachment 
                   
                  * *Description:* A SOAP attachment was expected, but none were found. 
                   
                  * *HTTP Status Code:* N/A 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MissingContentLength 
                   
                  * *Description:* You must provide the Content-Length HTTP header. 
                   
                  * *HTTP Status Code:* 411 Length Required 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MissingRequestBodyError 
                   
                  * *Description:* This happens when the user sends an empty XML document as a request. The error message is, "Request body is empty."  
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MissingSecurityElement 
                   
                  * *Description:* The SOAP 1.1 request is missing a security element. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MissingSecurityHeader 
                   
                  * *Description:* Your request is missing a required header. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoLoggingStatusForKey 
                   
                  * *Description:* There is no such thing as a logging status subresource for a key. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoSuchBucket 
                   
                  * *Description:* The specified bucket does not exist. 
                   
                  * *HTTP Status Code:* 404 Not Found 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoSuchBucketPolicy 
                   
                  * *Description:* The specified bucket does not have a bucket policy. 
                   
                  * *HTTP Status Code:* 404 Not Found 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoSuchKey 
                   
                  * *Description:* The specified key does not exist. 
                   
                  * *HTTP Status Code:* 404 Not Found 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoSuchLifecycleConfiguration 
                   
                  * *Description:* The lifecycle configuration does not exist.  
                   
                  * *HTTP Status Code:* 404 Not Found 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoSuchUpload 
                   
                  * *Description:* The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed. 
                   
                  * *HTTP Status Code:* 404 Not Found 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoSuchVersion  
                   
                  * *Description:* Indicates that the version ID specified in the request does not match an existing version. 
                   
                  * *HTTP Status Code:* 404 Not Found 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NotImplemented 
                   
                  * *Description:* A header you provided implies functionality that is not implemented. 
                   
                  * *HTTP Status Code:* 501 Not Implemented 
                   
                  * *SOAP Fault Code Prefix:* Server 
                   

                 
                 
                * 

                  
                  * *Code:* NotSignedUp 
                   
                  * *Description:* Your account is not signed up for the Amazon S3 service. You must sign up before you can use Amazon S3. You can sign up at the following URL: https://aws.amazon.com/s3 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* OperationAborted 
                   
                  * *Description:* A conflicting conditional operation is currently in progress against this resource. Try again. 
                   
                  * *HTTP Status Code:* 409 Conflict 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* PermanentRedirect 
                   
                  * *Description:* The bucket you are attempting to access must be addressed using the specified endpoint. Send all future requests to this endpoint. 
                   
                  * *HTTP Status Code:* 301 Moved Permanently 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* PreconditionFailed 
                   
                  * *Description:* At least one of the preconditions you specified did not hold. 
                   
                  * *HTTP Status Code:* 412 Precondition Failed 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* Redirect 
                   
                  * *Description:* Temporary redirect. 
                   
                  * *HTTP Status Code:* 307 Moved Temporarily 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* RestoreAlreadyInProgress 
                   
                  * *Description:* Object restore is already in progress. 
                   
                  * *HTTP Status Code:* 409 Conflict 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* RequestIsNotMultiPartContent 
                   
                  * *Description:* Bucket POST must be of the enclosure-type multipart/form-data. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* RequestTimeout 
                   
                  * *Description:* Your socket connection to the server was not read from or written to within the timeout period. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* RequestTimeTooSkewed 
                   
                  * *Description:* The difference between the request time and the server's time is too large. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* RequestTorrentOfBucketError 
                   
                  * *Description:* Requesting the torrent file of a bucket is not permitted. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* SignatureDoesNotMatch 
                   
                  * *Description:* The request signature we calculated does not match the signature you provided. Check your AWS secret access key and signing method. For more information, see `REST Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html>`__ and `SOAP Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/SOAPAuthentication.html>`__ for details. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* ServiceUnavailable 
                   
                  * *Description:* Reduce your request rate. 
                   
                  * *HTTP Status Code:* 503 Service Unavailable 
                   
                  * *SOAP Fault Code Prefix:* Server 
                   

                 
                 
                * 

                  
                  * *Code:* SlowDown 
                   
                  * *Description:* Reduce your request rate. 
                   
                  * *HTTP Status Code:* 503 Slow Down 
                   
                  * *SOAP Fault Code Prefix:* Server 
                   

                 
                 
                * 

                  
                  * *Code:* TemporaryRedirect 
                   
                  * *Description:* You are being redirected to the bucket while DNS updates. 
                   
                  * *HTTP Status Code:* 307 Moved Temporarily 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* TokenRefreshRequired 
                   
                  * *Description:* The provided token must be refreshed. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* TooManyBuckets 
                   
                  * *Description:* You have attempted to create more buckets than allowed. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* UnexpectedContent 
                   
                  * *Description:* This request does not support content. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* UnresolvableGrantByEmailAddress 
                   
                  * *Description:* The email address you provided does not match any account on record. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* UserKeyMustBeSpecified 
                   
                  * *Description:* The bucket POST must contain the specified field name. If it is specified, check the order of the fields. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 

                 

                

                
              

              - **Message** *(string) --* 

                The error message contains a generic description of the error condition in English. It is intended for a human audience. Simple programs display the message directly to the end user if they encounter an error condition they don't know how or don't care to handle. Sophisticated programs with more exhaustive error handling and proper internationalization are more likely to ignore the error message.

                
          
        
      

    .. py:method:: filter(**kwargs)

      Creates an iterable of all ObjectVersion resources in the collection filtered by kwargs passed to method.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjectVersions>`_      


      **Request Syntax** 
      ::

        object_version_iterator = bucket.object_versions.filter(
            Delimiter='string',
            EncodingType='url',
            KeyMarker='string',
            MaxKeys=123,
            Prefix='string',
            VersionIdMarker='string'
        )
      :type Delimiter: string
      :param Delimiter: 

        A delimiter is a character that you specify to group keys. All keys that contain the same string between the ``prefix`` and the first occurrence of the delimiter are grouped under a single result element in CommonPrefixes. These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response.

        

      
      :type EncodingType: string
      :param EncodingType: 

        Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.

        

      
      :type KeyMarker: string
      :param KeyMarker: 

        Specifies the key to start with when listing objects in a bucket.

        

      
      :type MaxKeys: integer
      :param MaxKeys: 

        Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more. If additional keys satisfy the search criteria, but were not returned because max-keys was exceeded, the response contains <isTruncated>true</isTruncated>. To return the additional keys, see key-marker and version-id-marker.

        

      
      :type Prefix: string
      :param Prefix: 

        Use this parameter to select only those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different groupings of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.) You can use prefix with delimiter to roll up numerous objects into a single result under CommonPrefixes. 

        

      
      :type VersionIdMarker: string
      :param VersionIdMarker: 

        Specifies the object version you want to start listing from.

        

      
      
      :rtype: list(:py:class:`s3.ObjectVersion`)
      :returns: A list of ObjectVersion resources
      

    .. py:method:: limit(**kwargs)

      Creates an iterable up to a specified amount of ObjectVersion resources in the collection.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjectVersions>`_      


      **Request Syntax** 
      ::

        object_version_iterator = bucket.object_versions.limit(
            count=123
        )
      :type count: integer
      :param count: The limit to the number of resources in the iterable.

      
      
      :rtype: list(:py:class:`s3.ObjectVersion`)
      :returns: A list of ObjectVersion resources
      

    .. py:method:: page_size(**kwargs)

      Creates an iterable of all ObjectVersion resources in the collection, but limits the number of items returned by each service call by the specified amount.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjectVersions>`_      


      **Request Syntax** 
      ::

        object_version_iterator = bucket.object_versions.page_size(
            count=123
        )
      :type count: integer
      :param count: The number of items returned by each service call

      
      
      :rtype: list(:py:class:`s3.ObjectVersion`)
      :returns: A list of ObjectVersion resources
      

  .. py:attribute:: objects

    A collection of ObjectSummary resources

    .. py:method:: all()

      Creates an iterable of all ObjectSummary resources in the collection.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjects>`_      


      **Request Syntax** 
      ::

        object_summary_iterator = bucket.objects.all()
        
      
      :rtype: list(:py:class:`s3.ObjectSummary`)
      :returns: A list of ObjectSummary resources
      

    .. py:method:: delete(**kwargs)

      

      This operation enables you to delete multiple objects from a bucket using a single HTTP request. If you know the object keys that you want to delete, then this operation provides a suitable alternative to sending individual delete requests, reducing per-request overhead.

       

      The request contains a list of up to 1000 keys that you want to delete. In the XML, you provide the object key names, and optionally, version IDs if you want to delete a specific version of the object from a versioning-enabled bucket. For each key, Amazon S3 performs a delete operation and returns the result of that delete, success, or failure, in the response. Note that if the object specified in the request is not found, Amazon S3 returns the result as deleted.

       

      The operation supports two modes for the response: verbose and quiet. By default, the operation uses verbose mode in which the response includes the result of deletion of each key in your request. In quiet mode the response includes only keys where the delete operation encountered an error. For a successful deletion, the operation does not return any information about the delete in the response body.

       

      When performing this operation on an MFA Delete enabled bucket, that attempts to delete any versioned objects, you must include an MFA token. If you do not provide one, the entire request will fail, even if there are non-versioned objects you are trying to delete. If you provide an invalid token, whether there are versioned keys in the request or not, the entire Multi-Object Delete request will fail. For information about MFA Delete, see `MFA Delete <https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html#MultiFactorAuthenticationDelete>`__ .

       

      Finally, the Content-MD5 header is required for all Multi-Object Delete requests. Amazon S3 uses the header value to ensure that your request body has not been altered in transit.

       

      The following operations are related to ``DeleteObjects`` :

       

       
      *  CreateMultipartUpload   
       
      *  UploadPart   
       
      *  CompleteMultipartUpload   
       
      *  ListParts   
       
      *  AbortMultipartUpload   
       

      

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteObjects>`_      


      **Request Syntax** 
      ::

        response = bucket.objects.delete(
            MFA='string',
            RequestPayer='requester'
        )
      :type MFA: string
      :param MFA: 

        The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA delete enabled.

        

      
      :type RequestPayer: string
      :param RequestPayer: Ignored by COS if present.

      
      
      :rtype: dict
      :returns: 
        
        **Response Syntax** 

        
        ::

          {
              'Deleted': [
                  {
                      'Key': 'string',
                      'VersionId': 'string',
                      'DeleteMarker': True|False,
                      'DeleteMarkerVersionId': 'string'
                  },
              ],
              'RequestCharged': 'requester',
              'Errors': [
                  {
                      'Key': 'string',
                      'VersionId': 'string',
                      'Code': 'string',
                      'Message': 'string'
                  },
              ]
          }
        **Response Structure** 

        

        - *(dict) --* 
          

          - **Deleted** *(list) --* 

            Container element for a successful delete. It identifies the object that was successfully deleted.

            
            

            - *(dict) --* 

              Information about the deleted object.

              
              

              - **Key** *(string) --* 

                The name of the deleted object.

                
              

              - **VersionId** *(string) --* 

                The version ID of the deleted object.

                
              

              - **DeleteMarker** *(boolean) --* 

                Specifies whether the versioned object that was permanently deleted was (true) or was not (false) a delete marker. In a simple DELETE, this header indicates whether (true) or not (false) a delete marker was created.

                
              

              - **DeleteMarkerVersionId** *(string) --* 

                The version ID of the delete marker created as a result of the DELETE operation. If you delete a specific object version, the value returned by this header is the version ID of the object version deleted.

                
          
        
          

          - **RequestCharged** *(string) --* 

            If present, indicates that the requester was successfully charged for the request.

            
          

          - **Errors** *(list) --* 

            Container for a failed delete operation that describes the object that Amazon S3 attempted to delete and the error it encountered.

            
            

            - *(dict) --* 

              Container for all error elements.

              
              

              - **Key** *(string) --* 

                The error key.

                
              

              - **VersionId** *(string) --* 

                The version ID of the error.

                
              

              - **Code** *(string) --* 

                The error code is a string that uniquely identifies an error condition. It is meant to be read and understood by programs that detect and handle errors by type. 

                 

                 **Amazon S3 error codes**  

                 

                 
                * 

                  
                  * *Code:* AccessDenied  
                   
                  * *Description:* Access Denied 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* AccountProblem 
                   
                  * *Description:* There is a problem with your AWS account that prevents the operation from completing successfully. Contact AWS Support for further assistance. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* AllAccessDisabled 
                   
                  * *Description:* All access to this Amazon S3 resource has been disabled. Contact AWS Support for further assistance. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* AmbiguousGrantByEmailAddress 
                   
                  * *Description:* The email address you provided is associated with more than one account. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* AuthorizationHeaderMalformed 
                   
                  * *Description:* The authorization header you provided is invalid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *HTTP Status Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* BadDigest 
                   
                  * *Description:* The Content-MD5 you specified did not match what we received. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* BucketAlreadyExists 
                   
                  * *Description:* The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again. 
                   
                  * *HTTP Status Code:* 409 Conflict 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* BucketAlreadyOwnedByYou 
                   
                  * *Description:* The bucket you tried to create already exists, and you own it. Amazon S3 returns this error in all AWS Regions except in the North Virginia Region. For legacy compatibility, if you re-create an existing bucket that you already own in the North Virginia Region, Amazon S3 returns 200 OK and resets the bucket access control lists (ACLs). 
                   
                  * *Code:* 409 Conflict (in all Regions except the North Virginia Region)  
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* BucketNotEmpty 
                   
                  * *Description:* The bucket you tried to delete is not empty. 
                   
                  * *HTTP Status Code:* 409 Conflict 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* CredentialsNotSupported 
                   
                  * *Description:* This request does not support credentials. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* CrossLocationLoggingProhibited 
                   
                  * *Description:* Cross-location logging not allowed. Buckets in one geographic location cannot log information to a bucket in another location. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* EntityTooSmall 
                   
                  * *Description:* Your proposed upload is smaller than the minimum allowed object size. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* EntityTooLarge 
                   
                  * *Description:* Your proposed upload exceeds the maximum allowed object size. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* ExpiredToken 
                   
                  * *Description:* The provided token has expired. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* IllegalVersioningConfigurationException  
                   
                  * *Description:* Indicates that the versioning configuration specified in the request is invalid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* IncompleteBody 
                   
                  * *Description:* You did not provide the number of bytes specified by the Content-Length HTTP header 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* IncorrectNumberOfFilesInPostRequest 
                   
                  * *Description:* POST requires exactly one file upload per request. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InlineDataTooLarge 
                   
                  * *Description:* Inline data exceeds the maximum allowed size. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InternalError 
                   
                  * *Description:* We encountered an internal error. Please try again. 
                   
                  * *HTTP Status Code:* 500 Internal Server Error 
                   
                  * *SOAP Fault Code Prefix:* Server 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidAccessKeyId 
                   
                  * *Description:* The AWS access key ID you provided does not exist in our records. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidAddressingHeader 
                   
                  * *Description:* You must specify the Anonymous role. 
                   
                  * *HTTP Status Code:* N/A 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidArgument 
                   
                  * *Description:* Invalid Argument 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidBucketName 
                   
                  * *Description:* The specified bucket is not valid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidBucketState 
                   
                  * *Description:* The request is not valid with the current state of the bucket. 
                   
                  * *HTTP Status Code:* 409 Conflict 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidDigest 
                   
                  * *Description:* The Content-MD5 you specified is not valid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidEncryptionAlgorithmError 
                   
                  * *Description:* The encryption request you specified is not valid. The valid value is AES256. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidLocationConstraint 
                   
                  * *Description:* The specified location constraint is not valid. For more information about Regions, see `How to Select a Region for Your Buckets <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro>`__ .  
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidObjectState 
                   
                  * *Description:* The operation is not valid for the current state of the object. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidPart 
                   
                  * *Description:* One or more of the specified parts could not be found. The part might not have been uploaded, or the specified entity tag might not have matched the part's entity tag. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidPartOrder 
                   
                  * *Description:* The list of parts was not in ascending order. Parts list must be specified in order by part number. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidPayer 
                   
                  * *Description:* All access to this object has been disabled. Please contact AWS Support for further assistance. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidPolicyDocument 
                   
                  * *Description:* The content of the form does not meet the conditions specified in the policy document. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRange 
                   
                  * *Description:* The requested range cannot be satisfied. 
                   
                  * *HTTP Status Code:* 416 Requested Range Not Satisfiable 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Please use AWS4-HMAC-SHA256. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* SOAP requests must be made over an HTTPS connection. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Acceleration is not supported for buckets with non-DNS compliant names. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Acceleration is not supported for buckets with periods (.) in their names. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Accelerate endpoint only supports virtual style requests. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Accelerate is not configured on this bucket. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Accelerate is disabled on this bucket. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Acceleration is not supported on this bucket. Contact AWS Support for more information. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidRequest 
                   
                  * *Description:* Amazon S3 Transfer Acceleration cannot be enabled on this bucket. Contact AWS Support for more information. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *Code:* N/A 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidSecurity 
                   
                  * *Description:* The provided security credentials are not valid. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidSOAPRequest 
                   
                  * *Description:* The SOAP request body is invalid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidStorageClass 
                   
                  * *Description:* The storage class you specified is not valid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidTargetBucketForLogging 
                   
                  * *Description:* The target bucket for logging does not exist, is not owned by you, or does not have the appropriate grants for the log-delivery group.  
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidToken 
                   
                  * *Description:* The provided token is malformed or otherwise invalid. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* InvalidURI 
                   
                  * *Description:* Couldn't parse the specified URI. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* KeyTooLongError 
                   
                  * *Description:* Your key is too long. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MalformedACLError 
                   
                  * *Description:* The XML you provided was not well-formed or did not validate against our published schema. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MalformedPOSTRequest  
                   
                  * *Description:* The body of your POST request is not well-formed multipart/form-data. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MalformedXML 
                   
                  * *Description:* This happens when the user sends malformed XML (XML that doesn't conform to the published XSD) for the configuration. The error message is, "The XML you provided was not well-formed or did not validate against our published schema."  
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MaxMessageLengthExceeded 
                   
                  * *Description:* Your request was too big. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MaxPostPreDataLengthExceededError 
                   
                  * *Description:* Your POST request fields preceding the upload file were too large. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MetadataTooLarge 
                   
                  * *Description:* Your metadata headers exceed the maximum allowed metadata size. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MethodNotAllowed 
                   
                  * *Description:* The specified method is not allowed against this resource. 
                   
                  * *HTTP Status Code:* 405 Method Not Allowed 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MissingAttachment 
                   
                  * *Description:* A SOAP attachment was expected, but none were found. 
                   
                  * *HTTP Status Code:* N/A 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MissingContentLength 
                   
                  * *Description:* You must provide the Content-Length HTTP header. 
                   
                  * *HTTP Status Code:* 411 Length Required 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MissingRequestBodyError 
                   
                  * *Description:* This happens when the user sends an empty XML document as a request. The error message is, "Request body is empty."  
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MissingSecurityElement 
                   
                  * *Description:* The SOAP 1.1 request is missing a security element. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* MissingSecurityHeader 
                   
                  * *Description:* Your request is missing a required header. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoLoggingStatusForKey 
                   
                  * *Description:* There is no such thing as a logging status subresource for a key. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoSuchBucket 
                   
                  * *Description:* The specified bucket does not exist. 
                   
                  * *HTTP Status Code:* 404 Not Found 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoSuchBucketPolicy 
                   
                  * *Description:* The specified bucket does not have a bucket policy. 
                   
                  * *HTTP Status Code:* 404 Not Found 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoSuchKey 
                   
                  * *Description:* The specified key does not exist. 
                   
                  * *HTTP Status Code:* 404 Not Found 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoSuchLifecycleConfiguration 
                   
                  * *Description:* The lifecycle configuration does not exist.  
                   
                  * *HTTP Status Code:* 404 Not Found 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoSuchUpload 
                   
                  * *Description:* The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed. 
                   
                  * *HTTP Status Code:* 404 Not Found 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NoSuchVersion  
                   
                  * *Description:* Indicates that the version ID specified in the request does not match an existing version. 
                   
                  * *HTTP Status Code:* 404 Not Found 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* NotImplemented 
                   
                  * *Description:* A header you provided implies functionality that is not implemented. 
                   
                  * *HTTP Status Code:* 501 Not Implemented 
                   
                  * *SOAP Fault Code Prefix:* Server 
                   

                 
                 
                * 

                  
                  * *Code:* NotSignedUp 
                   
                  * *Description:* Your account is not signed up for the Amazon S3 service. You must sign up before you can use Amazon S3. You can sign up at the following URL: https://aws.amazon.com/s3 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* OperationAborted 
                   
                  * *Description:* A conflicting conditional operation is currently in progress against this resource. Try again. 
                   
                  * *HTTP Status Code:* 409 Conflict 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* PermanentRedirect 
                   
                  * *Description:* The bucket you are attempting to access must be addressed using the specified endpoint. Send all future requests to this endpoint. 
                   
                  * *HTTP Status Code:* 301 Moved Permanently 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* PreconditionFailed 
                   
                  * *Description:* At least one of the preconditions you specified did not hold. 
                   
                  * *HTTP Status Code:* 412 Precondition Failed 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* Redirect 
                   
                  * *Description:* Temporary redirect. 
                   
                  * *HTTP Status Code:* 307 Moved Temporarily 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* RestoreAlreadyInProgress 
                   
                  * *Description:* Object restore is already in progress. 
                   
                  * *HTTP Status Code:* 409 Conflict 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* RequestIsNotMultiPartContent 
                   
                  * *Description:* Bucket POST must be of the enclosure-type multipart/form-data. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* RequestTimeout 
                   
                  * *Description:* Your socket connection to the server was not read from or written to within the timeout period. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* RequestTimeTooSkewed 
                   
                  * *Description:* The difference between the request time and the server's time is too large. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* RequestTorrentOfBucketError 
                   
                  * *Description:* Requesting the torrent file of a bucket is not permitted. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* SignatureDoesNotMatch 
                   
                  * *Description:* The request signature we calculated does not match the signature you provided. Check your AWS secret access key and signing method. For more information, see `REST Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html>`__ and `SOAP Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/SOAPAuthentication.html>`__ for details. 
                   
                  * *HTTP Status Code:* 403 Forbidden 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* ServiceUnavailable 
                   
                  * *Description:* Reduce your request rate. 
                   
                  * *HTTP Status Code:* 503 Service Unavailable 
                   
                  * *SOAP Fault Code Prefix:* Server 
                   

                 
                 
                * 

                  
                  * *Code:* SlowDown 
                   
                  * *Description:* Reduce your request rate. 
                   
                  * *HTTP Status Code:* 503 Slow Down 
                   
                  * *SOAP Fault Code Prefix:* Server 
                   

                 
                 
                * 

                  
                  * *Code:* TemporaryRedirect 
                   
                  * *Description:* You are being redirected to the bucket while DNS updates. 
                   
                  * *HTTP Status Code:* 307 Moved Temporarily 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* TokenRefreshRequired 
                   
                  * *Description:* The provided token must be refreshed. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* TooManyBuckets 
                   
                  * *Description:* You have attempted to create more buckets than allowed. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* UnexpectedContent 
                   
                  * *Description:* This request does not support content. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* UnresolvableGrantByEmailAddress 
                   
                  * *Description:* The email address you provided does not match any account on record. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 
                * 

                  
                  * *Code:* UserKeyMustBeSpecified 
                   
                  * *Description:* The bucket POST must contain the specified field name. If it is specified, check the order of the fields. 
                   
                  * *HTTP Status Code:* 400 Bad Request 
                   
                  * *SOAP Fault Code Prefix:* Client 
                   

                 
                 

                 

                

                
              

              - **Message** *(string) --* 

                The error message contains a generic description of the error condition in English. It is intended for a human audience. Simple programs display the message directly to the end user if they encounter an error condition they don't know how or don't care to handle. Sophisticated programs with more exhaustive error handling and proper internationalization are more likely to ignore the error message.

                
          
        
      

    .. py:method:: filter(**kwargs)

      Creates an iterable of all ObjectSummary resources in the collection filtered by kwargs passed to method.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjects>`_      


      **Request Syntax** 
      ::

        object_summary_iterator = bucket.objects.filter(
            Delimiter='string',
            EncodingType='url',
            Marker='string',
            MaxKeys=123,
            MirrorDestination='string',
            Prefix='string',
            RequestPayer='requester'
        )
      :type Delimiter: string
      :param Delimiter: 

        A delimiter is a character you use to group keys.

        

      
      :type EncodingType: string
      :param EncodingType: 

        Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.

        

      
      :type Marker: string
      :param Marker: 

        Specifies the key to start with when listing objects in a bucket.

        

      
      :type MaxKeys: integer
      :param MaxKeys: 

        Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.

        

      
      :type MirrorDestination: string
      :param MirrorDestination: Mirror source for object reads.

      
      :type Prefix: string
      :param Prefix: 

        Limits the response to keys that begin with the specified prefix.

        

      
      :type RequestPayer: string
      :param RequestPayer: Ignored by COS if present.

      
      
      :rtype: list(:py:class:`s3.ObjectSummary`)
      :returns: A list of ObjectSummary resources
      

    .. py:method:: limit(**kwargs)

      Creates an iterable up to a specified amount of ObjectSummary resources in the collection.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjects>`_      


      **Request Syntax** 
      ::

        object_summary_iterator = bucket.objects.limit(
            count=123
        )
      :type count: integer
      :param count: The limit to the number of resources in the iterable.

      
      
      :rtype: list(:py:class:`s3.ObjectSummary`)
      :returns: A list of ObjectSummary resources
      

    .. py:method:: page_size(**kwargs)

      Creates an iterable of all ObjectSummary resources in the collection, but limits the number of items returned by each service call by the specified amount.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjects>`_      


      **Request Syntax** 
      ::

        object_summary_iterator = bucket.objects.page_size(
            count=123
        )
      :type count: integer
      :param count: The number of items returned by each service call

      
      
      :rtype: list(:py:class:`s3.ObjectSummary`)
      :returns: A list of ObjectSummary resources
      
  .. rst-class:: admonition-title
  
  Waiters
  
  Waiters provide an interface to wait for a resource to reach a specific state.
  For more information about waiters refer to the :ref:`Resources Introduction Guide<waiters_intro>`.
  

  .. py:method:: wait_until_exists()

    Waits until this Bucket is exists. This method calls :py:meth:`S3.Waiter.bucket_exists.wait` which polls. :py:meth:`S3.Client.head_bucket` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadBucket>`_    


    **Request Syntax** 
    ::

      bucket.wait_until_exists()
      
    :returns: None

  .. py:method:: wait_until_not_exists()

    Waits until this Bucket is not exists. This method calls :py:meth:`S3.Waiter.bucket_not_exists.wait` which polls. :py:meth:`S3.Client.head_bucket` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadBucket>`_    


    **Request Syntax** 
    ::

      bucket.wait_until_not_exists()
      
    :returns: None

=========
BucketAcl
=========



.. py:class:: S3.BucketAcl(bucket_name)

  A resource representing an Amazon Simple Storage Service (S3) BucketAcl::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    bucket_acl = s3.BucketAcl('bucket_name')

  :type bucket_name: string
  :param bucket_name: The BucketAcl's bucket_name identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  These are the resource's available attributes:
  
  *   :py:attr:`grants`

  
  *   :py:attr:`owner`

  
  These are the resource's available actions:
  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`load()`

  
  *   :py:meth:`put()`

  
  *   :py:meth:`reload()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`Bucket()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The BucketAcl's bucket_name identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: grants

    

    - *(list) --* 

      A list of grants.

      
      

      - *(dict) --* 

        Container for grant information.

        
        

        - **Grantee** *(dict) --* 

          The person being granted permissions.

          
          

          - **DisplayName** *(string) --* 

            Screen name of the grantee.

            
          

          - **EmailAddress** *(string) --* 

            Email address of the grantee.

            
          

          - **ID** *(string) --* 

            The canonical user ID of the grantee.

            
          

          - **Type** *(string) --* 

            Type of grantee

            
          

          - **URI** *(string) --* 

            URI of the grantee group.

            
      
        

        - **Permission** *(string) --* 

          Specifies the permission given to the grantee.

          
    
  

  .. py:attribute:: owner

    

    - *(dict) --* 

      Container for the bucket owner's display name and ID.

      
      

      - **DisplayName** *(string) --* 

        Container for the display name of the owner.

        
      

      - **ID** *(string) --* 

        Container for the ID of the owner.

        
  
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: load()

    Calls :py:meth:`S3.Client.get_bucket_acl` to update the attributes of the BucketAcl resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_acl.load()
    :returns: None

  .. py:method:: put(**kwargs)

    

    Sets the permissions on an existing bucket using access control lists (ACL). For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ . To set the ACL of a bucket, you must have ``WRITE_ACP`` permission.

     

    You can use one of the following two ways to set a bucket's permissions:

     

     
    * Specify the ACL in the request body 
     
    * Specify permissions using request headers 
     

     

    .. note::

       

      You cannot specify access permission using both the body and the request headers.

       

     

    Depending on your application needs, you may choose to set the ACL on a bucket using either the request body or the headers. For example, if you have an existing application that updates a bucket ACL using the request body, then you can continue to use that approach.

     

     **Access Permissions**  

     

    You can set access permissions using one of the following methods:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. Amazon S3 supports a set of predefined ACLs, known as *canned ACLs* . Each canned ACL has a predefined set of grantees and permissions. Specify the canned ACL name as the value of ``x-amz-acl`` . If you use this header, you cannot use other access control-specific headers in your request. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. When using these headers, you specify explicit access permissions and grantees (AWS accounts or Amazon S3 groups) who will receive the permission. If you use these ACL-specific headers, you cannot use the ``x-amz-acl`` header to set a canned ACL. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . You specify each grantee as a type=value pair, where the type is one of the following: 

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-write`` header grants create, overwrite, and delete objects permission to LogDelivery group predefined by Amazon S3 and two AWS accounts identified by their email addresses.

     

     ``x-amz-grant-write: uri="http://acs.amazonaws.com/groups/s3/LogDelivery", emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

     

     **Grantee Values**  

     

    You can specify the person (grantee) to whom you're assigning access rights (using request elements) in the following ways:

     

     
    * By Email address:  ``<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="AmazonCustomerByEmail"><EmailAddress><>Grantees@email.com<></EmailAddress>lt;/Grantee>``   The grantee is resolved to the CanonicalUser and, in a response to a GET Object acl request, appears as the CanonicalUser. 
     
    * By the person's ID:  ``<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser"><ID><>ID<></ID><DisplayName><>GranteesEmail<></DisplayName> </Grantee>``   DisplayName is optional and ignored in the request 
     
    * By URI:  ``<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Group"><URI><>http://acs.amazonaws.com/groups/global/AuthenticatedUsers<></URI></Grantee>``   
     

     

     **Related Resources**  

     

     
    *  CreateBucket   
     
    *  DeleteBucket   
     
    *  GetObjectAcl   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketAcl>`_    


    **Request Syntax** 
    ::

      response = bucket_acl.put(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read',
          AccessControlPolicy={
              'Grants': [
                  {
                      'Grantee': {
                          'DisplayName': 'string',
                          'EmailAddress': 'string',
                          'ID': 'string',
                          'Type': 'CanonicalUser'|'AmazonCustomerByEmail'|'Group',
                          'URI': 'string'
                      },
                      'Permission': 'FULL_CONTROL'|'WRITE'|'WRITE_ACP'|'READ'|'READ_ACP'
                  },
              ],
              'Owner': {
                  'DisplayName': 'string',
                  'ID': 'string'
              }
          },
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWrite='string',
          GrantWriteACP='string'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the bucket.

      

    
    :type AccessControlPolicy: dict
    :param AccessControlPolicy: 

      Contains the elements that set the ACL permissions for an object per grantee.

      

    
      - **Grants** *(list) --* 

        A list of grants.

        

      
        - *(dict) --* 

          Container for grant information.

          

        
          - **Grantee** *(dict) --* 

            The person being granted permissions.

            

          
            - **DisplayName** *(string) --* 

              Screen name of the grantee.

              

            
            - **EmailAddress** *(string) --* 

              Email address of the grantee.

              

            
            - **ID** *(string) --* 

              The canonical user ID of the grantee.

              

            
            - **Type** *(string) --* **[REQUIRED]** 

              Type of grantee

              

            
            - **URI** *(string) --* 

              URI of the grantee group.

              

            
          
          - **Permission** *(string) --* 

            Specifies the permission given to the grantee.

            

          
        
    
      - **Owner** *(dict) --* 

        Container for the bucket owner's display name and ID.

        

      
        - **DisplayName** *(string) --* 

          Container for the display name of the owner.

          

        
        - **ID** *(string) --* 

          Container for the ID of the owner.

          

        
      
    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to list the objects in the bucket.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the bucket ACL.

      

    
    :type GrantWrite: string
    :param GrantWrite: 

      Allows grantee to create, overwrite, and delete any object in the bucket.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable bucket.

      

    
    
    :returns: None

  .. py:method:: reload()

    Calls :py:meth:`S3.Client.get_bucket_acl` to update the attributes of the BucketAcl resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_acl.reload()
    :returns: None
  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: Bucket()

    Creates a Bucket resource.::

      bucket = bucket_acl.Bucket()

    
    :rtype: :py:class:`S3.Bucket`
    :returns: A Bucket resource
    

==========
BucketCors
==========



.. py:class:: S3.BucketCors(bucket_name)

  A resource representing an Amazon Simple Storage Service (S3) BucketCors::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    bucket_cors = s3.BucketCors('bucket_name')

  :type bucket_name: string
  :param bucket_name: The BucketCors's bucket_name identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  These are the resource's available attributes:
  
  *   :py:attr:`cors_rules`

  
  These are the resource's available actions:
  
  *   :py:meth:`delete()`

  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`load()`

  
  *   :py:meth:`put()`

  
  *   :py:meth:`reload()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`Bucket()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The BucketCors's bucket_name identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: cors_rules

    

    - *(list) --* 

      A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.

      
      

      - *(dict) --* 

        Specifies a cross-origin access rule for an Amazon S3 bucket.

        
        

        - **AllowedHeaders** *(list) --* 

          Headers that are specified in the ``Access-Control-Request-Headers`` header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed.

          
          

          - *(string) --* 
      
        

        - **AllowedMethods** *(list) --* 

          An HTTP method that you allow the origin to execute. Valid values are ``GET`` , ``PUT`` , ``HEAD`` , ``POST`` , and ``DELETE`` .

          
          

          - *(string) --* 
      
        

        - **AllowedOrigins** *(list) --* 

          One or more origins you want customers to be able to access the bucket from.

          
          

          - *(string) --* 
      
        

        - **ExposeHeaders** *(list) --* 

          One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript ``XMLHttpRequest`` object).

          
          

          - *(string) --* 
      
        

        - **MaxAgeSeconds** *(integer) --* 

          The time in seconds that your browser is to cache the preflight response for the specified resource.

          
    
  
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: delete()

    

    Deletes the ``cors`` configuration information set for the bucket.

     

    To use this operation, you must have permission to perform the ``s3:PutBucketCORS`` action. The bucket owner has this permission by default and can grant this permission to others. 

     

    For information about ``cors`` , see `Enabling Cross-Origin Resource Sharing <https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

     **Related Resources:**  

     

     
    * 
     
    *  RESTOPTIONSobject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketCors>`_    


    **Request Syntax** 
    ::

      response = bucket_cors.delete()
      
    
    :returns: None

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: load()

    Calls :py:meth:`S3.Client.get_bucket_cors` to update the attributes of the BucketCors resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_cors.load()
    :returns: None

  .. py:method:: put(**kwargs)

    

    Sets the ``cors`` configuration for your bucket. If the configuration exists, Amazon S3 replaces it.

     

    To use this operation, you must be allowed to perform the ``s3:PutBucketCORS`` action. By default, the bucket owner has this permission and can grant it to others.

     

    You set this configuration on a bucket so that the bucket can service cross-origin requests. For example, you might want to enable a request whose origin is ``http://www.example.com`` to access your Amazon S3 bucket at ``my.example.bucket.com`` by using the browser's ``XMLHttpRequest`` capability.

     

    To enable cross-origin resource sharing (CORS) on a bucket, you add the ``cors`` subresource to the bucket. The ``cors`` subresource is an XML document in which you configure rules that identify origins and the HTTP methods that can be executed on your bucket. The document is limited to 64 KB in size. 

     

    When Amazon S3 receives a cross-origin request (or a pre-flight OPTIONS request) against a bucket, it evaluates the ``cors`` configuration on the bucket and uses the first ``CORSRule`` rule that matches the incoming browser request to enable a cross-origin request. For a rule to match, the following conditions must be met:

     

     
    * The request's ``Origin`` header must match ``AllowedOrigin`` elements. 
     
    * The request method (for example, GET, PUT, HEAD, and so on) or the ``Access-Control-Request-Method`` header in case of a pre-flight ``OPTIONS`` request must be one of the ``AllowedMethod`` elements.  
     
    * Every header specified in the ``Access-Control-Request-Headers`` request header of a pre-flight request must match an ``AllowedHeader`` element.  
     

     

    For more information about CORS, go to `Enabling Cross-Origin Resource Sharing <https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

     **Related Resources**  

     

     
    *  GetBucketCors   
     
    *  DeleteBucketCors   
     
    *  RESTOPTIONSobject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketCors>`_    


    **Request Syntax** 
    ::

      response = bucket_cors.put(
          CORSConfiguration={
              'CORSRules': [
                  {
                      'AllowedHeaders': [
                          'string',
                      ],
                      'AllowedMethods': [
                          'string',
                      ],
                      'AllowedOrigins': [
                          'string',
                      ],
                      'ExposeHeaders': [
                          'string',
                      ],
                      'MaxAgeSeconds': 123
                  },
              ]
          },
          
      )
    :type CORSConfiguration: dict
    :param CORSConfiguration: **[REQUIRED]** 

      Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see `Enabling Cross-Origin Resource Sharing <https://docs.aws.amazon.com/AmazonS3/latest/dev//cors.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

      

    
      - **CORSRules** *(list) --* **[REQUIRED]** 

        A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.

        

      
        - *(dict) --* 

          Specifies a cross-origin access rule for an Amazon S3 bucket.

          

        
          - **AllowedHeaders** *(list) --* 

            Headers that are specified in the ``Access-Control-Request-Headers`` header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed.

            

          
            - *(string) --* 

            
        
          - **AllowedMethods** *(list) --* **[REQUIRED]** 

            An HTTP method that you allow the origin to execute. Valid values are ``GET`` , ``PUT`` , ``HEAD`` , ``POST`` , and ``DELETE`` .

            

          
            - *(string) --* 

            
        
          - **AllowedOrigins** *(list) --* **[REQUIRED]** 

            One or more origins you want customers to be able to access the bucket from.

            

          
            - *(string) --* 

            
        
          - **ExposeHeaders** *(list) --* 

            One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript ``XMLHttpRequest`` object).

            

          
            - *(string) --* 

            
        
          - **MaxAgeSeconds** *(integer) --* 

            The time in seconds that your browser is to cache the preflight response for the specified resource.

            

          
        
    
    
    
    :returns: None

  .. py:method:: reload()

    Calls :py:meth:`S3.Client.get_bucket_cors` to update the attributes of the BucketCors resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_cors.reload()
    :returns: None
  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: Bucket()

    Creates a Bucket resource.::

      bucket = bucket_cors.Bucket()

    
    :rtype: :py:class:`S3.Bucket`
    :returns: A Bucket resource
    

============================
BucketLifecycleConfiguration
============================



.. py:class:: S3.BucketLifecycleConfiguration(bucket_name)

  A resource representing an Amazon Simple Storage Service (S3) BucketLifecycleConfiguration::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    bucket_lifecycle_configuration = s3.BucketLifecycleConfiguration('bucket_name')

  :type bucket_name: string
  :param bucket_name: The BucketLifecycleConfiguration's bucket_name identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  These are the resource's available attributes:
  
  *   :py:attr:`rules`

  
  These are the resource's available actions:
  
  *   :py:meth:`delete()`

  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`load()`

  
  *   :py:meth:`put()`

  
  *   :py:meth:`reload()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`Bucket()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The BucketLifecycleConfiguration's bucket_name identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: rules

    

    - *(list) --* 

      Container for a lifecycle rule.

      
      

      - *(dict) --* 

        A lifecycle rule for individual objects in an Amazon S3 bucket.

        
        

        - **Expiration** *(dict) --* 

          Specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker.

          
          

          - **Date** *(datetime) --* 

            Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.

            
          

          - **Days** *(integer) --* 

            Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.

            
      
        

        - **ID** *(string) --* 

          Unique identifier for the rule. The value cannot be longer than 255 characters.

          
        

        - **Filter** *(dict) --* 

          The ``Filter`` is used to identify objects that a Lifecycle Rule applies to. A ``Filter`` must have exactly one of ``Prefix`` , ``Tag`` , or ``And`` specified.

          
          

          - **Prefix** *(string) --* 

            Prefix identifying one or more objects to which the rule applies.

            
      
        

        - **Status** *(string) --* 

          If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.

          
        

        - **Transitions** *(list) --* 

          Specifies when an Amazon S3 object transitions to a specified storage class.

          
          

          - *(dict) --* 

            Specifies when an object transitions to a specified storage class.

            
            

            - **Date** *(datetime) --* 

              Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.

              
            

            - **Days** *(integer) --* 

              Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.

              
            

            - **StorageClass** *(string) --* 

              The storage class to which you want the object to transition.

              
        
      
    
  
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: delete()

    

    Deletes the lifecycle configuration from the specified bucket. Amazon S3 removes all the lifecycle configuration rules in the lifecycle subresource associated with the bucket. Your objects never expire, and Amazon S3 no longer automatically deletes any objects on the basis of rules contained in the deleted lifecycle configuration.

     

    To use this operation, you must have permission to perform the ``s3:PutLifecycleConfiguration`` action. By default, the bucket owner has this permission and the bucket owner can grant this permission to others.

     

    There is usually some time lag before lifecycle configuration deletion is fully propagated to all the Amazon S3 systems.

     

    For more information about the object expiration, see `Elements to Describe Lifecycle Actions <https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#intro-lifecycle-rules-actions>`__ .

     

    Related actions include:

     

     
    *  PutBucketLifecycleConfiguration   
     
    *  GetBucketLifecycleConfiguration   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketLifecycle>`_    


    **Request Syntax** 
    ::

      response = bucket_lifecycle_configuration.delete()
      
    
    :returns: None

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: load()

    Calls :py:meth:`S3.Client.get_bucket_lifecycle_configuration` to update the attributes of the BucketLifecycleConfiguration resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_lifecycle_configuration.load()
    :returns: None

  .. py:method:: put(**kwargs)

    

    Creates a new lifecycle configuration for the bucket or replaces an existing lifecycle configuration. For information about lifecycle configuration, see `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

    .. note::

       

      Bucket lifecycle configuration now supports specifying a lifecycle rule using an object key name prefix, one or more object tags, or a combination of both. Accordingly, this section describes the latest API. The previous version of the API supported filtering based only on an object key name prefix, which is supported for backward compatibility. For the related API description, see  PutBucketLifecycle .

       

     

     **Rules**  

     

    You specify the lifecycle configuration in your request body. The lifecycle configuration is specified as XML consisting of one or more rules. Each rule consists of the following:

     

     
    * Filter identifying a subset of objects to which the rule applies. The filter can be based on a key name prefix, object tags, or a combination of both. 
     
    * Status whether the rule is in effect. 
     
    * One or more lifecycle transition and expiration actions that you want Amazon S3 to perform on the objects identified by the filter. If the state of your bucket is versioning-enabled or versioning-suspended, you can have many versions of the same object (one current version and zero or more noncurrent versions). Amazon S3 provides predefined actions that you can specify for current and noncurrent object versions. 
     

     

    For more information, see `Object Lifecycle Management <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html>`__ and `Lifecycle Configuration Elements <https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html>`__ .

     

     **Permissions**  

     

    By default, all Amazon S3 resources are private, including buckets, objects, and related subresources (for example, lifecycle configuration and website configuration). Only the resource owner (that is, the AWS account that created it) can access the resource. The resource owner can optionally grant access permissions to others by writing an access policy. For this operation, a user must get the s3:PutLifecycleConfiguration permission.

     

    You can also explicitly deny permissions. Explicit deny also supersedes any other permissions. If you want to block users or accounts from removing or deleting objects from your bucket, you must deny them permissions for the following actions:

     

     
    * s3:DeleteObject 
     
    * s3:DeleteObjectVersion 
     
    * s3:PutLifecycleConfiguration 
     

     

    For more information about permissions, see `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

    The following are related to ``PutBucketLifecycleConfiguration`` :

     

     
    * `Examples of Lifecycle Configuration <https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-configuration-examples.html>`__   
     
    *  GetBucketLifecycleConfiguration   
     
    *  DeleteBucketLifecycle   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketLifecycleConfiguration>`_    


    **Request Syntax** 
    ::

      response = bucket_lifecycle_configuration.put(
          LifecycleConfiguration={
              'Rules': [
                  {
                      'Expiration': {
                          'Date': datetime(2015, 1, 1),
                          'Days': 123
                      },
                      'ID': 'string',
                      'Filter': {
                          'Prefix': 'string'
                      },
                      'Status': 'Enabled'|'Disabled',
                      'Transitions': [
                          {
                              'Date': datetime(2015, 1, 1),
                              'Days': 123,
                              'StorageClass': 'ACCELERATED'|'GLACIER'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'DEEP_ARCHIVE'
                          },
                      ]
                  },
              ]
          }
      )
    :type LifecycleConfiguration: dict
    :param LifecycleConfiguration: 

      Container for lifecycle rules. You can add as many as 1,000 rules.

      

    
      - **Rules** *(list) --* **[REQUIRED]** 

        A lifecycle rule for individual objects in an Amazon S3 bucket.

        

      
        - *(dict) --* 

          A lifecycle rule for individual objects in an Amazon S3 bucket.

          

        
          - **Expiration** *(dict) --* 

            Specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker.

            

          
            - **Date** *(datetime) --* 

              Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.

              

            
            - **Days** *(integer) --* 

              Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.

              

            
          
          - **ID** *(string) --* 

            Unique identifier for the rule. The value cannot be longer than 255 characters.

            

          
          - **Filter** *(dict) --* **[REQUIRED]** 

            The ``Filter`` is used to identify objects that a Lifecycle Rule applies to. A ``Filter`` must have exactly one of ``Prefix`` , ``Tag`` , or ``And`` specified.

            

          
            - **Prefix** *(string) --* 

              Prefix identifying one or more objects to which the rule applies.

              

            
          
          - **Status** *(string) --* **[REQUIRED]** 

            If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.

            

          
          - **Transitions** *(list) --* 

            Specifies when an Amazon S3 object transitions to a specified storage class.

            

          
            - *(dict) --* 

              Specifies when an object transitions to a specified storage class.

              

            
              - **Date** *(datetime) --* 

                Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.

                

              
              - **Days** *(integer) --* 

                Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.

                

              
              - **StorageClass** *(string) --* 

                The storage class to which you want the object to transition.

                

              
            
        
        
    
    
    
    :returns: None

  .. py:method:: reload()

    Calls :py:meth:`S3.Client.get_bucket_lifecycle_configuration` to update the attributes of the BucketLifecycleConfiguration resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_lifecycle_configuration.reload()
    :returns: None
  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: Bucket()

    Creates a Bucket resource.::

      bucket = bucket_lifecycle_configuration.Bucket()

    
    :rtype: :py:class:`S3.Bucket`
    :returns: A Bucket resource
    

=============
BucketTagging
=============



.. py:class:: S3.BucketTagging(bucket_name)

  A resource representing an Amazon Simple Storage Service (S3) BucketTagging::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    bucket_tagging = s3.BucketTagging('bucket_name')

  :type bucket_name: string
  :param bucket_name: The BucketTagging's bucket_name identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  These are the resource's available attributes:
  
  *   :py:attr:`tag_set`

  
  These are the resource's available actions:
  
  *   :py:meth:`delete()`

  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`load()`

  
  *   :py:meth:`put()`

  
  *   :py:meth:`reload()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`Bucket()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The BucketTagging's bucket_name identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: tag_set

    

    - *(list) --* 

      Contains the tag set.

      
      

      - *(dict) --* 

        A container of a key value name pair.

        
        

        - **Key** *(string) --* 

          Name of the tag.

          
        

        - **Value** *(string) --* 

          Value of the tag.

          
    
  
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: delete()

    

    Deletes the tags from the bucket.

     

    To use this operation, you must have permission to perform the ``s3:PutBucketTagging`` action. By default, the bucket owner has this permission and can grant this permission to others. 

     

    The following operations are related to ``DeleteBucketTagging`` :

     

     
    *  GetBucketTagging   
     
    *  PutBucketTagging   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketTagging>`_    


    **Request Syntax** 
    ::

      response = bucket_tagging.delete()
      
    
    :returns: None

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: load()

    Calls :py:meth:`S3.Client.get_bucket_tagging` to update the attributes of the BucketTagging resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_tagging.load()
    :returns: None

  .. py:method:: put(**kwargs)

    

    Sets the tags for a bucket.

     

    Use tags to organize your AWS bill to reflect your own cost structure. To do this, sign up to get your AWS account bill with tag key values included. Then, to see the cost of combined resources, organize your billing information according to resources with the same tag key values. For example, you can tag several resources with a specific application name, and then organize your billing information to see the total cost of that application across several services. For more information, see `Cost Allocation and Tagging <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html>`__ .

     

    .. note::

       

      Within a bucket, if you add a tag that has the same key as an existing tag, the new value overwrites the old value. For more information, see `Using Cost Allocation in Amazon S3 Bucket Tags <https://docs.aws.amazon.com/AmazonS3/latest/dev/CostAllocTagging.html>`__ .

       

     

    To use this operation, you must have permissions to perform the ``s3:PutBucketTagging`` action. The bucket owner has this permission by default and can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ .

     

     ``PutBucketTagging`` has the following special errors:

     

     
    * Error code: ``InvalidTagError``   

       
      * Description: The tag provided was not a valid tag. This error can occur if the tag did not pass input validation. For information about tag restrictions, see `User-Defined Tag Restrictions <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2//allocation-tag-restrictions.html>`__ and `AWS-Generated Cost Allocation Tag Restrictions <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2//aws-tag-restrictions.html>`__ . 
       

     
     
    * Error code: ``MalformedXMLError``   

       
      * Description: The XML provided does not match the schema. 
       

     
     
    * Error code: ``OperationAbortedError``   

       
      * Description: A conflicting conditional operation is currently in progress against this resource. Please try again. 
       

     
     
    * Error code: ``InternalError``   

       
      * Description: The service was unable to apply the provided tag to the bucket. 
       

     
     

     

    The following operations are related to ``PutBucketTagging`` :

     

     
    *  GetBucketTagging   
     
    *  DeleteBucketTagging   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketTagging>`_    


    **Request Syntax** 
    ::

      response = bucket_tagging.put(
          Tagging={
              'TagSet': [
                  {
                      'Key': 'string',
                      'Value': 'string'
                  },
              ]
          }
      )
    :type Tagging: dict
    :param Tagging: **[REQUIRED]** 

      Container for the ``TagSet`` and ``Tag`` elements.

      

    
      - **TagSet** *(list) --* **[REQUIRED]** 

        A collection for a set of tags

        

      
        - *(dict) --* 

          A container of a key value name pair.

          

        
          - **Key** *(string) --* **[REQUIRED]** 

            Name of the tag.

            

          
          - **Value** *(string) --* **[REQUIRED]** 

            Value of the tag.

            

          
        
    
    
    
    :returns: None

  .. py:method:: reload()

    Calls :py:meth:`S3.Client.get_bucket_tagging` to update the attributes of the BucketTagging resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_tagging.reload()
    :returns: None
  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: Bucket()

    Creates a Bucket resource.::

      bucket = bucket_tagging.Bucket()

    
    :rtype: :py:class:`S3.Bucket`
    :returns: A Bucket resource
    

================
BucketVersioning
================



.. py:class:: S3.BucketVersioning(bucket_name)

  A resource representing an Amazon Simple Storage Service (S3) BucketVersioning::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    bucket_versioning = s3.BucketVersioning('bucket_name')

  :type bucket_name: string
  :param bucket_name: The BucketVersioning's bucket_name identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  These are the resource's available attributes:
  
  *   :py:attr:`mfa_delete`

  
  *   :py:attr:`status`

  
  These are the resource's available actions:
  
  *   :py:meth:`enable()`

  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`load()`

  
  *   :py:meth:`put()`

  
  *   :py:meth:`reload()`

  
  *   :py:meth:`suspend()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`Bucket()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The BucketVersioning's bucket_name identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: mfa_delete

    

    - *(string) --* 

      Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.

      

  .. py:attribute:: status

    

    - *(string) --* 

      The versioning state of the bucket.

      
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: enable(**kwargs)

    

    Sets the versioning state of an existing bucket. To set the versioning state, you must be the bucket owner.

     

    You can set the versioning state with one of the following values:

     

     **Enabled** —Enables versioning for the objects in the bucket. All objects added to the bucket receive a unique version ID.

     

     **Suspended** —Disables versioning for the objects in the bucket. All objects added to the bucket receive the version ID null.

     

    If the versioning state has never been set on a bucket, it has no versioning state; a  GetBucketVersioning request does not return a versioning state value.

     

    If the bucket owner enables MFA Delete in the bucket versioning configuration, the bucket owner must include the ``x-amz-mfa request`` header and the ``Status`` and the ``MfaDelete`` request elements in a request to set the versioning state of the bucket.

     

    .. warning::

       

      If you have an object expiration lifecycle policy in your non-versioned bucket and you want to maintain the same permanent delete behavior when you enable versioning, you must add a noncurrent expiration policy. The noncurrent expiration lifecycle policy will manage the deletes of the noncurrent object versions in the version-enabled bucket. (A version-enabled bucket maintains one current and zero or more noncurrent object versions.) For more information, see `Lifecycle and Versioning <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-and-other-bucket-config>`__ .

       

     

     **Related Resources**  

     

     
    *  CreateBucket   
     
    *  DeleteBucket   
     
    *  GetBucketVersioning   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketVersioning>`_    


    **Request Syntax** 
    ::

      response = bucket_versioning.enable(
          MFA='string',
          
      )
    :type MFA: string
    :param MFA: 

      The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.

      

    
    
    :returns: None

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: load()

    Calls :py:meth:`S3.Client.get_bucket_versioning` to update the attributes of the BucketVersioning resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_versioning.load()
    :returns: None

  .. py:method:: put(**kwargs)

    

    Sets the versioning state of an existing bucket. To set the versioning state, you must be the bucket owner.

     

    You can set the versioning state with one of the following values:

     

     **Enabled** —Enables versioning for the objects in the bucket. All objects added to the bucket receive a unique version ID.

     

     **Suspended** —Disables versioning for the objects in the bucket. All objects added to the bucket receive the version ID null.

     

    If the versioning state has never been set on a bucket, it has no versioning state; a  GetBucketVersioning request does not return a versioning state value.

     

    If the bucket owner enables MFA Delete in the bucket versioning configuration, the bucket owner must include the ``x-amz-mfa request`` header and the ``Status`` and the ``MfaDelete`` request elements in a request to set the versioning state of the bucket.

     

    .. warning::

       

      If you have an object expiration lifecycle policy in your non-versioned bucket and you want to maintain the same permanent delete behavior when you enable versioning, you must add a noncurrent expiration policy. The noncurrent expiration lifecycle policy will manage the deletes of the noncurrent object versions in the version-enabled bucket. (A version-enabled bucket maintains one current and zero or more noncurrent object versions.) For more information, see `Lifecycle and Versioning <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-and-other-bucket-config>`__ .

       

     

     **Related Resources**  

     

     
    *  CreateBucket   
     
    *  DeleteBucket   
     
    *  GetBucketVersioning   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketVersioning>`_    


    **Request Syntax** 
    ::

      response = bucket_versioning.put(
          MFA='string',
          VersioningConfiguration={
              'MFADelete': 'Enabled'|'Disabled',
              'Status': 'Enabled'|'Suspended'
          }
      )
    :type MFA: string
    :param MFA: 

      The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.

      

    
    :type VersioningConfiguration: dict
    :param VersioningConfiguration: **[REQUIRED]** 

      Container for setting the versioning state.

      

    
      - **MFADelete** *(string) --* 

        Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.

        

      
      - **Status** *(string) --* 

        The versioning state of the bucket.

        

      
    
    
    :returns: None

  .. py:method:: reload()

    Calls :py:meth:`S3.Client.get_bucket_versioning` to update the attributes of the BucketVersioning resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_versioning.reload()
    :returns: None

  .. py:method:: suspend(**kwargs)

    

    Sets the versioning state of an existing bucket. To set the versioning state, you must be the bucket owner.

     

    You can set the versioning state with one of the following values:

     

     **Enabled** —Enables versioning for the objects in the bucket. All objects added to the bucket receive a unique version ID.

     

     **Suspended** —Disables versioning for the objects in the bucket. All objects added to the bucket receive the version ID null.

     

    If the versioning state has never been set on a bucket, it has no versioning state; a  GetBucketVersioning request does not return a versioning state value.

     

    If the bucket owner enables MFA Delete in the bucket versioning configuration, the bucket owner must include the ``x-amz-mfa request`` header and the ``Status`` and the ``MfaDelete`` request elements in a request to set the versioning state of the bucket.

     

    .. warning::

       

      If you have an object expiration lifecycle policy in your non-versioned bucket and you want to maintain the same permanent delete behavior when you enable versioning, you must add a noncurrent expiration policy. The noncurrent expiration lifecycle policy will manage the deletes of the noncurrent object versions in the version-enabled bucket. (A version-enabled bucket maintains one current and zero or more noncurrent object versions.) For more information, see `Lifecycle and Versioning <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-and-other-bucket-config>`__ .

       

     

     **Related Resources**  

     

     
    *  CreateBucket   
     
    *  DeleteBucket   
     
    *  GetBucketVersioning   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketVersioning>`_    


    **Request Syntax** 
    ::

      response = bucket_versioning.suspend(
          MFA='string',
          
      )
    :type MFA: string
    :param MFA: 

      The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.

      

    
    
    :returns: None
  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: Bucket()

    Creates a Bucket resource.::

      bucket = bucket_versioning.Bucket()

    
    :rtype: :py:class:`S3.Bucket`
    :returns: A Bucket resource
    

=============
BucketWebsite
=============



.. py:class:: S3.BucketWebsite(bucket_name)

  A resource representing an Amazon Simple Storage Service (S3) BucketWebsite::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    bucket_website = s3.BucketWebsite('bucket_name')

  :type bucket_name: string
  :param bucket_name: The BucketWebsite's bucket_name identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  These are the resource's available attributes:
  
  *   :py:attr:`error_document`

  
  *   :py:attr:`index_document`

  
  *   :py:attr:`redirect_all_requests_to`

  
  *   :py:attr:`routing_rules`

  
  These are the resource's available actions:
  
  *   :py:meth:`delete()`

  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`load()`

  
  *   :py:meth:`put()`

  
  *   :py:meth:`reload()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`Bucket()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The BucketWebsite's bucket_name identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: error_document

    

    - *(dict) --* 

      The name of the error document for the website.

      
      

      - **Key** *(string) --* 

        The object key name to use when a 4XX class error occurs.

        
  

  .. py:attribute:: index_document

    

    - *(dict) --* 

      The name of the index document for the website.

      
      

      - **Suffix** *(string) --* 

        A suffix that is appended to a request that is for a directory on the website endpoint (for example,if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character.

        
  

  .. py:attribute:: redirect_all_requests_to

    

    - *(dict) --* 

      Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.

      
      

      - **HostName** *(string) --* 

        Name of the host where requests are redirected.

        
      

      - **Protocol** *(string) --* 

        Protocol to use when redirecting requests. The default is the protocol that is used in the original request.

        
  

  .. py:attribute:: routing_rules

    

    - *(list) --* 

      Rules that define when a redirect is applied and the redirect behavior.

      
      

      - *(dict) --* 

        Specifies the redirect behavior and when a redirect is applied.

        
        

        - **Condition** *(dict) --* 

          A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.

          
          

          - **HttpErrorCodeReturnedEquals** *(string) --* 

            The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element ``Condition`` is specified and sibling ``KeyPrefixEquals`` is not specified. If both are specified, then both must be true for the redirect to be applied.

            
          

          - **KeyPrefixEquals** *(string) --* 

            The object key name prefix when the redirect is applied. For example, to redirect requests for ``ExamplePage.html`` , the key prefix will be ``ExamplePage.html`` . To redirect request for all pages with the prefix ``docs/`` , the key prefix will be ``/docs`` , which identifies all objects in the ``docs/`` folder. Required when the parent element ``Condition`` is specified and sibling ``HttpErrorCodeReturnedEquals`` is not specified. If both conditions are specified, both must be true for the redirect to be applied.

            
      
        

        - **Redirect** *(dict) --* 

          Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.

          
          

          - **HostName** *(string) --* 

            The host name to use in the redirect request.

            
          

          - **HttpRedirectCode** *(string) --* 

            The HTTP redirect code to use on the response. Not required if one of the siblings is present.

            
          

          - **Protocol** *(string) --* 

            Protocol to use when redirecting requests. The default is the protocol that is used in the original request.

            
          

          - **ReplaceKeyPrefixWith** *(string) --* 

            The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix ``docs/`` (objects in the ``docs/`` folder) to ``documents/`` , you can set a condition block with ``KeyPrefixEquals`` set to ``docs/`` and in the Redirect set ``ReplaceKeyPrefixWith`` to ``/documents`` . Not required if one of the siblings is present. Can be present only if ``ReplaceKeyWith`` is not provided.

            
          

          - **ReplaceKeyWith** *(string) --* 

            The specific object key to use in the redirect request. For example, redirect request to ``error.html`` . Not required if one of the siblings is present. Can be present only if ``ReplaceKeyPrefixWith`` is not provided.

            
      
    
  
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: delete()

    

    This operation removes the website configuration for a bucket. Amazon S3 returns a ``200 OK`` response upon successfully deleting a website configuration on the specified bucket. You will get a ``200 OK`` response if the website configuration you are trying to delete does not exist on the bucket. Amazon S3 returns a ``404`` response if the bucket specified in the request does not exist.

     

    This DELETE operation requires the ``S3:DeleteBucketWebsite`` permission. By default, only the bucket owner can delete the website configuration attached to a bucket. However, bucket owners can grant other users permission to delete the website configuration by writing a bucket policy granting them the ``S3:DeleteBucketWebsite`` permission. 

     

    For more information about hosting websites, see `Hosting Websites on Amazon S3 <https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html>`__ . 

     

    The following operations are related to ``DeleteBucketWebsite`` :

     

     
    *  GetBucketWebsite   
     
    *  PutBucketWebsite   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketWebsite>`_    


    **Request Syntax** 
    ::

      response = bucket_website.delete()
      
    
    :returns: None

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: load()

    Calls :py:meth:`S3.Client.get_bucket_website` to update the attributes of the BucketWebsite resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_website.load()
    :returns: None

  .. py:method:: put(**kwargs)

    

    Sets the configuration of the website that is specified in the ``website`` subresource. To configure a bucket as a website, you can add this subresource on the bucket with website configuration information such as the file name of the index document and any redirect rules. For more information, see `Hosting Websites on Amazon S3 <https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketWebsite>`_    


    **Request Syntax** 
    ::

      response = bucket_website.put(
          WebsiteConfiguration={
              'ErrorDocument': {
                  'Key': 'string'
              },
              'IndexDocument': {
                  'Suffix': 'string'
              },
              'RedirectAllRequestsTo': {
                  'HostName': 'string',
                  'Protocol': 'http'|'https'
              },
              'RoutingRules': [
                  {
                      'Condition': {
                          'HttpErrorCodeReturnedEquals': 'string',
                          'KeyPrefixEquals': 'string'
                      },
                      'Redirect': {
                          'HostName': 'string',
                          'HttpRedirectCode': 'string',
                          'Protocol': 'http'|'https',
                          'ReplaceKeyPrefixWith': 'string',
                          'ReplaceKeyWith': 'string'
                      }
                  },
              ]
          }
      )
    :type WebsiteConfiguration: dict
    :param WebsiteConfiguration: **[REQUIRED]** 

      Container for the request.

      

    
      - **ErrorDocument** *(dict) --* 

        The name of the error document for the website.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The object key name to use when a 4XX class error occurs.

          

        
      
      - **IndexDocument** *(dict) --* 

        The name of the index document for the website.

        

      
        - **Suffix** *(string) --* **[REQUIRED]** 

          A suffix that is appended to a request that is for a directory on the website endpoint (for example,if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character.

          

        
      
      - **RedirectAllRequestsTo** *(dict) --* 

        The redirect behavior for every request to this bucket's website endpoint.

         

        .. warning::

           

          If you specify this property, you can't specify any other property.

           

        

      
        - **HostName** *(string) --* **[REQUIRED]** 

          Name of the host where requests are redirected.

          

        
        - **Protocol** *(string) --* 

          Protocol to use when redirecting requests. The default is the protocol that is used in the original request.

          

        
      
      - **RoutingRules** *(list) --* 

        Rules that define when a redirect is applied and the redirect behavior.

        

      
        - *(dict) --* 

          Specifies the redirect behavior and when a redirect is applied.

          

        
          - **Condition** *(dict) --* 

            A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.

            

          
            - **HttpErrorCodeReturnedEquals** *(string) --* 

              The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element ``Condition`` is specified and sibling ``KeyPrefixEquals`` is not specified. If both are specified, then both must be true for the redirect to be applied.

              

            
            - **KeyPrefixEquals** *(string) --* 

              The object key name prefix when the redirect is applied. For example, to redirect requests for ``ExamplePage.html`` , the key prefix will be ``ExamplePage.html`` . To redirect request for all pages with the prefix ``docs/`` , the key prefix will be ``/docs`` , which identifies all objects in the ``docs/`` folder. Required when the parent element ``Condition`` is specified and sibling ``HttpErrorCodeReturnedEquals`` is not specified. If both conditions are specified, both must be true for the redirect to be applied.

              

            
          
          - **Redirect** *(dict) --* **[REQUIRED]** 

            Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.

            

          
            - **HostName** *(string) --* 

              The host name to use in the redirect request.

              

            
            - **HttpRedirectCode** *(string) --* 

              The HTTP redirect code to use on the response. Not required if one of the siblings is present.

              

            
            - **Protocol** *(string) --* 

              Protocol to use when redirecting requests. The default is the protocol that is used in the original request.

              

            
            - **ReplaceKeyPrefixWith** *(string) --* 

              The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix ``docs/`` (objects in the ``docs/`` folder) to ``documents/`` , you can set a condition block with ``KeyPrefixEquals`` set to ``docs/`` and in the Redirect set ``ReplaceKeyPrefixWith`` to ``/documents`` . Not required if one of the siblings is present. Can be present only if ``ReplaceKeyWith`` is not provided.

              

            
            - **ReplaceKeyWith** *(string) --* 

              The specific object key to use in the redirect request. For example, redirect request to ``error.html`` . Not required if one of the siblings is present. Can be present only if ``ReplaceKeyPrefixWith`` is not provided.

              

            
          
        
    
    
    
    :returns: None

  .. py:method:: reload()

    Calls :py:meth:`S3.Client.get_bucket_website` to update the attributes of the BucketWebsite resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_website.reload()
    :returns: None
  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: Bucket()

    Creates a Bucket resource.::

      bucket = bucket_website.Bucket()

    
    :rtype: :py:class:`S3.Bucket`
    :returns: A Bucket resource
    

===============
MultipartUpload
===============



.. py:class:: S3.MultipartUpload(bucket_name,object_key,id)

  A resource representing an Amazon Simple Storage Service (S3) MultipartUpload::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    multipart_upload = s3.MultipartUpload('bucket_name','object_key','id')

  :type bucket_name: string
  :param bucket_name: The MultipartUpload's bucket_name identifier. This **must** be set.
  :type object_key: string
  :param object_key: The MultipartUpload's object_key identifier. This **must** be set.
  :type id: string
  :param id: The MultipartUpload's id identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  *   :py:attr:`object_key`

  
  *   :py:attr:`id`

  
  These are the resource's available attributes:
  
  *   :py:attr:`initiated`

  
  *   :py:attr:`initiator`

  
  *   :py:attr:`key`

  
  *   :py:attr:`owner`

  
  *   :py:attr:`storage_class`

  
  *   :py:attr:`upload_id`

  
  These are the resource's available actions:
  
  *   :py:meth:`abort()`

  
  *   :py:meth:`complete()`

  
  *   :py:meth:`get_available_subresources()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`Object()`

  
  *   :py:meth:`Part()`

  
  These are the resource's available collections:
  
  *   :py:attr:`parts`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The MultipartUpload's bucket_name identifier. This **must** be set.

  .. py:attribute:: object_key

    *(string)* The MultipartUpload's object_key identifier. This **must** be set.

  .. py:attribute:: id

    *(string)* The MultipartUpload's id identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: initiated

    

    - *(datetime) --* 

      Date and time at which the multipart upload was initiated.

      

  .. py:attribute:: initiator

    

    - *(dict) --* 

      Identifies who initiated the multipart upload.

      
      

      - **ID** *(string) --* 

        If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value.

        
      

      - **DisplayName** *(string) --* 

        Name of the Principal.

        
  

  .. py:attribute:: key

    

    - *(string) --* 

      Key of the object for which the multipart upload was initiated.

      

  .. py:attribute:: owner

    

    - *(dict) --* 

      Specifies the owner of the object that is part of the multipart upload. 

      
      

      - **DisplayName** *(string) --* 

        Container for the display name of the owner.

        
      

      - **ID** *(string) --* 

        Container for the ID of the owner.

        
  

  .. py:attribute:: storage_class

    

    - *(string) --* 

      The class of storage used to store the object.

      

  .. py:attribute:: upload_id

    

    - *(string) --* 

      Upload ID that identifies the multipart upload.

      
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: abort(**kwargs)

    

    This operation aborts a multipart upload. After a multipart upload is aborted, no additional parts can be uploaded using that upload ID. The storage consumed by any previously uploaded parts will be freed. However, if any part uploads are currently in progress, those part uploads might or might not succeed. As a result, it might be necessary to abort a given multipart upload multiple times in order to completely free all storage consumed by all parts. 

     

    To verify that all parts have been removed, so you don't get charged for the part storage, you should call the  ListParts operation and ensure that the parts list is empty.

     

    For information about permissions required to use the multipart upload API, see `Multipart Upload API and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ .

     

    The following operations are related to ``AbortMultipartUpload`` :

     

     
    *  CreateMultipartUpload   
     
    *  UploadPart   
     
    *  CompleteMultipartUpload   
     
    *  ListParts   
     
    *  ListMultipartUploads   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/AbortMultipartUpload>`_    


    **Request Syntax** 
    ::

      response = multipart_upload.abort(
          RequestPayer='requester'
      )
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: complete(**kwargs)

    

    Completes a multipart upload by assembling previously uploaded parts.

     

    You first initiate the multipart upload and then upload all parts using the  UploadPart operation. After successfully uploading all relevant parts of an upload, you call this operation to complete the upload. Upon receiving this request, Amazon S3 concatenates all the parts in ascending order by part number to create a new object. In the Complete Multipart Upload request, you must provide the parts list. You must ensure that the parts list is complete. This operation concatenates the parts that you provide in the list. For each part in the list, you must provide the part number and the ``ETag`` value, returned after that part was uploaded.

     

    Processing of a Complete Multipart Upload request could take several minutes to complete. After Amazon S3 begins processing the request, it sends an HTTP response header that specifies a 200 OK response. While processing is in progress, Amazon S3 periodically sends white space characters to keep the connection from timing out. Because a request could fail after the initial 200 OK response has been sent, it is important that you check the response body to determine whether the request succeeded.

     

    Note that if ``CompleteMultipartUpload`` fails, applications should be prepared to retry the failed requests. For more information, see `Amazon S3 Error Best Practices <https://docs.aws.amazon.com/AmazonS3/latest/dev/ErrorBestPractices.html>`__ .

     

    For more information about multipart uploads, see `Uploading Objects Using Multipart Upload <https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html>`__ .

     

    For information about permissions required to use the multipart upload API, see `Multipart Upload API and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ .

     

     ``GetBucketLifecycle`` has the following special errors:

     

     
    * Error code: ``EntityTooSmall``   

       
      * Description: Your proposed upload is smaller than the minimum allowed object size. Each part must be at least 5 MB in size, except the last part. 
       
      * 400 Bad Request 
       

     
     
    * Error code: ``InvalidPart``   

       
      * Description: One or more of the specified parts could not be found. The part might not have been uploaded, or the specified entity tag might not have matched the part's entity tag. 
       
      * 400 Bad Request 
       

     
     
    * Error code: ``InvalidPartOrder``   

       
      * Description: The list of parts was not in ascending order. The parts list must be specified in order by part number. 
       
      * 400 Bad Request 
       

     
     
    * Error code: ``NoSuchUpload``   

       
      * Description: The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed. 
       
      * 404 Not Found 
       

     
     

     

    The following operations are related to ``DeleteBucketMetricsConfiguration`` :

     

     
    *  CreateMultipartUpload   
     
    *  UploadPart   
     
    *  AbortMultipartUpload   
     
    *  ListParts   
     
    *  ListMultipartUploads   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/CompleteMultipartUpload>`_    


    **Request Syntax** 
    ::

      object = multipart_upload.complete(
          MultipartUpload={
              'Parts': [
                  {
                      'ETag': 'string',
                      'PartNumber': 123
                  },
              ]
          },
          RequestPayer='requester',
          RetentionExpirationDate=datetime(2015, 1, 1),
          RetentionLegalHoldId='string',
          RetentionPeriod=123
      )
    :type MultipartUpload: dict
    :param MultipartUpload: 

      The container for the multipart upload request information.

      

    
      - **Parts** *(list) --* 

        Array of CompletedPart data types.

        

      
        - *(dict) --* 

          Details of the parts that were uploaded.

          

        
          - **ETag** *(string) --* 

            Entity tag returned when the part was uploaded.

            

          
          - **PartNumber** *(integer) --* 

            Part number that identifies the part. This is a positive integer between 1 and 10,000.

            

          
        
    
    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type RetentionExpirationDate: datetime
    :param RetentionExpirationDate: Date on which it will be legal to delete or modify the object. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used.

    
    :type RetentionLegalHoldId: string
    :param RetentionLegalHoldId: A single legal hold to apply to the object. A legal hold is a character long string of max length 64. The object cannot be overwritten or deleted until all legal holds associated with the object are removed.

    
    :type RetentionPeriod: integer
    :param RetentionPeriod: Retention period to store on the object in seconds. RetentionPeriod and RetentionExpirationDate are mutually exclusive, if neither is specified the bucket's DefaultRetentionPeriod value will be used. **Indefinite retention(-1)** is a valid value. **Permanent retention(-2)**, is valid only if permanent retention is enabled for the bucket. **0** is a valid value if the bucket's MinimumRetention period is also 0.

    
    
    :rtype: :py:class:`s3.Object`
    :returns: Object resource
    

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str

  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: Object()

    Creates a Object resource.::

      object = multipart_upload.Object()

    
    :rtype: :py:class:`S3.Object`
    :returns: A Object resource
    

  .. py:method:: Part(part_number)

    Creates a MultipartUploadPart resource.::

      multipart_upload_part = multipart_upload.Part('part_number')

    :type part_number: string
    :param part_number: The Part's part_number identifier. This **must** be set.
    
    :rtype: :py:class:`S3.MultipartUploadPart`
    :returns: A MultipartUploadPart resource
    
  .. rst-class:: admonition-title
  
  Collections
  
  Collections provide an interface to iterate over and manipulate groups of resources. 
  For more information about collections refer to the :ref:`Resources Introduction Guide<guide_collections>`.
  

  .. py:attribute:: parts

    A collection of MultipartUploadPart resources

    .. py:method:: all()

      Creates an iterable of all MultipartUploadPart resources in the collection.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListParts>`_      


      **Request Syntax** 
      ::

        multipart_upload_part_iterator = multipart_upload.parts.all()
        
      
      :rtype: list(:py:class:`s3.MultipartUploadPart`)
      :returns: A list of MultipartUploadPart resources
      

    .. py:method:: filter(**kwargs)

      Creates an iterable of all MultipartUploadPart resources in the collection filtered by kwargs passed to method.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListParts>`_      


      **Request Syntax** 
      ::

        multipart_upload_part_iterator = multipart_upload.parts.filter(
            MaxParts=123,
            MirrorDestination='string',
            PartNumberMarker=123,
            RequestPayer='requester'
        )
      :type MaxParts: integer
      :param MaxParts: 

        Sets the maximum number of parts to return.

        

      
      :type MirrorDestination: string
      :param MirrorDestination: Mirror source for object reads.

      
      :type PartNumberMarker: integer
      :param PartNumberMarker: 

        Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.

        

      
      :type RequestPayer: string
      :param RequestPayer: Ignored by COS if present.

      
      
      :rtype: list(:py:class:`s3.MultipartUploadPart`)
      :returns: A list of MultipartUploadPart resources
      

    .. py:method:: limit(**kwargs)

      Creates an iterable up to a specified amount of MultipartUploadPart resources in the collection.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListParts>`_      


      **Request Syntax** 
      ::

        multipart_upload_part_iterator = multipart_upload.parts.limit(
            count=123
        )
      :type count: integer
      :param count: The limit to the number of resources in the iterable.

      
      
      :rtype: list(:py:class:`s3.MultipartUploadPart`)
      :returns: A list of MultipartUploadPart resources
      

    .. py:method:: page_size(**kwargs)

      Creates an iterable of all MultipartUploadPart resources in the collection, but limits the number of items returned by each service call by the specified amount.

      See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListParts>`_      


      **Request Syntax** 
      ::

        multipart_upload_part_iterator = multipart_upload.parts.page_size(
            count=123
        )
      :type count: integer
      :param count: The number of items returned by each service call

      
      
      :rtype: list(:py:class:`s3.MultipartUploadPart`)
      :returns: A list of MultipartUploadPart resources
      

===================
MultipartUploadPart
===================



.. py:class:: S3.MultipartUploadPart(bucket_name,object_key,multipart_upload_id,part_number)

  A resource representing an Amazon Simple Storage Service (S3) MultipartUploadPart::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    multipart_upload_part = s3.MultipartUploadPart('bucket_name','object_key','multipart_upload_id','part_number')

  :type bucket_name: string
  :param bucket_name: The MultipartUploadPart's bucket_name identifier. This **must** be set.
  :type object_key: string
  :param object_key: The MultipartUploadPart's object_key identifier. This **must** be set.
  :type multipart_upload_id: string
  :param multipart_upload_id: The MultipartUploadPart's multipart_upload_id identifier. This **must** be set.
  :type part_number: string
  :param part_number: The MultipartUploadPart's part_number identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  *   :py:attr:`object_key`

  
  *   :py:attr:`multipart_upload_id`

  
  *   :py:attr:`part_number`

  
  These are the resource's available attributes:
  
  *   :py:attr:`e_tag`

  
  *   :py:attr:`last_modified`

  
  *   :py:attr:`size`

  
  These are the resource's available actions:
  
  *   :py:meth:`copy_from()`

  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`upload()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`MultipartUpload()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The MultipartUploadPart's bucket_name identifier. This **must** be set.

  .. py:attribute:: object_key

    *(string)* The MultipartUploadPart's object_key identifier. This **must** be set.

  .. py:attribute:: multipart_upload_id

    *(string)* The MultipartUploadPart's multipart_upload_id identifier. This **must** be set.

  .. py:attribute:: part_number

    *(string)* The MultipartUploadPart's part_number identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: e_tag

    

    - *(string) --* 

      Entity tag returned when the part was uploaded.

      

  .. py:attribute:: last_modified

    

    - *(datetime) --* 

      Date and time at which the part was uploaded.

      

  .. py:attribute:: size

    

    - *(integer) --* 

      Size in bytes of the uploaded part data.

      
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: copy_from(**kwargs)

    

    Uploads a part by copying data from an existing object as data source. You specify the data source by adding the request header ``x-amz-copy-source`` in your request and a byte range by adding the request header ``x-amz-copy-source-range`` in your request. 

     

    The minimum allowable part size for a multipart upload is 5 MB. For more information about multipart upload limits, go to `Quick Facts <https://docs.aws.amazon.com/AmazonS3/latest/dev/qfacts.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 

     

    .. note::

       

      Instead of using an existing object as part data, you might use the  UploadPart operation and provide data in your request.

       

     

    You must initiate a multipart upload before you can upload any part. In response to your initiate request. Amazon S3 returns a unique identifier, the upload ID, that you must include in your upload part request.

     

    For more information about using the ``UploadPartCopy`` operation, see the following:

     

     
    * For conceptual information about multipart uploads, see `Uploading Objects Using Multipart Upload <https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 
     
    * For information about permissions required to use the multipart upload API, see `Multipart Upload API and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 
     
    * For information about copying objects using a single atomic operation vs. the multipart upload, see `Operations on Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectOperations.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 
     
    * For information about using server-side encryption with customer-provided encryption keys with the UploadPartCopy operation, see  CopyObject and  UploadPart . 
     

     

    Note the following additional considerations about the request headers ``x-amz-copy-source-if-match`` , ``x-amz-copy-source-if-none-match`` , ``x-amz-copy-source-if-unmodified-since`` , and ``x-amz-copy-source-if-modified-since`` :

     

     

     

     
    * **Consideration 1** - If both of the ``x-amz-copy-source-if-match`` and ``x-amz-copy-source-if-unmodified-since`` headers are present in the request as follows:  ``x-amz-copy-source-if-match`` condition evaluates to ``true`` , and;  ``x-amz-copy-source-if-unmodified-since`` condition evaluates to ``false`` ; Amazon S3 returns ``200 OK`` and copies the data.  
     
    * **Consideration 2** - If both of the ``x-amz-copy-source-if-none-match`` and ``x-amz-copy-source-if-modified-since`` headers are present in the request as follows:  ``x-amz-copy-source-if-none-match`` condition evaluates to ``false`` , and;  ``x-amz-copy-source-if-modified-since`` condition evaluates to ``true`` ; Amazon S3 returns ``412 Precondition Failed`` response code.  
     

     

     **Versioning**  

     

    If your bucket has versioning enabled, you could have multiple versions of the same object. By default, ``x-amz-copy-source`` identifies the current version of the object to copy. If the current version is a delete marker and you don't specify a versionId in the ``x-amz-copy-source`` , Amazon S3 returns a 404 error, because the object does not exist. If you specify versionId in the ``x-amz-copy-source`` and the versionId is a delete marker, Amazon S3 returns an HTTP 400 error, because you are not allowed to specify a delete marker as a version for the ``x-amz-copy-source`` . 

     

    You can optionally specify a specific version of the source object to copy by adding the ``versionId`` subresource as shown in the following example:

     

     ``x-amz-copy-source: /bucket/object?versionId=version id``  

     

     **Special Errors**  

     

     
    * 

      
      * *Code: NoSuchUpload*   
       
      * *Cause: The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed.*   
       
      * *HTTP Status Code: 404 Not Found*   
       

     
     
    * 

      
      * *Code: InvalidRequest*   
       
      * *Cause: The specified copy source is not supported as a byte-range copy source.*   
       
      * *HTTP Status Code: 400 Bad Request*   
       

     
     

     

     **Related Resources**  

     

     
    *  CreateMultipartUpload   
     
    *  UploadPart   
     
    *  CompleteMultipartUpload   
     
    *  AbortMultipartUpload   
     
    *  ListParts   
     
    *  ListMultipartUploads   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/UploadPartCopy>`_    


    **Request Syntax** 
    ::

      response = multipart_upload_part.copy_from(
          CopySource='string' or {'Bucket': 'string', 'Key': 'string', 'VersionId': 'string'},
          CopySourceIfMatch='string',
          CopySourceIfModifiedSince=datetime(2015, 1, 1),
          CopySourceIfNoneMatch='string',
          CopySourceIfUnmodifiedSince=datetime(2015, 1, 1),
          CopySourceRange='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          CopySourceSSECustomerAlgorithm='string',
          CopySourceSSECustomerKey='string',
          RequestPayer='requester'
      )
    :type CopySource: str or dict
    :param CopySource: **[REQUIRED]** The name of the source bucket, key name of the source object, and optional version ID of the source object.  You can either provide this value as a string or a dictionary.  The string form is {bucket}/{key} or {bucket}/{key}?versionId={versionId} if you want to copy a specific version.  You can also provide this value as a dictionary.  The dictionary format is recommended over the string format because it is more explicit.  The dictionary format is: {'Bucket': 'bucket', 'Key': 'key', 'VersionId': 'id'}.  Note that the VersionId key is optional and may be omitted.

    
    :type CopySourceIfMatch: string
    :param CopySourceIfMatch: 

      Copies the object if its entity tag (ETag) matches the specified tag.

      

    
    :type CopySourceIfModifiedSince: datetime
    :param CopySourceIfModifiedSince: 

      Copies the object if it has been modified since the specified time.

      

    
    :type CopySourceIfNoneMatch: string
    :param CopySourceIfNoneMatch: 

      Copies the object if its entity tag (ETag) is different than the specified ETag.

      

    
    :type CopySourceIfUnmodifiedSince: datetime
    :param CopySourceIfUnmodifiedSince: 

      Copies the object if it hasn't been modified since the specified time.

      

    
    :type CopySourceRange: string
    :param CopySourceRange: 

      The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You can copy a range only if the source object is greater than 5 MB.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header. This must be the same encryption key specified in the initiate multipart upload request.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type CopySourceSSECustomerAlgorithm: string
    :param CopySourceSSECustomerAlgorithm: 

      Specifies the algorithm to use when decrypting the source object (for example, AES256).

      

    
    :type CopySourceSSECustomerKey: string
    :param CopySourceSSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.

      

    
    :type CopySourceSSECustomerKeyMD5: string
    :param CopySourceSSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CopySourceVersionId': 'string',
            'CopyPartResult': {
                'ETag': 'string',
                'LastModified': datetime(2015, 1, 1)
            },
            'ServerSideEncryption': 'AES256',
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CopySourceVersionId** *(string) --* 

          The version of the source object that was copied, if you have enabled versioning on the source bucket.

          
        

        - **CopyPartResult** *(dict) --* 

          Container for all response elements.

          
          

          - **ETag** *(string) --* 

            Entity tag of the object.

            
          

          - **LastModified** *(datetime) --* 

            Date and time at which the object was uploaded.

            
      
        

        - **ServerSideEncryption** *(string) --* 

          The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* Not returned by COS.
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: upload(**kwargs)

    

    Uploads a part in a multipart upload.

     

    .. note::

       

      In this operation, you provide part data in your request. However, you have an option to specify your existing Amazon S3 object as a data source for the part you are uploading. To upload a part from an existing object, you use the  UploadPartCopy operation. 

       

     

    You must initiate a multipart upload (see  CreateMultipartUpload ) before you can upload any part. In response to your initiate request, Amazon S3 returns an upload ID, a unique identifier, that you must include in your upload part request.

     

    Part numbers can be any number from 1 to 10,000, inclusive. A part number uniquely identifies a part and also defines its position within the object being created. If you upload a new part using the same part number that was used with a previous part, the previously uploaded part is overwritten. Each part must be at least 5 MB in size, except the last part. There is no size limit on the last part of your multipart upload.

     

    To ensure that data is not corrupted when traversing the network, specify the ``Content-MD5`` header in the upload part request. Amazon S3 checks the part data against the provided MD5 value. If they do not match, Amazon S3 returns an error. 

     

     **Note:** After you initiate multipart upload and upload one or more parts, you must either complete or abort multipart upload in order to stop getting charged for storage of the uploaded parts. Only after you either complete or abort multipart upload, Amazon S3 frees up the parts storage and stops charging you for the parts storage.

     

    For more information on multipart uploads, go to `Multipart Upload Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    For information on the permissions required to use the multipart upload API, go to `Multipart Upload API and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    You can optionally request server-side encryption where Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it for you when you access it. You have the option of providing your own encryption key, or you can use the AWS managed encryption keys. If you choose to provide your own encryption key, the request headers you provide in the request must match the headers you used in the request to initiate the upload by using  CreateMultipartUpload . For more information, go to `Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    Server-side encryption is supported by the S3 Multipart Upload actions. Unless you are using a customer-provided encryption key, you don't need to specify the encryption parameters in each UploadPart request. Instead, you only need to specify the server-side encryption parameters in the initial Initiate Multipart request. For more information, see  CreateMultipartUpload .

     

    If you requested server-side encryption using a customer-provided encryption key in your initiate multipart upload request, you must provide identical encryption information in each part upload using the following headers.

     

     
    * x-amz-server-side​-encryption​-customer-algorithm 
     
    * x-amz-server-side​-encryption​-customer-key 
     
    * x-amz-server-side​-encryption​-customer-key-MD5 
     

     

     **Special Errors**  

     

     
    * 

      
      * *Code: NoSuchUpload*   
       
      * *Cause: The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed.*   
       
      * *HTTP Status Code: 404 Not Found*   
       
      * *SOAP Fault Code Prefix: Client*   
       

     
     

     

     **Related Resources**  

     

     
    *  CreateMultipartUpload   
     
    *  CompleteMultipartUpload   
     
    *  AbortMultipartUpload   
     
    *  ListParts   
     
    *  ListMultipartUploads   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/UploadPart>`_    


    **Request Syntax** 
    ::

      response = multipart_upload_part.upload(
          Body=b'bytes'|file,
          ContentLength=123,
          ContentMD5='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester'
      )
    :type Body: bytes or seekable file-like object
    :param Body: 

      Object data.

      

    
    :type ContentLength: integer
    :param ContentLength: 

      Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.

      

    
    :type ContentMD5: string
    :param ContentMD5: 

      The base64-encoded 128-bit MD5 digest of the part data. This parameter is auto-populated when using the command from the CLI. This parameter is required if object lock parameters are specified.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm header`` . This must be the same encryption key specified in the initiate multipart upload request.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ServerSideEncryption': 'AES256',
            'ETag': 'string',
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ServerSideEncryption** *(string) --* 

          The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **ETag** *(string) --* 

          Entity tag for the uploaded object.

          
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* Not returned by COS.
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    
  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: MultipartUpload()

    Creates a MultipartUpload resource.::

      multipart_upload = multipart_upload_part.MultipartUpload()

    
    :rtype: :py:class:`S3.MultipartUpload`
    :returns: A MultipartUpload resource
    

======
Object
======



.. py:class:: S3.Object(bucket_name,key)

  A resource representing an Amazon Simple Storage Service (S3) Object::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    object = s3.Object('bucket_name','key')

  :type bucket_name: string
  :param bucket_name: The Object's bucket_name identifier. This **must** be set.
  :type key: string
  :param key: The Object's key identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  *   :py:attr:`key`

  
  These are the resource's available attributes:
  
  *   :py:attr:`accept_ranges`

  
  *   :py:attr:`cache_control`

  
  *   :py:attr:`content_disposition`

  
  *   :py:attr:`content_encoding`

  
  *   :py:attr:`content_language`

  
  *   :py:attr:`content_length`

  
  *   :py:attr:`content_type`

  
  *   :py:attr:`delete_marker`

  
  *   :py:attr:`e_tag`

  
  *   :py:attr:`expiration`

  
  *   :py:attr:`expires`

  
  *   :py:attr:`ibm_restored_copy_storage_class`

  
  *   :py:attr:`ibm_transition`

  
  *   :py:attr:`last_modified`

  
  *   :py:attr:`metadata`

  
  *   :py:attr:`missing_meta`

  
  *   :py:attr:`parts_count`

  
  *   :py:attr:`replication_status`

  
  *   :py:attr:`request_charged`

  
  *   :py:attr:`restore`

  
  *   :py:attr:`retention_expiration_date`

  
  *   :py:attr:`retention_legal_hold_count`

  
  *   :py:attr:`retention_period`

  
  *   :py:attr:`server_side_encryption`

  
  *   :py:attr:`sse_customer_algorithm`

  
  *   :py:attr:`sse_customer_key_md5`

  
  *   :py:attr:`ssekms_key_id`

  
  *   :py:attr:`storage_class`

  
  *   :py:attr:`version_id`

  
  *   :py:attr:`website_redirect_location`

  
  These are the resource's available actions:
  
  *   :py:meth:`copy()`

  
  *   :py:meth:`copy_from()`

  
  *   :py:meth:`delete()`

  
  *   :py:meth:`download_file()`

  
  *   :py:meth:`download_fileobj()`

  
  *   :py:meth:`get()`

  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`initiate_multipart_upload()`

  
  *   :py:meth:`load()`

  
  *   :py:meth:`put()`

  
  *   :py:meth:`reload()`

  
  *   :py:meth:`restore_object()`

  
  *   :py:meth:`upload_file()`

  
  *   :py:meth:`upload_fileobj()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`Acl()`

  
  *   :py:meth:`Bucket()`

  
  *   :py:meth:`MultipartUpload()`

  
  *   :py:meth:`Protection()`

  
  *   :py:meth:`Version()`

  
  These are the resource's available waiters:
  
  *   :py:meth:`wait_until_exists()`

  
  *   :py:meth:`wait_until_not_exists()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The Object's bucket_name identifier. This **must** be set.

  .. py:attribute:: key

    *(string)* The Object's key identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: accept_ranges

    

    - *(string) --* 

      Indicates that a range of bytes was specified.

      

  .. py:attribute:: cache_control

    

    - *(string) --* 

      Specifies caching behavior along the request/reply chain.

      

  .. py:attribute:: content_disposition

    

    - *(string) --* 

      Specifies presentational information for the object.

      

  .. py:attribute:: content_encoding

    

    - *(string) --* 

      Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.

      

  .. py:attribute:: content_language

    

    - *(string) --* 

      The language the content is in.

      

  .. py:attribute:: content_length

    

    - *(integer) --* 

      Size of the body in bytes.

      

  .. py:attribute:: content_type

    

    - *(string) --* 

      A standard MIME type describing the format of the object data.

      

  .. py:attribute:: delete_marker

    

    - *(boolean) --* Not returned by COS.

  .. py:attribute:: e_tag

    

    - *(string) --* 

      An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.

      

  .. py:attribute:: expiration

    

    - *(string) --* 

      If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key-value pairs providing object expiration information. The value of the rule-id is URL encoded.

      

  .. py:attribute:: expires

    

    - *(datetime) --* 

      The date and time at which the object is no longer cacheable.

      

  .. py:attribute:: ibm_restored_copy_storage_class

    

    - *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.

  .. py:attribute:: ibm_transition

    

    - *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.

  .. py:attribute:: last_modified

    

    - *(datetime) --* 

      Last modified date of the object

      

  .. py:attribute:: metadata

    

    - *(dict) --* 

      A map of metadata to store with the object in S3.

      
      

      - *(string) --* 
        

        - *(string) --* 
  


  .. py:attribute:: missing_meta

    

    - *(integer) --* 

      This is set to the number of metadata entries not returned in ``x-amz-meta`` headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.

      

  .. py:attribute:: parts_count

    

    - *(integer) --* 

      The count of parts this object has.

      

  .. py:attribute:: replication_status

    

    - *(string) --* 

      Amazon S3 can return this header if your request involves a bucket that is either a source or destination in a replication rule.

       

      In replication, you have a source bucket on which you configure replication and destination bucket where Amazon S3 stores object replicas. When you request an object (``GetObject`` ) or object metadata (``HeadObject`` ) from these buckets, Amazon S3 will return the ``x-amz-replication-status`` header in the response as follows:

       

       
      * If requesting an object from the source bucket — Amazon S3 will return the ``x-amz-replication-status`` header if the object in your request is eligible for replication. For example, suppose that in your replication configuration, you specify object prefix ``TaxDocs`` requesting Amazon S3 to replicate objects with key prefix ``TaxDocs`` . Any objects you upload with this key name prefix, for example ``TaxDocs/document1.pdf`` , are eligible for replication. For any object request with this key name prefix, Amazon S3 will return the ``x-amz-replication-status`` header with value PENDING, COMPLETED or FAILED indicating object replication status. 
       
      * If requesting an object from the destination bucket — Amazon S3 will return the ``x-amz-replication-status`` header with value REPLICA if the object in your request is a replica that Amazon S3 created. 
       

       

      For more information, see `Replication <https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html>`__ .

      

  .. py:attribute:: request_charged

    

    - *(string) --* 

      If present, indicates that the requester was successfully charged for the request.

      

  .. py:attribute:: restore

    

    - *(string) --* 

      If the object is an archived object (an object whose storage class is GLACIER), the response includes this header if either the archive restoration is in progress (see  RestoreObject or an archive copy is already restored.

       

      If an archive copy is already restored, the header value indicates when Amazon S3 is scheduled to delete the object copy. For example:

       

       ``x-amz-restore: ongoing-request="false", expiry-date="Fri, 23 Dec 2012 00:00:00 GMT"``  

       

      If the object restoration is in progress, the header returns the value ``ongoing-request="true"`` .

       

      For more information about archiving objects, see `Transitioning Objects\: General Considerations <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-transition-general-considerations>`__ .

      

  .. py:attribute:: retention_expiration_date

    

    - *(datetime) --* Date on which it will be legal to delete or modify the object. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used. 

  .. py:attribute:: retention_legal_hold_count

    

    - *(integer) --* Returns the count of legal holds on the object. If there are no legal holds, the header is not returned

  .. py:attribute:: retention_period

    

    - *(integer) --* Retention period to store on the object in seconds. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.

  .. py:attribute:: server_side_encryption

    

    - *(string) --* 

      If the object is stored using server-side encryption either with an AWS KMS customer master key (CMK) or an Amazon S3-managed encryption key, the response includes this header with the value of the server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

      

  .. py:attribute:: sse_customer_algorithm

    

    - *(string) --* 

      If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

      

  .. py:attribute:: sse_customer_key_md5

    

    - *(string) --* 

      If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

      

  .. py:attribute:: ssekms_key_id

    

    - *(string) --* Not returned by COS.

  .. py:attribute:: storage_class

    

    - *(string) --* 

      Provides storage class information of the object. Amazon S3 returns this header for all objects except for Standard storage class objects.

       

      For more information, see `Storage Classes <https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html>`__ .

      

  .. py:attribute:: version_id

    

    - *(string) --* 

      Version of the object.

      

  .. py:attribute:: website_redirect_location

    

    - *(string) --* 

      If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.

      
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: copy(CopySource, ExtraArgs=None, Callback=None, SourceClient=None, Config=None)

        
    Copy an object from one S3 location to this object.
    
    This is a managed transfer which will perform a multipart copy in
    multiple threads if necessary.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.resource('s3')
        copy_source = {
            'Bucket': 'mybucket',
            'Key': 'mykey'
        }
        bucket = s3.Bucket('otherbucket')
        obj = bucket.Object('otherkey')
        obj.copy(copy_source)
    
    :type CopySource: dict
    :param CopySource: The name of the source bucket, key name of the
        source object, and optional version ID of the source object. The
        dictionary format is:
        ``{'Bucket': 'bucket', 'Key': 'key', 'VersionId': 'id'}``. Note
        that the ``VersionId`` key is optional and may be omitted.
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the copy.
    
    :type SourceClient: ibm_botocore or ibm_boto3 Client
    :param SourceClient: The client to be used for operation that
        may happen at the source object. For example, this client is
        used for the head_object that determines the size of the copy.
        If no client is provided, the current client is used as the client
        for the source object.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        copy.


  .. py:method:: copy_from(**kwargs)

    

    Creates a copy of an object that is already stored in Amazon S3.

     

    .. note::

       

      You can store individual objects of up to 5 TB in Amazon S3. You create a copy of your object up to 5 GB in size in a single atomic operation using this API. However, for copying an object greater than 5 GB, you must use the multipart upload Upload Part - Copy API. For more information, see `Copy Object Using the REST Multipart Upload API <https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjctsUsingRESTMPUapi.html>`__ .

       

     

    When copying an object, you can preserve all metadata (default) or specify new metadata. However, the ACL is not preserved and is set to private for the user making the request. To override the default ACL setting, specify a new ACL when generating a copy request. For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ .

     

    .. warning::

       

      Amazon S3 transfer acceleration does not support cross-region copies. If you request a cross-region copy using a transfer acceleration endpoint, you get a 400 ``Bad Request`` error. For more information about transfer acceleration, see `Transfer Acceleration <https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html>`__ .

       

     

    All copy requests must be authenticated. Additionally, you must have *read* access to the source object and *write* access to the destination bucket. For more information, see `REST Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html>`__ . Both the Region that you want to copy the object from and the Region that you want to copy the object to must be enabled for your account.

     

    To only copy an object under certain conditions, such as whether the ``Etag`` matches or whether the object was modified before or after a specified date, use the request parameters ``x-amz-copy-source-if-match`` , ``x-amz-copy-source-if-none-match`` , ``x-amz-copy-source-if-unmodified-since`` , or ``x-amz-copy-source-if-modified-since`` .

     

    .. note::

       

      All headers with the ``x-amz-`` prefix, including ``x-amz-copy-source`` , must be signed.

       

     

    You can use this operation to change the storage class of an object that is already stored in Amazon S3 using the ``StorageClass`` parameter. For more information, see `Storage Classes <https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html>`__ .

     

    The source object that you are copying can be encrypted or unencrypted. If the source object is encrypted, it can be encrypted by server-side encryption using AWS managed encryption keys or by using a customer-provided encryption key. When copying an object, you can request that Amazon S3 encrypt the target object by using either the AWS managed encryption keys or by using your own encryption key. You can do this regardless of the form of server-side encryption that was used to encrypt the source, or even if the source object was not encrypted. For more information about server-side encryption, see `Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html>`__ .

     

    A copy request might return an error when Amazon S3 receives the copy request or while Amazon S3 is copying the files. If the error occurs before the copy operation starts, you receive a standard Amazon S3 error. If the error occurs during the copy operation, the error response is embedded in the ``200 OK`` response. This means that a ``200 OK`` response can contain either a success or an error. Design your application to parse the contents of the response and handle it appropriately.

     

    If the copy is successful, you receive a response with information about the copied object.

     

    .. note::

       

      If the request is an HTTP 1.1 request, the response is chunk encoded. If it were not, it would not contain the content-length, and you would need to read the entire body.

       

     

    Consider the following when using request headers:

     

     
    * Consideration 1 – If both the ``x-amz-copy-source-if-match`` and ``x-amz-copy-source-if-unmodified-since`` headers are present in the request and evaluate as follows, Amazon S3 returns 200 OK and copies the data: 

       
      * ``x-amz-copy-source-if-match`` condition evaluates to true 
       
      * ``x-amz-copy-source-if-unmodified-since`` condition evaluates to false 
       

     
     
    * Consideration 2 – If both of the ``x-amz-copy-source-if-none-match`` and ``x-amz-copy-source-if-modified-since`` headers are present in the request and evaluate as follows, Amazon S3 returns the ``412 Precondition Failed`` response code: 

       
      * ``x-amz-copy-source-if-none-match`` condition evaluates to false 
       
      * ``x-amz-copy-source-if-modified-since`` condition evaluates to true 
       

     
     

     

    The copy request charge is based on the storage class and Region you specify for the destination object. For pricing information, see `Amazon S3 Pricing <https://aws.amazon.com/s3/pricing/>`__ .

     

    Following are other considerations when using ``CopyObject`` :

      Versioning  

    By default, ``x-amz-copy-source`` identifies the current version of an object to copy. (If the current version is a delete marker, Amazon S3 behaves as if the object was deleted.) To copy a different version, use the ``versionId`` subresource.

     

    If you enable versioning on the target bucket, Amazon S3 generates a unique version ID for the object being copied. This version ID is different from the version ID of the source object. Amazon S3 returns the version ID of the copied object in the ``x-amz-version-id`` response header in the response.

     

    If you do not enable versioning or suspend it on the target bucket, the version ID that Amazon S3 generates is always null.

     

    If the source object's storage class is GLACIER, you must restore a copy of this object before you can use it as a source object for the copy operation. For more information, see .

      Access Permissions  

    When copying an object, you can optionally specify the accounts or groups that should be granted specific permissions on the new object. There are two ways to grant the permissions using the request headers:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . 
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

      Server-Side- Encryption-Specific Request Headers  

    To encrypt the target object, you must provide the appropriate encryption-related request headers. The one you use depends on whether you want to use AWS managed encryption keys or provide your own encryption key. 

     

     
    * To encrypt the target object using server-side encryption with an AWS managed encryption key, provide the following request headers, as appropriate. 

       
      * ``x-amz-server-side​-encryption``   
       
      * ``x-amz-server-side-encryption-aws-kms-key-id``   
       
      * ``x-amz-server-side-encryption-context``   
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data. If you want to use a customer managed AWS KMS CMK, you must provide the ``x-amz-server-side-encryption-aws-kms-key-id`` of the symmetric customer managed CMK. Amazon S3 only supports symmetric CMKs and not asymmetric CMKs. For more information, see `Using Symmetric and Asymmetric Keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html>`__ in the *AWS Key Management Service Developer Guide* .

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * To encrypt the target object using server-side encryption with an encryption key that you provide, use the following headers. 

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     
     
    * If the source object is encrypted using server-side encryption with customer-provided encryption keys, you must use the following headers. 

       
      * x-amz-copy-source​-server-side​-encryption​-customer-algorithm 
       
      * x-amz-copy-source​-server-side​-encryption​-customer-key 
       
      * x-amz-copy-source-​server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in Amazon KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

      Access-Control-List (ACL)-Specific Request Headers  

    You also can use the following access control–related headers with this operation. By default, all objects are private. Only the owner has full access control. When adding a new object, you can grant permissions to individual AWS accounts or to predefined groups defined by Amazon S3. These permissions are then added to the access control list (ACL) on the object. For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ . With this operation, you can grant access permissions using one of the following two methods:

     

     
    * Specify a canned ACL (``x-amz-acl`` ) — Amazon S3 supports a set of predefined ACLs, known as *canned ACLs* . Each canned ACL has a predefined set of grantees and permissions. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly — To explicitly grant access permissions to specific AWS accounts or groups, use the following headers. Each header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . In the header, you specify a list of grantees who get the specific permission. To grant permissions explicitly, use: 

       
      * x-amz-grant-read 
       
      * x-amz-grant-write 
       
      * x-amz-grant-read-acp 
       
      * x-amz-grant-write-acp 
       
      * x-amz-grant-full-control 
       

     

    You specify each grantee as a type=value pair, where the type is one of the following:

     

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants the AWS accounts identified by email addresses permissions to read object data and its metadata:

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

       

    The following operations are related to ``CopyObject`` :

     

     
    *  PutObject   
     
    *  GetObject   
     

     

    For more information, see `Copying Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjectsExamples.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/CopyObject>`_    


    **Request Syntax** 
    ::

      response = object.copy_from(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read'|'aws-exec-read'|'bucket-owner-read'|'bucket-owner-full-control',
          CacheControl='string',
          ContentDisposition='string',
          ContentEncoding='string',
          ContentLanguage='string',
          ContentType='string',
          CopySource='string' or {'Bucket': 'string', 'Key': 'string', 'VersionId': 'string'},
          CopySourceIfMatch='string',
          CopySourceIfModifiedSince=datetime(2015, 1, 1),
          CopySourceIfNoneMatch='string',
          CopySourceIfUnmodifiedSince=datetime(2015, 1, 1),
          Expires=datetime(2015, 1, 1),
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWriteACP='string',
          Metadata={
              'string': 'string'
          },
          MetadataDirective='COPY'|'REPLACE',
          RetentionDirective='COPY'|'REPLACE',
          RetentionExpirationDate=datetime(2015, 1, 1),
          RetentionLegalHoldId='string',
          RetentionPeriod=123,
          ServerSideEncryption='AES256',
          StorageClass='ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
          WebsiteRedirectLocation='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          SSEKMSKeyId='string',
          CopySourceSSECustomerAlgorithm='string',
          CopySourceSSECustomerKey='string',
          RequestPayer='requester'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the object.

      

    
    :type CacheControl: string
    :param CacheControl: 

      Specifies caching behavior along the request/reply chain.

      

    
    :type ContentDisposition: string
    :param ContentDisposition: 

      Specifies presentational information for the object.

      

    
    :type ContentEncoding: string
    :param ContentEncoding: 

      Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.

      

    
    :type ContentLanguage: string
    :param ContentLanguage: 

      The language the content is in.

      

    
    :type ContentType: string
    :param ContentType: 

      A standard MIME type describing the format of the object data.

      

    
    :type CopySource: str or dict
    :param CopySource: **[REQUIRED]** The name of the source bucket, key name of the source object, and optional version ID of the source object.  You can either provide this value as a string or a dictionary.  The string form is {bucket}/{key} or {bucket}/{key}?versionId={versionId} if you want to copy a specific version.  You can also provide this value as a dictionary.  The dictionary format is recommended over the string format because it is more explicit.  The dictionary format is: {'Bucket': 'bucket', 'Key': 'key', 'VersionId': 'id'}.  Note that the VersionId key is optional and may be omitted.

    
    :type CopySourceIfMatch: string
    :param CopySourceIfMatch: 

      Copies the object if its entity tag (ETag) matches the specified tag.

      

    
    :type CopySourceIfModifiedSince: datetime
    :param CopySourceIfModifiedSince: 

      Copies the object if it has been modified since the specified time.

      

    
    :type CopySourceIfNoneMatch: string
    :param CopySourceIfNoneMatch: 

      Copies the object if its entity tag (ETag) is different than the specified ETag.

      

    
    :type CopySourceIfUnmodifiedSince: datetime
    :param CopySourceIfUnmodifiedSince: 

      Copies the object if it hasn't been modified since the specified time.

      

    
    :type Expires: datetime
    :param Expires: 

      The date and time at which the object is no longer cacheable.

      

    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to read the object data and its metadata.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the object ACL.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable object.

      

    
    :type Metadata: dict
    :param Metadata: 

      A map of metadata to store with the object in S3.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type MetadataDirective: string
    :param MetadataDirective: 

      Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request.

      

    
    :type RetentionDirective: string
    :param RetentionDirective: This header controls how the Protection state of the source object is copied to the destination object.If copied, the retention period and all legal holds are copied onto the new object. The legal hold date's is set to the date of the copy.

    
    :type RetentionExpirationDate: datetime
    :param RetentionExpirationDate: Date on which it will be legal to delete or modify the object. This field can only be specified if Retention-Directive is REPLACE. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used. 

    
    :type RetentionLegalHoldId: string
    :param RetentionLegalHoldId: A single legal hold to apply to the object. This field can only be specified if Retention-Directive is REPLACE. A legal hold is a character long string of max length 64. The object cannot be overwritten or deleted until all legal holds associated with the object are removed.

    
    :type RetentionPeriod: integer
    :param RetentionPeriod: Retention period to store on the object in seconds. This field can only be specified if Retention-Directive is REPLACE. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.

    
    :type ServerSideEncryption: string
    :param ServerSideEncryption: 

      The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

      

    
    :type StorageClass: string
    :param StorageClass: 

      The type of storage to use for the object. Defaults to 'STANDARD'.

      

    
    :type WebsiteRedirectLocation: string
    :param WebsiteRedirectLocation: 

      If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type SSEKMSKeyId: string
    :param SSEKMSKeyId: 

      Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. For information about configuring using any of the officially supported AWS SDKs and AWS CLI, see `Specifying the Signature Version in Request Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version>`__ in the *Amazon S3 Developer Guide* .

      

    
    :type CopySourceSSECustomerAlgorithm: string
    :param CopySourceSSECustomerAlgorithm: 

      Specifies the algorithm to use when decrypting the source object (for example, AES256).

      

    
    :type CopySourceSSECustomerKey: string
    :param CopySourceSSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.

      

    
    :type CopySourceSSECustomerKeyMD5: string
    :param CopySourceSSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CopyObjectResult': {
                'ETag': 'string',
                'LastModified': datetime(2015, 1, 1)
            },
            'Expiration': 'string',
            'CopySourceVersionId': 'string',
            'VersionId': 'string',
            'ServerSideEncryption': 'AES256',
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CopyObjectResult** *(dict) --* 

          Container for all response elements.

          
          

          - **ETag** *(string) --* 

            Returns the ETag of the new object. The ETag reflects only changes to the contents of an object, not its metadata. The source and destination ETag is identical for a successfully copied object.

            
          

          - **LastModified** *(datetime) --* 

            Returns the date that the object was last modified.

            
      
        

        - **Expiration** *(string) --* 

          If the object expiration is configured, the response includes this header.

          
        

        - **CopySourceVersionId** *(string) --* 

          Version of the copied object in the destination bucket.

          
        

        - **VersionId** *(string) --* 

          Version ID of the newly created copy.

          
        

        - **ServerSideEncryption** *(string) --* 

          The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* 

          If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric customer managed customer master key (CMK) that was used for the object.

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: delete(**kwargs)

    

    Removes the null version (if there is one) of an object and inserts a delete marker, which becomes the latest version of the object. If there isn't a null version, Amazon S3 does not remove any objects.

     

    To remove a specific version, you must be the bucket owner and you must use the version Id subresource. Using this subresource permanently deletes the version. If the object deleted is a delete marker, Amazon S3 sets the response header, ``x-amz-delete-marker`` , to true. 

     

    If the object you want to delete is in a bucket where the bucket versioning configuration is MFA Delete enabled, you must include the ``x-amz-mfa`` request header in the DELETE ``versionId`` request. Requests that include ``x-amz-mfa`` must use HTTPS. 

     

    For more information about MFA Delete, see `Using MFA Delete <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMFADelete.html>`__ . To see sample requests that use versioning, see `Sample Request <https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectDELETE.html#ExampleVersionObjectDelete>`__ . 

     

    You can delete objects by explicitly calling the DELETE Object API or configure its lifecycle ( PutBucketLifecycle ) to enable Amazon S3 to remove them for you. If you want to block users or accounts from removing or deleting objects from your bucket, you must deny them the ``s3:DeleteObject`` , ``s3:DeleteObjectVersion`` , and ``s3:PutLifeCycleConfiguration`` actions. 

     

    The following operation is related to ``DeleteObject`` :

     

     
    *  PutObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteObject>`_    


    **Request Syntax** 
    ::

      response = object.delete(
          MFA='string',
          VersionId='string',
          RequestPayer='requester'
      )
    :type MFA: string
    :param MFA: 

      The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA delete enabled.

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'DeleteMarker': True|False,
            'VersionId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **DeleteMarker** *(boolean) --* Not returned by COS.
        

        - **VersionId** *(string) --* 

          Returns the version ID of the delete marker created as a result of the DELETE operation.

          
        

        - **RequestCharged** *(string) --* Not returned by COS.
    

  .. py:method:: download_file(Filename, ExtraArgs=None, Callback=None, Config=None)

        
    Download an S3 object to a file.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.resource('s3')
        s3.Object('mybucket', 'hello.txt').download_file('/tmp/hello.txt')
    
    Similar behavior as S3Transfer's download_file() method,
    except that parameters are capitalized. Detailed examples can be found at
    :ref:`S3Transfer's Usage <ref_s3transfer_usage>`.
    
    :type Filename: str
    :param Filename: The path to the file to download to.
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation.
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the download.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        transfer.


  .. py:method:: download_fileobj(Fileobj, ExtraArgs=None, Callback=None, Config=None)

        
    Download this object from S3 to a file-like object.
    
    The file-like object must be in binary mode.
    
    This is a managed transfer which will perform a multipart download in
    multiple threads if necessary.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.resource('s3')
        bucket = s3.Bucket('mybucket')
        obj = bucket.Object('mykey')
    
        with open('filename', 'wb') as data:
            obj.download_fileobj(data)
    
    :type Fileobj: a file-like object
    :param Fileobj: A file-like object to download into. At a minimum, it must
        implement the `write` method and must accept bytes.
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation.
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the download.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        download.


  .. py:method:: get(**kwargs)

    

    Retrieves objects from Amazon S3. To use ``GET`` , you must have ``READ`` access to the object. If you grant ``READ`` access to the anonymous user, you can return the object without using an authorization header.

     

    An Amazon S3 bucket has no directory hierarchy such as you would find in a typical computer file system. You can, however, create a logical hierarchy by using object key names that imply a folder structure. For example, instead of naming an object ``sample.jpg`` , you can name it ``photos/2006/February/sample.jpg`` .

     

    To get an object from such a logical hierarchy, specify the full key name for the object in the ``GET`` operation. For a virtual hosted-style request example, if you have the object ``photos/2006/February/sample.jpg`` , specify the resource as ``/photos/2006/February/sample.jpg`` . For a path-style request example, if you have the object ``photos/2006/February/sample.jpg`` in the bucket named ``examplebucket`` , specify the resource as ``/examplebucket/photos/2006/February/sample.jpg`` . For more information about request types, see `HTTP Host Header Bucket Specification <https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html#VirtualHostingSpecifyBucket>`__ .

     

    To distribute large files to many people, you can save bandwidth costs by using BitTorrent. For more information, see `Amazon S3 Torrent <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3Torrent.html>`__ . For more information about returning the ACL of an object, see  GetObjectAcl .

     

    If the object you are retrieving is stored in the GLACIER or DEEP_ARCHIVE storage classes, before you can retrieve the object you must first restore a copy using . Otherwise, this operation returns an ``InvalidObjectStateError`` error. For information about restoring archived objects, see `Restoring Archived Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html>`__ .

     

    Encryption request headers, like ``x-amz-server-side-encryption`` , should not be sent for GET requests if your object uses server-side encryption with CMKs stored in AWS KMS (SSE-KMS) or server-side encryption with Amazon S3–managed encryption keys (SSE-S3). If your object does use these types of keys, you’ll get an HTTP 400 BadRequest error.

     

    If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object, you must use the following headers:

     

     
    * x-amz-server-side​-encryption​-customer-algorithm 
     
    * x-amz-server-side​-encryption​-customer-key 
     
    * x-amz-server-side​-encryption​-customer-key-MD5 
     

     

    For more information about SSE-C, see `Server-Side Encryption (Using Customer-Provided Encryption Keys) <https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html>`__ .

     

    Assuming you have permission to read object tags (permission for the ``s3:GetObjectVersionTagging`` action), the response also returns the ``x-amz-tagging-count`` header that provides the count of number of tags associated with the object. You can use  GetObjectTagging to retrieve the tag set associated with an object.

     

     **Permissions**  

     

    You need the ``s3:GetObject`` permission for this operation. For more information, see `Specifying Permissions in a Policy <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html>`__ . If the object you request does not exist, the error Amazon S3 returns depends on whether you also have the ``s3:ListBucket`` permission.

     

     
    * If you have the ``s3:ListBucket`` permission on the bucket, Amazon S3 will return an HTTP status code 404 ("no such key") error. 
     
    * If you don’t have the ``s3:ListBucket`` permission, Amazon S3 will return an HTTP status code 403 ("access denied") error. 
     

     

     **Versioning**  

     

    By default, the GET operation returns the current version of an object. To return a different version, use the ``versionId`` subresource.

     

    .. note::

       

      If the current version of the object is a delete marker, Amazon S3 behaves as if the object was deleted and includes ``x-amz-delete-marker: true`` in the response.

       

     

    For more information about versioning, see  PutBucketVersioning . 

     

     **Overriding Response Header Values**  

     

    There are times when you want to override certain response header values in a GET response. For example, you might override the Content-Disposition response header value in your GET request.

     

    You can override values for a set of response headers using the following query parameters. These response header values are sent only on a successful request, that is, when status code 200 OK is returned. The set of headers you can override using these parameters is a subset of the headers that Amazon S3 accepts when you create an object. The response headers that you can override for the GET response are ``Content-Type`` , ``Content-Language`` , ``Expires`` , ``Cache-Control`` , ``Content-Disposition`` , and ``Content-Encoding`` . To override these header values in the GET response, you use the following request parameters.

     

    .. note::

       

      You must sign the request, either using an Authorization header or a presigned URL, when using these parameters. They cannot be used with an unsigned (anonymous) request.

       

     

     
    * ``response-content-type``   
     
    * ``response-content-language``   
     
    * ``response-expires``   
     
    * ``response-cache-control``   
     
    * ``response-content-disposition``   
     
    * ``response-content-encoding``   
     

     

     **Additional Considerations about Request Headers**  

     

    If both of the ``If-Match`` and ``If-Unmodified-Since`` headers are present in the request as follows: ``If-Match`` condition evaluates to ``true`` , and; ``If-Unmodified-Since`` condition evaluates to ``false`` ; then, S3 returns 200 OK and the data requested. 

     

    If both of the ``If-None-Match`` and ``If-Modified-Since`` headers are present in the request as follows:``If-None-Match`` condition evaluates to ``false`` , and; ``If-Modified-Since`` condition evaluates to ``true`` ; then, S3 returns 304 Not Modified response code.

     

    For more information about conditional requests, see `RFC 7232 <https://tools.ietf.org/html/rfc7232>`__ .

     

    The following operations are related to ``GetObject`` :

     

     
    *  ListBuckets   
     
    *  GetObjectAcl   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetObject>`_    


    **Request Syntax** 
    ::

      response = object.get(
          IfMatch='string',
          IfModifiedSince=datetime(2015, 1, 1),
          IfNoneMatch='string',
          IfUnmodifiedSince=datetime(2015, 1, 1),
          MirrorDestination='string',
          Range='string',
          ResponseCacheControl='string',
          ResponseContentDisposition='string',
          ResponseContentEncoding='string',
          ResponseContentLanguage='string',
          ResponseContentType='string',
          ResponseExpires=datetime(2015, 1, 1),
          VersionId='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester',
          PartNumber=123
      )
    :type IfMatch: string
    :param IfMatch: 

      Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).

      

    
    :type IfModifiedSince: datetime
    :param IfModifiedSince: 

      Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).

      

    
    :type IfNoneMatch: string
    :param IfNoneMatch: 

      Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).

      

    
    :type IfUnmodifiedSince: datetime
    :param IfUnmodifiedSince: 

      Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Range: string
    :param Range: 

      Downloads the specified range bytes of an object. For more information about the HTTP Range header, see `http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35 .

      

    
    :type ResponseCacheControl: string
    :param ResponseCacheControl: 

      Sets the ``Cache-Control`` header of the response.

      

    
    :type ResponseContentDisposition: string
    :param ResponseContentDisposition: 

      Sets the ``Content-Disposition`` header of the response

      

    
    :type ResponseContentEncoding: string
    :param ResponseContentEncoding: 

      Sets the ``Content-Encoding`` header of the response.

      

    
    :type ResponseContentLanguage: string
    :param ResponseContentLanguage: 

      Sets the ``Content-Language`` header of the response.

      

    
    :type ResponseContentType: string
    :param ResponseContentType: 

      Sets the ``Content-Type`` header of the response.

      

    
    :type ResponseExpires: datetime
    :param ResponseExpires: 

      Sets the ``Expires`` header of the response.

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PartNumber: integer
    :param PartNumber: 

      Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Body': StreamingBody(),
            'DeleteMarker': True|False,
            'AcceptRanges': 'string',
            'Expiration': 'string',
            'Restore': 'string',
            'LastModified': datetime(2015, 1, 1),
            'ContentLength': 123,
            'ETag': 'string',
            'MissingMeta': 123,
            'VersionId': 'string',
            'CacheControl': 'string',
            'ContentDisposition': 'string',
            'ContentEncoding': 'string',
            'ContentLanguage': 'string',
            'ContentRange': 'string',
            'ContentType': 'string',
            'Expires': datetime(2015, 1, 1),
            'WebsiteRedirectLocation': 'string',
            'ServerSideEncryption': 'AES256',
            'Metadata': {
                'string': 'string'
            },
            'RetentionExpirationDate': datetime(2015, 1, 1),
            'RetentionLegalHoldCount': 123,
            'RetentionPeriod': 123,
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'RequestCharged': 'requester',
            'ReplicationStatus': 'COMPLETE'|'PENDING'|'FAILED'|'REPLICA',
            'PartsCount': 123,
            'IbmRestoredCopyStorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'IbmTransition': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Body** (:class:`.StreamingBody`) -- 

          Object data.

          
        

        - **DeleteMarker** *(boolean) --* Not returned by COS.
        

        - **AcceptRanges** *(string) --* 

          Indicates that a range of bytes was specified.

          
        

        - **Expiration** *(string) --* 

          If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key-value pairs providing object expiration information. The value of the rule-id is URL encoded.

          
        

        - **Restore** *(string) --* 

          Provides information about object restoration operation and expiration time of the restored object copy.

          
        

        - **LastModified** *(datetime) --* 

          Last modified date of the object

          
        

        - **ContentLength** *(integer) --* 

          Size of the body in bytes.

          
        

        - **ETag** *(string) --* 

          An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.

          
        

        - **MissingMeta** *(integer) --* 

          This is set to the number of metadata entries not returned in ``x-amz-meta`` headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.

          
        

        - **VersionId** *(string) --* 

          Version of the object.

          
        

        - **CacheControl** *(string) --* 

          Specifies caching behavior along the request/reply chain.

          
        

        - **ContentDisposition** *(string) --* 

          Specifies presentational information for the object.

          
        

        - **ContentEncoding** *(string) --* 

          Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.

          
        

        - **ContentLanguage** *(string) --* 

          The language the content is in.

          
        

        - **ContentRange** *(string) --* 

          The portion of the object returned in the response.

          
        

        - **ContentType** *(string) --* 

          A standard MIME type describing the format of the object data.

          
        

        - **Expires** *(datetime) --* 

          The date and time at which the object is no longer cacheable.

          
        

        - **WebsiteRedirectLocation** *(string) --* 

          If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.

          
        

        - **ServerSideEncryption** *(string) --* 

          The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **Metadata** *(dict) --* 

          A map of metadata to store with the object in S3.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **RetentionExpirationDate** *(datetime) --* Date on which it will be legal to delete or modify the object. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used. 
        

        - **RetentionLegalHoldCount** *(integer) --* Returns the count of legal holds on the object. If there are no legal holds, the header is not returned
        

        - **RetentionPeriod** *(integer) --* Retention period to store on the object in seconds. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* Ignored by COS if present.
        

        - **StorageClass** *(string) --* 

          Provides storage class information of the object. Amazon S3 returns this header for all objects except for Standard storage class objects.

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
        

        - **ReplicationStatus** *(string) --* 

          Amazon S3 can return this if your request involves a bucket that is either a source or destination in a replication rule.

          
        

        - **PartsCount** *(integer) --* 

          The count of parts this object has.

          
        

        - **IbmRestoredCopyStorageClass** *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.
        

        - **IbmTransition** *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.
    

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: initiate_multipart_upload(**kwargs)

    

    This operation initiates a multipart upload and returns an upload ID. This upload ID is used to associate all of the parts in the specific multipart upload. You specify this upload ID in each of your subsequent upload part requests (see  UploadPart ). You also include this upload ID in the final request to either complete or abort the multipart upload request.

     

    For more information about multipart uploads, see `Multipart Upload Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html>`__ .

     

    If you have configured a lifecycle rule to abort incomplete multipart uploads, the upload must complete within the number of days specified in the bucket lifecycle configuration. Otherwise, the incomplete multipart upload becomes eligible for an abort operation and Amazon S3 aborts the multipart upload. For more information, see `Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config>`__ .

     

    For information about the permissions required to use the multipart upload API, see `Multipart Upload API and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ .

     

    For request signing, multipart upload is just a series of regular requests. You initiate a multipart upload, send one or more requests to upload parts, and then complete the multipart upload process. You sign each request individually. There is nothing special about signing multipart upload requests. For more information about signing, see `Authenticating Requests (AWS Signature Version 4) <https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html>`__ .

     

    .. note::

       

      After you initiate a multipart upload and upload one or more parts, to stop being charged for storing the uploaded parts, you must either complete or abort the multipart upload. Amazon S3 frees up the space used to store the parts and stop charging you for storing them only after you either complete or abort a multipart upload. 

       

     

    You can optionally request server-side encryption. For server-side encryption, Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. You can provide your own encryption key, or use AWS Key Management Service (AWS KMS) customer master keys (CMKs) or Amazon S3-managed encryption keys. If you choose to provide your own encryption key, the request headers you provide in  UploadPart ) and  UploadPartCopy ) requests must match the headers you used in the request to initiate the upload by using ``CreateMultipartUpload`` . 

     

    To perform a multipart upload with encryption using an AWS KMS CMK, the requester must have permission to the ``kms:Encrypt`` , ``kms:Decrypt`` , ``kms:ReEncrypt*`` , ``kms:GenerateDataKey*`` , and ``kms:DescribeKey`` actions on the key. These permissions are required because Amazon S3 must decrypt and read data from the encrypted file parts before it completes the multipart upload.

     

    If your AWS Identity and Access Management (IAM) user or role is in the same AWS account as the AWS KMS CMK, then you must have these permissions on the key policy. If your IAM user or role belongs to a different account than the key, then you must have the permissions on both the key policy and your IAM user or role.

     

    For more information, see `Protecting Data Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html>`__ .

      Access Permissions  

    When copying an object, you can optionally specify the accounts or groups that should be granted specific permissions on the new object. There are two ways to grant the permissions using the request headers:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . 
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

      Server-Side- Encryption-Specific Request Headers  

    You can optionally tell Amazon S3 to encrypt data at rest using server-side encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. The option you use depends on whether you want to use AWS managed encryption keys or provide your own encryption key. 

     

     
    * Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys used to encrypt data, specify the following headers in the request. 

       
      * x-amz-server-side​-encryption 
       
      * x-amz-server-side-encryption-aws-kms-key-id 
       
      * x-amz-server-side-encryption-context 
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data.

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * Use customer-provided encryption keys – If you want to manage your own encryption keys, provide all the following headers in the request. 

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

      Access-Control-List (ACL)-Specific Request Headers  

    You also can use the following access control–related headers with this operation. By default, all objects are private. Only the owner has full access control. When adding a new object, you can grant permissions to individual AWS accounts or to predefined groups defined by Amazon S3. These permissions are then added to the access control list (ACL) on the object. For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ . With this operation, you can grant access permissions using one of the following two methods:

     

     
    * Specify a canned ACL (``x-amz-acl`` ) — Amazon S3 supports a set of predefined ACLs, known as *canned ACLs* . Each canned ACL has a predefined set of grantees and permissions. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly — To explicitly grant access permissions to specific AWS accounts or groups, use the following headers. Each header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . In the header, you specify a list of grantees who get the specific permission. To grant permissions explicitly, use: 

       
      * x-amz-grant-read 
       
      * x-amz-grant-write 
       
      * x-amz-grant-read-acp 
       
      * x-amz-grant-write-acp 
       
      * x-amz-grant-full-control 
       

     

    You specify each grantee as a type=value pair, where the type is one of the following:

     

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants the AWS accounts identified by email addresses permissions to read object data and its metadata:

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

       

    The following operations are related to ``CreateMultipartUpload`` :

     

     
    *  UploadPart   
     
    *  CompleteMultipartUpload   
     
    *  AbortMultipartUpload   
     
    *  ListParts   
     
    *  ListMultipartUploads   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/CreateMultipartUpload>`_    


    **Request Syntax** 
    ::

      multipart_upload = object.initiate_multipart_upload(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read'|'aws-exec-read'|'bucket-owner-read'|'bucket-owner-full-control',
          CacheControl='string',
          ContentDisposition='string',
          ContentEncoding='string',
          ContentLanguage='string',
          ContentType='string',
          Expires=datetime(2015, 1, 1),
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWriteACP='string',
          Metadata={
              'string': 'string'
          },
          ServerSideEncryption='AES256',
          StorageClass='ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
          WebsiteRedirectLocation='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          SSEKMSKeyId='string',
          RequestPayer='requester'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the object.

      

    
    :type CacheControl: string
    :param CacheControl: 

      Specifies caching behavior along the request/reply chain.

      

    
    :type ContentDisposition: string
    :param ContentDisposition: 

      Specifies presentational information for the object.

      

    
    :type ContentEncoding: string
    :param ContentEncoding: 

      Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.

      

    
    :type ContentLanguage: string
    :param ContentLanguage: 

      The language the content is in.

      

    
    :type ContentType: string
    :param ContentType: 

      A standard MIME type describing the format of the object data.

      

    
    :type Expires: datetime
    :param Expires: 

      The date and time at which the object is no longer cacheable.

      

    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to read the object data and its metadata.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the object ACL.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable object.

      

    
    :type Metadata: dict
    :param Metadata: 

      A map of metadata to store with the object in S3.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type ServerSideEncryption: string
    :param ServerSideEncryption: 

      The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

      

    
    :type StorageClass: string
    :param StorageClass: 

      The type of storage to use for the object. Defaults to 'STANDARD'.

      

    
    :type WebsiteRedirectLocation: string
    :param WebsiteRedirectLocation: 

      If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type SSEKMSKeyId: string
    :param SSEKMSKeyId: Ignored by COS if present.

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: :py:class:`s3.MultipartUpload`
    :returns: MultipartUpload resource
    

  .. py:method:: load()

    Calls :py:meth:`S3.Client.head_object` to update the attributes of the Object resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      object.load()
    :returns: None

  .. py:method:: put(**kwargs)

    

    Adds an object to a bucket. You must have WRITE permissions on a bucket to add an object to it.

     

    Amazon S3 never adds partial objects; if you receive a success response, Amazon S3 added the entire object to the bucket.

     

    Amazon S3 is a distributed system. If it receives multiple write requests for the same object simultaneously, it overwrites all but the last object written. Amazon S3 does not provide object locking; if you need this, make sure to build it into your application layer or use versioning instead.

     

    To ensure that data is not corrupted traversing the network, use the ``Content-MD5`` header. When you use this header, Amazon S3 checks the object against the provided MD5 value and, if they do not match, returns an error. Additionally, you can calculate the MD5 while putting an object to Amazon S3 and compare the returned ETag to the calculated MD5 value.

     

    .. note::

       

      To configure your application to send the request headers before sending the request body, use the ``100-continue`` HTTP status code. For PUT operations, this helps you avoid sending the message body if the message is rejected based on the headers (for example, because authentication fails or a redirect occurs). For more information on the ``100-continue`` HTTP status code, see Section 8.2.3 of `http\://www.ietf.org/rfc/rfc2616.txt <http://www.ietf.org/rfc/rfc2616.txt>`__ .

       

     

    You can optionally request server-side encryption. With server-side encryption, Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts the data when you access it. You have the option to provide your own encryption key or use AWS managed encryption keys. For more information, see `Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html>`__ .

      Access Permissions  

    You can optionally specify the accounts or groups that should be granted specific permissions on the new object. There are two ways to grant the permissions using the request headers:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . 
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

      Server-Side- Encryption-Specific Request Headers  

    You can optionally tell Amazon S3 to encrypt data at rest using server-side encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. The option you use depends on whether you want to use AWS managed encryption keys or provide your own encryption key. 

     

     
    * Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys used to encrypt data, specify the following headers in the request. 

       
      * x-amz-server-side​-encryption 
       
      * x-amz-server-side-encryption-aws-kms-key-id 
       
      * x-amz-server-side-encryption-context 
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data. If you want to use a customer managed AWS KMS CMK, you must provide the ``x-amz-server-side-encryption-aws-kms-key-id`` of the symmetric customer managed CMK. Amazon S3 only supports symmetric CMKs and not asymmetric CMKs. For more information, see `Using Symmetric and Asymmetric Keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html>`__ in the *AWS Key Management Service Developer Guide* .

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * Use customer-provided encryption keys – If you want to manage your own encryption keys, provide all the following headers in the request. 

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

      Access-Control-List (ACL)-Specific Request Headers  

    You also can use the following access control–related headers with this operation. By default, all objects are private. Only the owner has full access control. When adding a new object, you can grant permissions to individual AWS accounts or to predefined groups defined by Amazon S3. These permissions are then added to the Access Control List (ACL) on the object. For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ . With this operation, you can grant access permissions using one of the following two methods:

     

     
    * Specify a canned ACL (``x-amz-acl`` ) — Amazon S3 supports a set of predefined ACLs, known as canned ACLs. Each canned ACL has a predefined set of grantees and permissions. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly — To explicitly grant access permissions to specific AWS accounts or groups, use the following headers. Each header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . In the header, you specify a list of grantees who get the specific permission. To grant permissions explicitly use: 

       
      * x-amz-grant-read 
       
      * x-amz-grant-write 
       
      * x-amz-grant-read-acp 
       
      * x-amz-grant-write-acp 
       
      * x-amz-grant-full-control 
       

     

    You specify each grantee as a type=value pair, where the type is one of the following:

     

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 

      .. warning::

         Using email addresses to specify a grantee is only supported in the following AWS Regions:  

           
          * US East (N. Virginia) 
           
          * US West (N. California) 
           
          * US West (Oregon) 
           
          * Asia Pacific (Singapore) 
           
          * Asia Pacific (Sydney) 
           
          * Asia Pacific (Tokyo) 
           
          * EU (Ireland) 
           
          * South America (São Paulo) 
           

         

        For a list of all the Amazon S3 supported Regions and endpoints, see `Regions and Endpoints <https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region>`__ in the AWS General Reference

         

       
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants the AWS accounts identified by email addresses permissions to read object data and its metadata:

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

      Server-Side- Encryption-Specific Request Headers  

    You can optionally tell Amazon S3 to encrypt data at rest using server-side encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. The option you use depends on whether you want to use AWS-managed encryption keys or provide your own encryption key. 

     

     
    * Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys used to encrypt data, specify the following headers in the request. 

       
      * x-amz-server-side​-encryption 
       
      * x-amz-server-side-encryption-aws-kms-key-id 
       
      * x-amz-server-side-encryption-context 
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data. If you want to use a customer managed AWS KMS CMK, you must provide the ``x-amz-server-side-encryption-aws-kms-key-id`` of the symmetric customer managed CMK. Amazon S3 only supports symmetric CMKs and not asymmetric CMKs. For more information, see `Using Symmetric and Asymmetric Keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html>`__ in the *AWS Key Management Service Developer Guide* .

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * Use customer-provided encryption keys – If you want to manage your own encryption keys, provide all the following headers in the request. 

    .. note::

       If you use this feature, the ETag value that Amazon S3 returns in the response is not the MD5 of the object. 

     

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

       

     **Storage Class Options**  

     

    By default, Amazon S3 uses the Standard storage class to store newly created objects. The Standard storage class provides high durability and high availability. You can specify other storage classes depending on the performance needs. For more information, see `Storage Classes <https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html>`__ in the Amazon Simple Storage Service Developer Guide.

     

     **Versioning**  

     

    If you enable versioning for a bucket, Amazon S3 automatically generates a unique version ID for the object being stored. Amazon S3 returns this ID in the response using the ``x-amz-version-id response`` header. If versioning is suspended, Amazon S3 always uses null as the version ID for the object stored. For more information about returning the versioning state of a bucket, see  GetBucketVersioning . If you enable versioning for a bucket, when Amazon S3 receives multiple write requests for the same object simultaneously, it stores all of the objects.

     

     **Related Resources**  

     

     
    *  CopyObject   
     
    *  DeleteObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutObject>`_    


    **Request Syntax** 
    ::

      response = object.put(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read'|'aws-exec-read'|'bucket-owner-read'|'bucket-owner-full-control',
          Body=b'bytes'|file,
          CacheControl='string',
          ContentDisposition='string',
          ContentEncoding='string',
          ContentLanguage='string',
          ContentLength=123,
          ContentMD5='string',
          ContentType='string',
          Expires=datetime(2015, 1, 1),
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWriteACP='string',
          Metadata={
              'string': 'string'
          },
          RetentionExpirationDate=datetime(2015, 1, 1),
          RetentionLegalHoldId='string',
          RetentionPeriod=123,
          ServerSideEncryption='AES256',
          StorageClass='ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
          WebsiteRedirectLocation='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          SSEKMSKeyId='string',
          RequestPayer='requester'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the object. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ .

      

    
    :type Body: bytes or seekable file-like object
    :param Body: 

      Object data.

      

    
    :type CacheControl: string
    :param CacheControl: 

      Can be used to specify caching behavior along the request/reply chain. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9>`__ .

      

    
    :type ContentDisposition: string
    :param ContentDisposition: 

      Specifies presentational information for the object. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1>`__ .

      

    
    :type ContentEncoding: string
    :param ContentEncoding: 

      Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11>`__ .

      

    
    :type ContentLanguage: string
    :param ContentLanguage: 

      The language the content is in.

      

    
    :type ContentLength: integer
    :param ContentLength: 

      Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13>`__ .

      

    
    :type ContentMD5: string
    :param ContentMD5: 

      The base64-encoded 128-bit MD5 digest of the message (without the headers) according to RFC 1864. This header can be used as a message integrity check to verify that the data is the same data that was originally sent. Although it is optional, we recommend using the Content-MD5 mechanism as an end-to-end integrity check. For more information about REST request authentication, see `REST Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html>`__ .

      

    
    :type ContentType: string
    :param ContentType: 

      A standard MIME type describing the format of the contents. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17>`__ .

      

    
    :type Expires: datetime
    :param Expires: 

      The date and time at which the object is no longer cacheable. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21>`__ .

      

    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to read the object data and its metadata.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the object ACL.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable object.

      

    
    :type Metadata: dict
    :param Metadata: 

      A map of metadata to store with the object in S3.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type RetentionExpirationDate: datetime
    :param RetentionExpirationDate: Date on which it will be legal to delete or modify the object. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used.

    
    :type RetentionLegalHoldId: string
    :param RetentionLegalHoldId: A single legal hold to apply to the object. A legal hold is a character long string of max length 64. The object cannot be overwritten or deleted until all legal holds associated with the object are removed.

    
    :type RetentionPeriod: integer
    :param RetentionPeriod: Retention period to store on the object in seconds. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.

    
    :type ServerSideEncryption: string
    :param ServerSideEncryption: 

      The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

      

    
    :type StorageClass: string
    :param StorageClass: 

      If you don't specify, Standard is the default storage class. Amazon S3 supports other storage classes.

      

    
    :type WebsiteRedirectLocation: string
    :param WebsiteRedirectLocation: 

      If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. For information about object metadata, see `Object Key and Metadata <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html>`__ .

       

      In the following example, the request header sets the redirect to an object (anotherPage.html) in the same bucket:

       

       ``x-amz-website-redirect-location: /anotherPage.html``  

       

      In the following example, the request header sets the object redirect to another website:

       

       ``x-amz-website-redirect-location: http://www.example.com/``  

       

      For more information about website hosting in Amazon S3, see `Hosting Websites on Amazon S3 <https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html>`__ and `How to Configure Website Page Redirects <https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html>`__ . 

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type SSEKMSKeyId: string
    :param SSEKMSKeyId: Ignored by COS if present.

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Expiration': 'string',
            'ETag': 'string',
            'ServerSideEncryption': 'AES256',
            'VersionId': 'string',
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Expiration** *(string) --* 

          If the expiration is configured for the object (see  PutBucketLifecycleConfiguration ), the response includes this header. It includes the expiry-date and rule-id key-value pairs that provide information about object expiration. The value of the rule-id is URL encoded.

          
        

        - **ETag** *(string) --* 

          Entity tag for the uploaded object.

          
        

        - **ServerSideEncryption** *(string) --* 

          If you specified server-side encryption either with an AWS KMS customer master key (CMK) or Amazon S3-managed encryption key in your PUT request, the response includes this header. It confirms the encryption algorithm that Amazon S3 used to encrypt the object.

          
        

        - **VersionId** *(string) --* 

          Version of the object.

          
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* Not returned by COS.
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: reload()

    Calls :py:meth:`S3.Client.head_object` to update the attributes of the Object resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      object.reload()
    :returns: None

  .. py:method:: restore_object(**kwargs)

    

    Restores an archived copy of an object back into Amazon S3

     

    This operation performs the following types of requests: 

     

     
    * ``select`` - Perform a select query on an archived object 
     
    * ``restore an archive`` - Restore an archived object 
     

     

    To use this operation, you must have permissions to perform the ``s3:RestoreObject`` and ``s3:GetObject`` actions. The bucket owner has this permission by default and can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

     **Querying Archives with Select Requests**  

     

    You use a select type of request to perform SQL queries on archived objects. The archived objects that are being queried by the select request must be formatted as uncompressed comma-separated values (CSV) files. You can run queries and custom analytics on your archived data without having to restore your data to a hotter Amazon S3 tier. For an overview about select requests, see `Querying Archived Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/querying-glacier-archives.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    When making a select request, do the following:

     

     
    * Define an output location for the select query's output. This must be an Amazon S3 bucket in the same AWS Region as the bucket that contains the archive object that is being queried. The AWS account that initiates the job must have permissions to write to the S3 bucket. You can specify the storage class and encryption for the output objects stored in the bucket. For more information about output, see `Querying Archived Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/querying-glacier-archives.html>`__ in the *Amazon Simple Storage Service Developer Guide* . For more information about the ``S3`` structure in the request body, see the following: 

       
      *  PutObject   
       
      * `Managing Access with ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ in the *Amazon Simple Storage Service Developer Guide*   
       
      * `Protecting Data Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html>`__ in the *Amazon Simple Storage Service Developer Guide*   
       

     
     
    * Define the SQL expression for the ``SELECT`` type of restoration for your query in the request body's ``SelectParameters`` structure. You can use expressions like the following examples. 

       
      * The following expression returns all records from the specified object.  ``SELECT * FROM Object``   
       
      * Assuming that you are not using any headers for data stored in the object, you can specify columns with positional headers.  ``SELECT s._1, s._2 FROM Object s WHERE s._3 > 100``   
       
      * If you have headers and you set the ``fileHeaderInfo`` in the ``CSV`` structure in the request body to ``USE`` , you can specify headers in the query. (If you set the ``fileHeaderInfo`` field to ``IGNORE`` , the first row is skipped for the query.) You cannot mix ordinal positions with header column names.   ``SELECT s.Id, s.FirstName, s.SSN FROM S3Object s``   
       

     
     

     

    For more information about using SQL with Glacier Select restore, see `SQL Reference for Amazon S3 Select and Glacier Select <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-glacier-select-sql-reference.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 

     

    When making a select request, you can also do the following:

     

     
    * To expedite your queries, specify the ``Expedited`` tier. For more information about tiers, see "Restoring Archives," later in this topic. 
     
    * Specify details about the data serialization format of both the input object that is being queried and the serialization of the CSV-encoded query results. 
     

     

    The following are additional important facts about the select feature:

     

     
    * The output results are new Amazon S3 objects. Unlike archive retrievals, they are stored until explicitly deleted-manually or through a lifecycle policy. 
     
    * You can issue more than one select request on the same Amazon S3 object. Amazon S3 doesn't deduplicate requests, so avoid issuing duplicate requests. 
     
    * Amazon S3 accepts a select request even if the object has already been restored. A select request doesn’t return error response ``409`` . 
     

     

     **Restoring Archives**  

     

    Objects in the GLACIER and DEEP_ARCHIVE storage classes are archived. To access an archived object, you must first initiate a restore request. This restores a temporary copy of the archived object. In a restore request, you specify the number of days that you want the restored copy to exist. After the specified period, Amazon S3 deletes the temporary copy but the object remains archived in the GLACIER or DEEP_ARCHIVE storage class that object was restored from. 

     

    To restore a specific object version, you can provide a version ID. If you don't provide a version ID, Amazon S3 restores the current version.

     

    The time it takes restore jobs to finish depends on which storage class the object is being restored from and which data access tier you specify. 

     

    When restoring an archived object (or using a select request), you can specify one of the following data access tier options in the ``Tier`` element of the request body: 

     

     
    * **``Expedited`` ** - Expedited retrievals allow you to quickly access your data stored in the GLACIER storage class when occasional urgent requests for a subset of archives are required. For all but the largest archived objects (250 MB+), data accessed using Expedited retrievals are typically made available within 1–5 minutes. Provisioned capacity ensures that retrieval capacity for Expedited retrievals is available when you need it. Expedited retrievals and provisioned capacity are not available for the DEEP_ARCHIVE storage class. 
     
    * **``Standard`` ** - Standard retrievals allow you to access any of your archived objects within several hours. This is the default option for the GLACIER and DEEP_ARCHIVE retrieval requests that do not specify the retrieval option. Standard retrievals typically complete within 3-5 hours from the GLACIER storage class and typically complete within 12 hours from the DEEP_ARCHIVE storage class.  
     
    * **``Bulk`` ** - Bulk retrievals are Amazon S3 Glacier’s lowest-cost retrieval option, enabling you to retrieve large amounts, even petabytes, of data inexpensively in a day. Bulk retrievals typically complete within 5-12 hours from the GLACIER storage class and typically complete within 48 hours from the DEEP_ARCHIVE storage class. 
     

     

    For more information about archive retrieval options and provisioned capacity for ``Expedited`` data access, see `Restoring Archived Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 

     

    You can use Amazon S3 restore speed upgrade to change the restore speed to a faster speed while it is in progress. You upgrade the speed of an in-progress restoration by issuing another restore request to the same object, setting a new ``Tier`` request element. When issuing a request to upgrade the restore tier, you must choose a tier that is faster than the tier that the in-progress restore is using. You must not change any other parameters, such as the ``Days`` request element. For more information, see `Upgrading the Speed of an In-Progress Restore <https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html#restoring-objects-upgrade-tier.title.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 

     

    To get the status of object restoration, you can send a ``HEAD`` request. Operations return the ``x-amz-restore`` header, which provides information about the restoration status, in the response. You can use Amazon S3 event notifications to notify you when a restore is initiated or completed. For more information, see `Configuring Amazon S3 Event Notifications <https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    After restoring an archived object, you can update the restoration period by reissuing the request with a new period. Amazon S3 updates the restoration period relative to the current time and charges only for the request-there are no data transfer charges. You cannot update the restoration period when Amazon S3 is actively processing your current restore request for the object.

     

    If your bucket has a lifecycle configuration with a rule that includes an expiration action, the object expiration overrides the life span that you specify in a restore request. For example, if you restore an object copy for 10 days, but the object is scheduled to expire in 3 days, Amazon S3 deletes the object in 3 days. For more information about lifecycle configuration, see  PutBucketLifecycleConfiguration and `Object Lifecycle Management <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html>`__ in *Amazon Simple Storage Service Developer Guide* .

     

     **Responses**  

     

    A successful operation returns either the ``200 OK`` or ``202 Accepted`` status code. 

     

     
    * If the object copy is not previously restored, then Amazon S3 returns ``202 Accepted`` in the response.  
     
    * If the object copy is previously restored, Amazon S3 returns ``200 OK`` in the response.  
     

     

     **Special Errors**  

     

     
    * 

      
      * *Code: RestoreAlreadyInProgress*   
       
      * *Cause: Object restore is already in progress. (This error does not apply to SELECT type requests.)*   
       
      * *HTTP Status Code: 409 Conflict*   
       
      * *SOAP Fault Code Prefix: Client*   
       

     
     
    * 

      
      * *Code: GlacierExpeditedRetrievalNotAvailable*   
       
      * *Cause: Glacier expedited retrievals are currently not available. Try again later. (Returned if there is insufficient capacity to process the Expedited request. This error applies only to Expedited retrievals and not to Standard or Bulk retrievals.)*   
       
      * *HTTP Status Code: 503*   
       
      * *SOAP Fault Code Prefix: N/A*   
       

     
     

     

     **Related Resources**  

     

     
    *  PutBucketLifecycleConfiguration   
     
    *  GetBucketNotificationConfiguration   
     
    * `SQL Reference for Amazon S3 Select and Glacier Select <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-glacier-select-sql-reference.html>`__ in the *Amazon Simple Storage Service Developer Guide*   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/RestoreObject>`_    


    **Request Syntax** 
    ::

      response = object.restore_object(
          VersionId='string',
          RestoreRequest={
              'Days': 123,
              'GlacierJobParameters': {
                  'Tier': 'Accelerated'|'Standard'|'Bulk'|'Expedited'
              }
          }
      )
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type RestoreRequest: dict
    :param RestoreRequest: 

    
      - **Days** *(integer) --* **[REQUIRED]** 

        Lifetime of the active copy in days. Do not use with restores that specify ``OutputLocation`` .

        

      
      - **GlacierJobParameters** *(dict) --* 

        Glacier related parameters pertaining to this job. Do not use with restores that specify ``OutputLocation`` .

        

      
        - **Tier** *(string) --* **[REQUIRED]** 

          Glacier retrieval tier at which the restore will be processed.

          

        
      
    
    
    :returns: None

  .. py:method:: upload_file(Filename, ExtraArgs=None, Callback=None, Config=None)

        
    Upload a file to an S3 object.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.resource('s3')
        s3.Object('mybucket', 'hello.txt').upload_file('/tmp/hello.txt')
    
    Similar behavior as S3Transfer's upload_file() method,
    except that parameters are capitalized. Detailed examples can be found at
    :ref:`S3Transfer's Usage <ref_s3transfer_usage>`.
    
    :type Filename: str
    :param Filename: The path to the file to upload.
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation.
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the upload.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        transfer.


  .. py:method:: upload_fileobj(Fileobj, ExtraArgs=None, Callback=None, Config=None)

        
    Upload a file-like object to this object.
    
    The file-like object must be in binary mode.
    
    This is a managed transfer which will perform a multipart upload in
    multiple threads if necessary.
    
    Usage::
    
        import ibm_boto3
        s3 = ibm_boto3.resource('s3')
        bucket = s3.Bucket('mybucket')
        obj = bucket.Object('mykey')
    
        with open('filename', 'rb') as data:
            obj.upload_fileobj(data)
    
    :type Fileobj: a file-like object
    :param Fileobj: A file-like object to upload. At a minimum, it must
        implement the `read` method, and must return bytes.
    
    :type ExtraArgs: dict
    :param ExtraArgs: Extra arguments that may be passed to the
        client operation.
    
    :type Callback: function
    :param Callback: A method which takes a number of bytes transferred to
        be periodically called during the upload.
    
    :type Config: ibm_boto3.s3.transfer.TransferConfig
    :param Config: The transfer configuration to be used when performing the
        upload.

  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: Acl()

    Creates a ObjectAcl resource.::

      object_acl = object.Acl()

    
    :rtype: :py:class:`S3.ObjectAcl`
    :returns: A ObjectAcl resource
    

  .. py:method:: Bucket()

    Creates a Bucket resource.::

      bucket = object.Bucket()

    
    :rtype: :py:class:`S3.Bucket`
    :returns: A Bucket resource
    

  .. py:method:: MultipartUpload(id)

    Creates a MultipartUpload resource.::

      multipart_upload = object.MultipartUpload('id')

    :type id: string
    :param id: The MultipartUpload's id identifier. This **must** be set.
    
    :rtype: :py:class:`S3.MultipartUpload`
    :returns: A MultipartUpload resource
    

  .. py:method:: Protection()

    Creates a ObjectProtection resource.::

      object_protection = object.Protection()

    
    :rtype: :py:class:`S3.ObjectProtection`
    :returns: A ObjectProtection resource
    

  .. py:method:: Version(id)

    Creates a ObjectVersion resource.::

      object_version = object.Version('id')

    :type id: string
    :param id: The Version's id identifier. This **must** be set.
    
    :rtype: :py:class:`S3.ObjectVersion`
    :returns: A ObjectVersion resource
    
  .. rst-class:: admonition-title
  
  Waiters
  
  Waiters provide an interface to wait for a resource to reach a specific state.
  For more information about waiters refer to the :ref:`Resources Introduction Guide<waiters_intro>`.
  

  .. py:method:: wait_until_exists(**kwargs)

    Waits until this Object is exists. This method calls :py:meth:`S3.Waiter.object_exists.wait` which polls. :py:meth:`S3.Client.head_object` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadObject>`_    


    **Request Syntax** 
    ::

      object.wait_until_exists(
          IfMatch='string',
          IfModifiedSince=datetime(2015, 1, 1),
          IfNoneMatch='string',
          IfUnmodifiedSince=datetime(2015, 1, 1),
          MirrorDestination='string',
          Range='string',
          VersionId='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester',
          PartNumber=123
      )
    :type IfMatch: string
    :param IfMatch: 

      Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).

      

    
    :type IfModifiedSince: datetime
    :param IfModifiedSince: 

      Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).

      

    
    :type IfNoneMatch: string
    :param IfNoneMatch: 

      Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).

      

    
    :type IfUnmodifiedSince: datetime
    :param IfUnmodifiedSince: 

      Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Range: string
    :param Range: 

      Downloads the specified range bytes of an object. For more information about the HTTP Range header, see `http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35 .

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PartNumber: integer
    :param PartNumber: 

      Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.

      

    
    :returns: None

  .. py:method:: wait_until_not_exists(**kwargs)

    Waits until this Object is not exists. This method calls :py:meth:`S3.Waiter.object_not_exists.wait` which polls. :py:meth:`S3.Client.head_object` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadObject>`_    


    **Request Syntax** 
    ::

      object.wait_until_not_exists(
          IfMatch='string',
          IfModifiedSince=datetime(2015, 1, 1),
          IfNoneMatch='string',
          IfUnmodifiedSince=datetime(2015, 1, 1),
          MirrorDestination='string',
          Range='string',
          VersionId='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester',
          PartNumber=123
      )
    :type IfMatch: string
    :param IfMatch: 

      Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).

      

    
    :type IfModifiedSince: datetime
    :param IfModifiedSince: 

      Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).

      

    
    :type IfNoneMatch: string
    :param IfNoneMatch: 

      Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).

      

    
    :type IfUnmodifiedSince: datetime
    :param IfUnmodifiedSince: 

      Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Range: string
    :param Range: 

      Downloads the specified range bytes of an object. For more information about the HTTP Range header, see `http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35 .

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PartNumber: integer
    :param PartNumber: 

      Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.

      

    
    :returns: None

================
BucketProtection
================



.. py:class:: S3.BucketProtection(bucket_name)

  A resource representing an Amazon Simple Storage Service (S3) BucketProtection::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    bucket_protection = s3.BucketProtection('bucket_name')

  :type bucket_name: string
  :param bucket_name: The BucketProtection's bucket_name identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  These are the resource's available attributes:
  
  *   :py:attr:`default_retention`

  
  *   :py:attr:`enable_permanent_retention`

  
  *   :py:attr:`maximum_retention`

  
  *   :py:attr:`minimum_retention`

  
  *   :py:attr:`status`

  
  These are the resource's available actions:
  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`load()`

  
  *   :py:meth:`put()`

  
  *   :py:meth:`reload()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The BucketProtection's bucket_name identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: default_retention

    

    - *(dict) --* Default retention period for an object, if a PUT of an object does not specify a retention period this value will be converted to seconds and used.
      

      - **Days** *(integer) --* 
  

  .. py:attribute:: enable_permanent_retention

    

    - *(boolean) --* Enable permanent retention for an object.

  .. py:attribute:: maximum_retention

    

    - *(dict) --* Maximum retention period for an object, if a PUT of an object specifies a longer retention period the PUT object will fail.
      

      - **Days** *(integer) --* 
  

  .. py:attribute:: minimum_retention

    

    - *(dict) --* Minimum retention period for an object, if a PUT of an object specifies a shorter retention period the PUT object will fail.
      

      - **Days** *(integer) --* 
  

  .. py:attribute:: status

    

    - *(string) --* Retention status of a bucket.
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: load()

    Calls :py:meth:`S3.Client.get_bucket_protection_configuration` to update the attributes of the BucketProtection resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_protection.load()
    :returns: None

  .. py:method:: put(**kwargs)

    Sets the protection configuration of an existing bucket. EnablePermanentRetention is optional and if not included is considered to be false. Once set to true, must be included in any subsequent PUT Bucket?protection requests for that bucket.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketProtectionConfiguration>`_    


    **Request Syntax** 
    ::

      response = bucket_protection.put(
          ProtectionConfiguration={
              'Status': 'Retention',
              'MinimumRetention': {
                  'Days': 123
              },
              'DefaultRetention': {
                  'Days': 123
              },
              'MaximumRetention': {
                  'Days': 123
              },
              'EnablePermanentRetention': True|False
          }
      )
    :type ProtectionConfiguration: dict
    :param ProtectionConfiguration: **[REQUIRED]** Container for setting retention settings.

    
      - **Status** *(string) --* Retention status of a bucket.

      
      - **MinimumRetention** *(dict) --* Minimum retention period for an object, if a PUT of an object specifies a shorter retention period the PUT object will fail.

      
        - **Days** *(integer) --* **[REQUIRED]** 

        
      
      - **DefaultRetention** *(dict) --* Default retention period for an object, if a PUT of an object does not specify a retention period this value will be converted to seconds and used.

      
        - **Days** *(integer) --* **[REQUIRED]** 

        
      
      - **MaximumRetention** *(dict) --* Maximum retention period for an object, if a PUT of an object specifies a longer retention period the PUT object will fail.

      
        - **Days** *(integer) --* **[REQUIRED]** 

        
      
      - **EnablePermanentRetention** *(boolean) --* Enable permanent retention for an object.

      
    
    
    :returns: None

  .. py:method:: reload()

    Calls :py:meth:`S3.Client.get_bucket_protection_configuration` to update the attributes of the BucketProtection resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      bucket_protection.reload()
    :returns: None

================
ObjectProtection
================



.. py:class:: S3.ObjectProtection(bucket_name,object_key)

  A resource representing an Amazon Simple Storage Service (S3) ObjectProtection::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    object_protection = s3.ObjectProtection('bucket_name','object_key')

  :type bucket_name: string
  :param bucket_name: The ObjectProtection's bucket_name identifier. This **must** be set.
  :type object_key: string
  :param object_key: The ObjectProtection's object_key identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  *   :py:attr:`object_key`

  
  These are the resource's available attributes:
  
  *   :py:attr:`create_time`

  
  *   :py:attr:`legal_holds`

  
  *   :py:attr:`retention_period`

  
  *   :py:attr:`retention_period_expiration_date`

  
  These are the resource's available actions:
  
  *   :py:meth:`add_legal_hold()`

  
  *   :py:meth:`delete_legal_hold()`

  
  *   :py:meth:`extend_object_retention()`

  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`list_legal_holds()`

  
  *   :py:meth:`load()`

  
  *   :py:meth:`reload()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The ObjectProtection's bucket_name identifier. This **must** be set.

  .. py:attribute:: object_key

    *(string)* The ObjectProtection's object_key identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: create_time

    

    - *(datetime) --* 

  .. py:attribute:: legal_holds

    

    - *(list) --* 
      

      - *(dict) --* 
        

        - **Date** *(datetime) --* 
        

        - **ID** *(string) --* 
    
  

  .. py:attribute:: retention_period

    

    - *(integer) --* Retention period in seconds.

  .. py:attribute:: retention_period_expiration_date

    

    - *(datetime) --* Date on which the retention period will expire.
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: add_legal_hold(**kwargs)

    Add a legal hold on an object. The legal hold identifiers are stored in the object metadata along with the timestamp of when they are POSTed to the object. The presence of any legal hold identifiers prevents the modification or deletion of the object data, even if the retention period has expired. Legal Holds can only be added to objects in a bucket with a protection policy. Otherwise a 400 error will be returned.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/AddLegalHold>`_    


    **Request Syntax** 
    ::

      response = object_protection.add_legal_hold(
          RetentionLegalHoldId='string'
      )
    :type RetentionLegalHoldId: string
    :param RetentionLegalHoldId: **[REQUIRED]** 

    
    
    :returns: None

  .. py:method:: delete_legal_hold(**kwargs)

    Remove Legal hold on an object. The legal hold identifiers are stored in the object metadata along with the timestamp of when they are POSTed to the object. The presence of any legal hold identifiers prevents the modification or deletion of the object data, even if the retention period has expired.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteLegalHold>`_    


    **Request Syntax** 
    ::

      response = object_protection.delete_legal_hold(
          RetentionLegalHoldId='string'
      )
    :type RetentionLegalHoldId: string
    :param RetentionLegalHoldId: **[REQUIRED]** 

    
    
    :returns: None

  .. py:method:: extend_object_retention(**kwargs)

    This implementation of the POST operation uses the extendRetention sub-resource to extend the retention period of a protected object in a protected vault.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ExtendObjectRetention>`_    


    **Request Syntax** 
    ::

      response = object_protection.extend_object_retention(
          AdditionalRetentionPeriod=123,
          ExtendRetentionFromCurrentTime=123,
          NewRetentionExpirationDate=datetime(2015, 1, 1),
          NewRetentionPeriod=123
      )
    :type AdditionalRetentionPeriod: integer
    :param AdditionalRetentionPeriod: Additional time, in seconds, to add to the existing retention period for the object. If this field and New-Retention-Time and/or New-Retention-Expiration-Date are specified, a 400 error will be returned. If none of the Request Headers are specified, a 400 error will be returned to the user. The retention period of an object may be extended up to bucket maximum retention period from the time of the request.

    
    :type ExtendRetentionFromCurrentTime: integer
    :param ExtendRetentionFromCurrentTime: Retention Period in seconds. The Retention will be enforced from the object creation time until current time + the value in this header. This value has to be within the ranges defined for the bucket. If this field and Additional-Retention-Period and/or New-Retention-Period and/or New-Retentiion-Expiration-Date are specified, a 400 error will be returned. If none of the Request Headers are specified, a 400 error will be returned to the user. The retention period of an object may be extended up to bucket maximum retention period from the time of the request.

    
    :type NewRetentionExpirationDate: datetime
    :param NewRetentionExpirationDate: A new retention date to use for the object in place of the existing retention date. If this value is less than the existing value stored for the object, a 400 error will be returned. If this field and Additional-Retention-Period and/or New-Retention-Period and/or Extend-Retention-From-Current-Time are specified, a 400 error will be returned. If none of the Request Headers are specified, a 400 error will be returned to the user. The retention period of an object may be extended up to bucket maximum retention period from the time of the request.

    
    :type NewRetentionPeriod: integer
    :param NewRetentionPeriod: Retention period, in seconds, to use for the object in place of the existing retention period stored for the object. If this value is less than the existing value stored for the object, a 400 error will be returned. If this field and Additional-Retention-Period and/or New-Retention-Expiration-Date and/or Extend-Retention-From-Current-Time are specified, a 400 error will be returned. If none of the Request Headers are specified, a 400 error will be returned to the user. The retention period of an object may be extended up to bucket maximum retention period from the time of the request.

    
    
    :returns: None

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: list_legal_holds(**kwargs)

    Returns a list of legal holds on an object

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListLegalHolds>`_    


    **Request Syntax** 
    ::

      response = object_protection.list_legal_holds(
          MirrorDestination='string'
      )
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CreateTime': datetime(2015, 1, 1),
            'LegalHolds': [
                {
                    'Date': datetime(2015, 1, 1),
                    'ID': 'string'
                },
            ],
            'RetentionPeriod': 123,
            'RetentionPeriodExpirationDate': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CreateTime** *(datetime) --* 
        

        - **LegalHolds** *(list) --* 
          

          - *(dict) --* 
            

            - **Date** *(datetime) --* 
            

            - **ID** *(string) --* 
        
      
        

        - **RetentionPeriod** *(integer) --* Retention period in seconds.
        

        - **RetentionPeriodExpirationDate** *(datetime) --* Date on which the retention period will expire.
    

  .. py:method:: load()

    Calls :py:meth:`S3.Client.list_legal_holds` to update the attributes of the ObjectProtection resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      object_protection.load()
    :returns: None

  .. py:method:: reload()

    Calls :py:meth:`S3.Client.list_legal_holds` to update the attributes of the ObjectProtection resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      object_protection.reload()
    :returns: None

=========
ObjectAcl
=========



.. py:class:: S3.ObjectAcl(bucket_name,object_key)

  A resource representing an Amazon Simple Storage Service (S3) ObjectAcl::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    object_acl = s3.ObjectAcl('bucket_name','object_key')

  :type bucket_name: string
  :param bucket_name: The ObjectAcl's bucket_name identifier. This **must** be set.
  :type object_key: string
  :param object_key: The ObjectAcl's object_key identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  *   :py:attr:`object_key`

  
  These are the resource's available attributes:
  
  *   :py:attr:`grants`

  
  *   :py:attr:`owner`

  
  *   :py:attr:`request_charged`

  
  These are the resource's available actions:
  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`load()`

  
  *   :py:meth:`put()`

  
  *   :py:meth:`reload()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`Object()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The ObjectAcl's bucket_name identifier. This **must** be set.

  .. py:attribute:: object_key

    *(string)* The ObjectAcl's object_key identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: grants

    

    - *(list) --* 

      A list of grants.

      
      

      - *(dict) --* 

        Container for grant information.

        
        

        - **Grantee** *(dict) --* 

          The person being granted permissions.

          
          

          - **DisplayName** *(string) --* 

            Screen name of the grantee.

            
          

          - **EmailAddress** *(string) --* 

            Email address of the grantee.

            
          

          - **ID** *(string) --* 

            The canonical user ID of the grantee.

            
          

          - **Type** *(string) --* 

            Type of grantee

            
          

          - **URI** *(string) --* 

            URI of the grantee group.

            
      
        

        - **Permission** *(string) --* 

          Specifies the permission given to the grantee.

          
    
  

  .. py:attribute:: owner

    

    - *(dict) --* 

      Container for the bucket owner's display name and ID.

      
      

      - **DisplayName** *(string) --* 

        Container for the display name of the owner.

        
      

      - **ID** *(string) --* 

        Container for the ID of the owner.

        
  

  .. py:attribute:: request_charged

    

    - *(string) --* 

      If present, indicates that the requester was successfully charged for the request.

      
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: load()

    Calls :py:meth:`S3.Client.get_object_acl` to update the attributes of the ObjectAcl resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      object_acl.load()
    :returns: None

  .. py:method:: put(**kwargs)

    

    Uses the ``acl`` subresource to set the access control list (ACL) permissions for an object that already exists in a bucket. You must have ``WRITE_ACP`` permission to set the ACL of an object.

     

    Depending on your application needs, you can choose to set the ACL on an object using either the request body or the headers. For example, if you have an existing application that updates a bucket ACL using the request body, you can continue to use that approach.

     

     **Access Permissions**  

     

    You can set access permissions using one of the following methods:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. Amazon S3 supports a set of predefined ACLs, known as canned ACLs. Each canned ACL has a predefined set of grantees and permissions. Specify the canned ACL name as the value of ``x-amz-ac`` l. If you use this header, you cannot use other access control-specific headers in your request. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. When using these headers, you specify explicit access permissions and grantees (AWS accounts or Amazon S3 groups) who will receive the permission. If you use these ACL-specific headers, you cannot use ``x-amz-acl`` header to set a canned ACL. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . You specify each grantee as a type=value pair, where the type is one of the following: 

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants list objects permission to the two AWS accounts identified by their email addresses.

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

     

     **Grantee Values**  

     

    You can specify the person (grantee) to whom you're assigning access rights (using request elements) in the following ways:

     

     
    * By Email address:  ``<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="AmazonCustomerByEmail"><EmailAddress><>Grantees@email.com<></EmailAddress>lt;/Grantee>``   The grantee is resolved to the CanonicalUser and, in a response to a GET Object acl request, appears as the CanonicalUser. 
     
    * By the person's ID:  ``<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser"><ID><>ID<></ID><DisplayName><>GranteesEmail<></DisplayName> </Grantee>``   DisplayName is optional and ignored in the request. 
     
    * By URI:  ``<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Group"><URI><>http://acs.amazonaws.com/groups/global/AuthenticatedUsers<></URI></Grantee>``   
     

     

     **Versioning**  

     

    The ACL of an object is set at the object version level. By default, PUT sets the ACL of the current version of an object. To set the ACL of a different version, use the ``versionId`` subresource.

     

     **Related Resources**  

     

     
    *  CopyObject   
     
    *  GetObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutObjectAcl>`_    


    **Request Syntax** 
    ::

      response = object_acl.put(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read'|'aws-exec-read'|'bucket-owner-read'|'bucket-owner-full-control',
          AccessControlPolicy={
              'Grants': [
                  {
                      'Grantee': {
                          'DisplayName': 'string',
                          'EmailAddress': 'string',
                          'ID': 'string',
                          'Type': 'CanonicalUser'|'AmazonCustomerByEmail'|'Group',
                          'URI': 'string'
                      },
                      'Permission': 'FULL_CONTROL'|'WRITE'|'WRITE_ACP'|'READ'|'READ_ACP'
                  },
              ],
              'Owner': {
                  'DisplayName': 'string',
                  'ID': 'string'
              }
          },
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWrite='string',
          GrantWriteACP='string',
          RequestPayer='requester',
          VersionId='string'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the object. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ .

      

    
    :type AccessControlPolicy: dict
    :param AccessControlPolicy: 

      Contains the elements that set the ACL permissions for an object per grantee.

      

    
      - **Grants** *(list) --* 

        A list of grants.

        

      
        - *(dict) --* 

          Container for grant information.

          

        
          - **Grantee** *(dict) --* 

            The person being granted permissions.

            

          
            - **DisplayName** *(string) --* 

              Screen name of the grantee.

              

            
            - **EmailAddress** *(string) --* 

              Email address of the grantee.

              

            
            - **ID** *(string) --* 

              The canonical user ID of the grantee.

              

            
            - **Type** *(string) --* **[REQUIRED]** 

              Type of grantee

              

            
            - **URI** *(string) --* 

              URI of the grantee group.

              

            
          
          - **Permission** *(string) --* 

            Specifies the permission given to the grantee.

            

          
        
    
      - **Owner** *(dict) --* 

        Container for the bucket owner's display name and ID.

        

      
        - **DisplayName** *(string) --* 

          Container for the display name of the owner.

          

        
        - **ID** *(string) --* 

          Container for the ID of the owner.

          

        
      
    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to list the objects in the bucket.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the bucket ACL.

      

    
    :type GrantWrite: string
    :param GrantWrite: 

      Allows grantee to create, overwrite, and delete any object in the bucket.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable bucket.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: reload()

    Calls :py:meth:`S3.Client.get_object_acl` to update the attributes of the ObjectAcl resource. Note that the load and reload methods are the same method and can be used interchangeably.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/None>`_    


    **Request Syntax** 

    ::

      object_acl.reload()
    :returns: None
  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: Object()

    Creates a Object resource.::

      object = object_acl.Object()

    
    :rtype: :py:class:`S3.Object`
    :returns: A Object resource
    

=============
ObjectSummary
=============



.. py:class:: S3.ObjectSummary(bucket_name,key)

  A resource representing an Amazon Simple Storage Service (S3) ObjectSummary::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    object_summary = s3.ObjectSummary('bucket_name','key')

  :type bucket_name: string
  :param bucket_name: The ObjectSummary's bucket_name identifier. This **must** be set.
  :type key: string
  :param key: The ObjectSummary's key identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  *   :py:attr:`key`

  
  These are the resource's available attributes:
  
  *   :py:attr:`e_tag`

  
  *   :py:attr:`last_modified`

  
  *   :py:attr:`owner`

  
  *   :py:attr:`size`

  
  *   :py:attr:`storage_class`

  
  These are the resource's available actions:
  
  *   :py:meth:`copy_from()`

  
  *   :py:meth:`delete()`

  
  *   :py:meth:`get()`

  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`initiate_multipart_upload()`

  
  *   :py:meth:`load()`

  
  *   :py:meth:`put()`

  
  *   :py:meth:`restore_object()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`Acl()`

  
  *   :py:meth:`Bucket()`

  
  *   :py:meth:`MultipartUpload()`

  
  *   :py:meth:`Object()`

  
  *   :py:meth:`Version()`

  
  These are the resource's available waiters:
  
  *   :py:meth:`wait_until_exists()`

  
  *   :py:meth:`wait_until_not_exists()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The ObjectSummary's bucket_name identifier. This **must** be set.

  .. py:attribute:: key

    *(string)* The ObjectSummary's key identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: e_tag

    

    - *(string) --* 

      The entity tag is an MD5 hash of the object. ETag reflects only changes to the contents of an object, not its metadata.

      

  .. py:attribute:: last_modified

    

    - *(datetime) --* 

      The date the Object was Last Modified

      

  .. py:attribute:: owner

    

    - *(dict) --* 

      The owner of the object

      
      

      - **DisplayName** *(string) --* 

        Container for the display name of the owner.

        
      

      - **ID** *(string) --* 

        Container for the ID of the owner.

        
  

  .. py:attribute:: size

    

    - *(integer) --* 

      Size in bytes of the object

      

  .. py:attribute:: storage_class

    

    - *(string) --* 

      The class of storage used to store the object.

      
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: copy_from(**kwargs)

    

    Creates a copy of an object that is already stored in Amazon S3.

     

    .. note::

       

      You can store individual objects of up to 5 TB in Amazon S3. You create a copy of your object up to 5 GB in size in a single atomic operation using this API. However, for copying an object greater than 5 GB, you must use the multipart upload Upload Part - Copy API. For more information, see `Copy Object Using the REST Multipart Upload API <https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjctsUsingRESTMPUapi.html>`__ .

       

     

    When copying an object, you can preserve all metadata (default) or specify new metadata. However, the ACL is not preserved and is set to private for the user making the request. To override the default ACL setting, specify a new ACL when generating a copy request. For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ .

     

    .. warning::

       

      Amazon S3 transfer acceleration does not support cross-region copies. If you request a cross-region copy using a transfer acceleration endpoint, you get a 400 ``Bad Request`` error. For more information about transfer acceleration, see `Transfer Acceleration <https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html>`__ .

       

     

    All copy requests must be authenticated. Additionally, you must have *read* access to the source object and *write* access to the destination bucket. For more information, see `REST Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html>`__ . Both the Region that you want to copy the object from and the Region that you want to copy the object to must be enabled for your account.

     

    To only copy an object under certain conditions, such as whether the ``Etag`` matches or whether the object was modified before or after a specified date, use the request parameters ``x-amz-copy-source-if-match`` , ``x-amz-copy-source-if-none-match`` , ``x-amz-copy-source-if-unmodified-since`` , or ``x-amz-copy-source-if-modified-since`` .

     

    .. note::

       

      All headers with the ``x-amz-`` prefix, including ``x-amz-copy-source`` , must be signed.

       

     

    You can use this operation to change the storage class of an object that is already stored in Amazon S3 using the ``StorageClass`` parameter. For more information, see `Storage Classes <https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html>`__ .

     

    The source object that you are copying can be encrypted or unencrypted. If the source object is encrypted, it can be encrypted by server-side encryption using AWS managed encryption keys or by using a customer-provided encryption key. When copying an object, you can request that Amazon S3 encrypt the target object by using either the AWS managed encryption keys or by using your own encryption key. You can do this regardless of the form of server-side encryption that was used to encrypt the source, or even if the source object was not encrypted. For more information about server-side encryption, see `Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html>`__ .

     

    A copy request might return an error when Amazon S3 receives the copy request or while Amazon S3 is copying the files. If the error occurs before the copy operation starts, you receive a standard Amazon S3 error. If the error occurs during the copy operation, the error response is embedded in the ``200 OK`` response. This means that a ``200 OK`` response can contain either a success or an error. Design your application to parse the contents of the response and handle it appropriately.

     

    If the copy is successful, you receive a response with information about the copied object.

     

    .. note::

       

      If the request is an HTTP 1.1 request, the response is chunk encoded. If it were not, it would not contain the content-length, and you would need to read the entire body.

       

     

    Consider the following when using request headers:

     

     
    * Consideration 1 – If both the ``x-amz-copy-source-if-match`` and ``x-amz-copy-source-if-unmodified-since`` headers are present in the request and evaluate as follows, Amazon S3 returns 200 OK and copies the data: 

       
      * ``x-amz-copy-source-if-match`` condition evaluates to true 
       
      * ``x-amz-copy-source-if-unmodified-since`` condition evaluates to false 
       

     
     
    * Consideration 2 – If both of the ``x-amz-copy-source-if-none-match`` and ``x-amz-copy-source-if-modified-since`` headers are present in the request and evaluate as follows, Amazon S3 returns the ``412 Precondition Failed`` response code: 

       
      * ``x-amz-copy-source-if-none-match`` condition evaluates to false 
       
      * ``x-amz-copy-source-if-modified-since`` condition evaluates to true 
       

     
     

     

    The copy request charge is based on the storage class and Region you specify for the destination object. For pricing information, see `Amazon S3 Pricing <https://aws.amazon.com/s3/pricing/>`__ .

     

    Following are other considerations when using ``CopyObject`` :

      Versioning  

    By default, ``x-amz-copy-source`` identifies the current version of an object to copy. (If the current version is a delete marker, Amazon S3 behaves as if the object was deleted.) To copy a different version, use the ``versionId`` subresource.

     

    If you enable versioning on the target bucket, Amazon S3 generates a unique version ID for the object being copied. This version ID is different from the version ID of the source object. Amazon S3 returns the version ID of the copied object in the ``x-amz-version-id`` response header in the response.

     

    If you do not enable versioning or suspend it on the target bucket, the version ID that Amazon S3 generates is always null.

     

    If the source object's storage class is GLACIER, you must restore a copy of this object before you can use it as a source object for the copy operation. For more information, see .

      Access Permissions  

    When copying an object, you can optionally specify the accounts or groups that should be granted specific permissions on the new object. There are two ways to grant the permissions using the request headers:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . 
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

      Server-Side- Encryption-Specific Request Headers  

    To encrypt the target object, you must provide the appropriate encryption-related request headers. The one you use depends on whether you want to use AWS managed encryption keys or provide your own encryption key. 

     

     
    * To encrypt the target object using server-side encryption with an AWS managed encryption key, provide the following request headers, as appropriate. 

       
      * ``x-amz-server-side​-encryption``   
       
      * ``x-amz-server-side-encryption-aws-kms-key-id``   
       
      * ``x-amz-server-side-encryption-context``   
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data. If you want to use a customer managed AWS KMS CMK, you must provide the ``x-amz-server-side-encryption-aws-kms-key-id`` of the symmetric customer managed CMK. Amazon S3 only supports symmetric CMKs and not asymmetric CMKs. For more information, see `Using Symmetric and Asymmetric Keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html>`__ in the *AWS Key Management Service Developer Guide* .

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * To encrypt the target object using server-side encryption with an encryption key that you provide, use the following headers. 

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     
     
    * If the source object is encrypted using server-side encryption with customer-provided encryption keys, you must use the following headers. 

       
      * x-amz-copy-source​-server-side​-encryption​-customer-algorithm 
       
      * x-amz-copy-source​-server-side​-encryption​-customer-key 
       
      * x-amz-copy-source-​server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in Amazon KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

      Access-Control-List (ACL)-Specific Request Headers  

    You also can use the following access control–related headers with this operation. By default, all objects are private. Only the owner has full access control. When adding a new object, you can grant permissions to individual AWS accounts or to predefined groups defined by Amazon S3. These permissions are then added to the access control list (ACL) on the object. For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ . With this operation, you can grant access permissions using one of the following two methods:

     

     
    * Specify a canned ACL (``x-amz-acl`` ) — Amazon S3 supports a set of predefined ACLs, known as *canned ACLs* . Each canned ACL has a predefined set of grantees and permissions. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly — To explicitly grant access permissions to specific AWS accounts or groups, use the following headers. Each header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . In the header, you specify a list of grantees who get the specific permission. To grant permissions explicitly, use: 

       
      * x-amz-grant-read 
       
      * x-amz-grant-write 
       
      * x-amz-grant-read-acp 
       
      * x-amz-grant-write-acp 
       
      * x-amz-grant-full-control 
       

     

    You specify each grantee as a type=value pair, where the type is one of the following:

     

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants the AWS accounts identified by email addresses permissions to read object data and its metadata:

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

       

    The following operations are related to ``CopyObject`` :

     

     
    *  PutObject   
     
    *  GetObject   
     

     

    For more information, see `Copying Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjectsExamples.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/CopyObject>`_    


    **Request Syntax** 
    ::

      response = object_summary.copy_from(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read'|'aws-exec-read'|'bucket-owner-read'|'bucket-owner-full-control',
          CacheControl='string',
          ContentDisposition='string',
          ContentEncoding='string',
          ContentLanguage='string',
          ContentType='string',
          CopySource='string' or {'Bucket': 'string', 'Key': 'string', 'VersionId': 'string'},
          CopySourceIfMatch='string',
          CopySourceIfModifiedSince=datetime(2015, 1, 1),
          CopySourceIfNoneMatch='string',
          CopySourceIfUnmodifiedSince=datetime(2015, 1, 1),
          Expires=datetime(2015, 1, 1),
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWriteACP='string',
          Metadata={
              'string': 'string'
          },
          MetadataDirective='COPY'|'REPLACE',
          RetentionDirective='COPY'|'REPLACE',
          RetentionExpirationDate=datetime(2015, 1, 1),
          RetentionLegalHoldId='string',
          RetentionPeriod=123,
          ServerSideEncryption='AES256',
          StorageClass='ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
          WebsiteRedirectLocation='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          SSEKMSKeyId='string',
          CopySourceSSECustomerAlgorithm='string',
          CopySourceSSECustomerKey='string',
          RequestPayer='requester'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the object.

      

    
    :type CacheControl: string
    :param CacheControl: 

      Specifies caching behavior along the request/reply chain.

      

    
    :type ContentDisposition: string
    :param ContentDisposition: 

      Specifies presentational information for the object.

      

    
    :type ContentEncoding: string
    :param ContentEncoding: 

      Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.

      

    
    :type ContentLanguage: string
    :param ContentLanguage: 

      The language the content is in.

      

    
    :type ContentType: string
    :param ContentType: 

      A standard MIME type describing the format of the object data.

      

    
    :type CopySource: str or dict
    :param CopySource: **[REQUIRED]** The name of the source bucket, key name of the source object, and optional version ID of the source object.  You can either provide this value as a string or a dictionary.  The string form is {bucket}/{key} or {bucket}/{key}?versionId={versionId} if you want to copy a specific version.  You can also provide this value as a dictionary.  The dictionary format is recommended over the string format because it is more explicit.  The dictionary format is: {'Bucket': 'bucket', 'Key': 'key', 'VersionId': 'id'}.  Note that the VersionId key is optional and may be omitted.

    
    :type CopySourceIfMatch: string
    :param CopySourceIfMatch: 

      Copies the object if its entity tag (ETag) matches the specified tag.

      

    
    :type CopySourceIfModifiedSince: datetime
    :param CopySourceIfModifiedSince: 

      Copies the object if it has been modified since the specified time.

      

    
    :type CopySourceIfNoneMatch: string
    :param CopySourceIfNoneMatch: 

      Copies the object if its entity tag (ETag) is different than the specified ETag.

      

    
    :type CopySourceIfUnmodifiedSince: datetime
    :param CopySourceIfUnmodifiedSince: 

      Copies the object if it hasn't been modified since the specified time.

      

    
    :type Expires: datetime
    :param Expires: 

      The date and time at which the object is no longer cacheable.

      

    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to read the object data and its metadata.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the object ACL.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable object.

      

    
    :type Metadata: dict
    :param Metadata: 

      A map of metadata to store with the object in S3.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type MetadataDirective: string
    :param MetadataDirective: 

      Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request.

      

    
    :type RetentionDirective: string
    :param RetentionDirective: This header controls how the Protection state of the source object is copied to the destination object.If copied, the retention period and all legal holds are copied onto the new object. The legal hold date's is set to the date of the copy.

    
    :type RetentionExpirationDate: datetime
    :param RetentionExpirationDate: Date on which it will be legal to delete or modify the object. This field can only be specified if Retention-Directive is REPLACE. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used. 

    
    :type RetentionLegalHoldId: string
    :param RetentionLegalHoldId: A single legal hold to apply to the object. This field can only be specified if Retention-Directive is REPLACE. A legal hold is a character long string of max length 64. The object cannot be overwritten or deleted until all legal holds associated with the object are removed.

    
    :type RetentionPeriod: integer
    :param RetentionPeriod: Retention period to store on the object in seconds. This field can only be specified if Retention-Directive is REPLACE. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.

    
    :type ServerSideEncryption: string
    :param ServerSideEncryption: 

      The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

      

    
    :type StorageClass: string
    :param StorageClass: 

      The type of storage to use for the object. Defaults to 'STANDARD'.

      

    
    :type WebsiteRedirectLocation: string
    :param WebsiteRedirectLocation: 

      If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type SSEKMSKeyId: string
    :param SSEKMSKeyId: 

      Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. For information about configuring using any of the officially supported AWS SDKs and AWS CLI, see `Specifying the Signature Version in Request Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version>`__ in the *Amazon S3 Developer Guide* .

      

    
    :type CopySourceSSECustomerAlgorithm: string
    :param CopySourceSSECustomerAlgorithm: 

      Specifies the algorithm to use when decrypting the source object (for example, AES256).

      

    
    :type CopySourceSSECustomerKey: string
    :param CopySourceSSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.

      

    
    :type CopySourceSSECustomerKeyMD5: string
    :param CopySourceSSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CopyObjectResult': {
                'ETag': 'string',
                'LastModified': datetime(2015, 1, 1)
            },
            'Expiration': 'string',
            'CopySourceVersionId': 'string',
            'VersionId': 'string',
            'ServerSideEncryption': 'AES256',
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CopyObjectResult** *(dict) --* 

          Container for all response elements.

          
          

          - **ETag** *(string) --* 

            Returns the ETag of the new object. The ETag reflects only changes to the contents of an object, not its metadata. The source and destination ETag is identical for a successfully copied object.

            
          

          - **LastModified** *(datetime) --* 

            Returns the date that the object was last modified.

            
      
        

        - **Expiration** *(string) --* 

          If the object expiration is configured, the response includes this header.

          
        

        - **CopySourceVersionId** *(string) --* 

          Version of the copied object in the destination bucket.

          
        

        - **VersionId** *(string) --* 

          Version ID of the newly created copy.

          
        

        - **ServerSideEncryption** *(string) --* 

          The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* 

          If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric customer managed customer master key (CMK) that was used for the object.

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: delete(**kwargs)

    

    Removes the null version (if there is one) of an object and inserts a delete marker, which becomes the latest version of the object. If there isn't a null version, Amazon S3 does not remove any objects.

     

    To remove a specific version, you must be the bucket owner and you must use the version Id subresource. Using this subresource permanently deletes the version. If the object deleted is a delete marker, Amazon S3 sets the response header, ``x-amz-delete-marker`` , to true. 

     

    If the object you want to delete is in a bucket where the bucket versioning configuration is MFA Delete enabled, you must include the ``x-amz-mfa`` request header in the DELETE ``versionId`` request. Requests that include ``x-amz-mfa`` must use HTTPS. 

     

    For more information about MFA Delete, see `Using MFA Delete <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMFADelete.html>`__ . To see sample requests that use versioning, see `Sample Request <https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectDELETE.html#ExampleVersionObjectDelete>`__ . 

     

    You can delete objects by explicitly calling the DELETE Object API or configure its lifecycle ( PutBucketLifecycle ) to enable Amazon S3 to remove them for you. If you want to block users or accounts from removing or deleting objects from your bucket, you must deny them the ``s3:DeleteObject`` , ``s3:DeleteObjectVersion`` , and ``s3:PutLifeCycleConfiguration`` actions. 

     

    The following operation is related to ``DeleteObject`` :

     

     
    *  PutObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteObject>`_    


    **Request Syntax** 
    ::

      response = object_summary.delete(
          MFA='string',
          VersionId='string',
          RequestPayer='requester'
      )
    :type MFA: string
    :param MFA: 

      The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA delete enabled.

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'DeleteMarker': True|False,
            'VersionId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **DeleteMarker** *(boolean) --* Not returned by COS.
        

        - **VersionId** *(string) --* 

          Returns the version ID of the delete marker created as a result of the DELETE operation.

          
        

        - **RequestCharged** *(string) --* Not returned by COS.
    

  .. py:method:: get(**kwargs)

    

    Retrieves objects from Amazon S3. To use ``GET`` , you must have ``READ`` access to the object. If you grant ``READ`` access to the anonymous user, you can return the object without using an authorization header.

     

    An Amazon S3 bucket has no directory hierarchy such as you would find in a typical computer file system. You can, however, create a logical hierarchy by using object key names that imply a folder structure. For example, instead of naming an object ``sample.jpg`` , you can name it ``photos/2006/February/sample.jpg`` .

     

    To get an object from such a logical hierarchy, specify the full key name for the object in the ``GET`` operation. For a virtual hosted-style request example, if you have the object ``photos/2006/February/sample.jpg`` , specify the resource as ``/photos/2006/February/sample.jpg`` . For a path-style request example, if you have the object ``photos/2006/February/sample.jpg`` in the bucket named ``examplebucket`` , specify the resource as ``/examplebucket/photos/2006/February/sample.jpg`` . For more information about request types, see `HTTP Host Header Bucket Specification <https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html#VirtualHostingSpecifyBucket>`__ .

     

    To distribute large files to many people, you can save bandwidth costs by using BitTorrent. For more information, see `Amazon S3 Torrent <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3Torrent.html>`__ . For more information about returning the ACL of an object, see  GetObjectAcl .

     

    If the object you are retrieving is stored in the GLACIER or DEEP_ARCHIVE storage classes, before you can retrieve the object you must first restore a copy using . Otherwise, this operation returns an ``InvalidObjectStateError`` error. For information about restoring archived objects, see `Restoring Archived Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html>`__ .

     

    Encryption request headers, like ``x-amz-server-side-encryption`` , should not be sent for GET requests if your object uses server-side encryption with CMKs stored in AWS KMS (SSE-KMS) or server-side encryption with Amazon S3–managed encryption keys (SSE-S3). If your object does use these types of keys, you’ll get an HTTP 400 BadRequest error.

     

    If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object, you must use the following headers:

     

     
    * x-amz-server-side​-encryption​-customer-algorithm 
     
    * x-amz-server-side​-encryption​-customer-key 
     
    * x-amz-server-side​-encryption​-customer-key-MD5 
     

     

    For more information about SSE-C, see `Server-Side Encryption (Using Customer-Provided Encryption Keys) <https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html>`__ .

     

    Assuming you have permission to read object tags (permission for the ``s3:GetObjectVersionTagging`` action), the response also returns the ``x-amz-tagging-count`` header that provides the count of number of tags associated with the object. You can use  GetObjectTagging to retrieve the tag set associated with an object.

     

     **Permissions**  

     

    You need the ``s3:GetObject`` permission for this operation. For more information, see `Specifying Permissions in a Policy <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html>`__ . If the object you request does not exist, the error Amazon S3 returns depends on whether you also have the ``s3:ListBucket`` permission.

     

     
    * If you have the ``s3:ListBucket`` permission on the bucket, Amazon S3 will return an HTTP status code 404 ("no such key") error. 
     
    * If you don’t have the ``s3:ListBucket`` permission, Amazon S3 will return an HTTP status code 403 ("access denied") error. 
     

     

     **Versioning**  

     

    By default, the GET operation returns the current version of an object. To return a different version, use the ``versionId`` subresource.

     

    .. note::

       

      If the current version of the object is a delete marker, Amazon S3 behaves as if the object was deleted and includes ``x-amz-delete-marker: true`` in the response.

       

     

    For more information about versioning, see  PutBucketVersioning . 

     

     **Overriding Response Header Values**  

     

    There are times when you want to override certain response header values in a GET response. For example, you might override the Content-Disposition response header value in your GET request.

     

    You can override values for a set of response headers using the following query parameters. These response header values are sent only on a successful request, that is, when status code 200 OK is returned. The set of headers you can override using these parameters is a subset of the headers that Amazon S3 accepts when you create an object. The response headers that you can override for the GET response are ``Content-Type`` , ``Content-Language`` , ``Expires`` , ``Cache-Control`` , ``Content-Disposition`` , and ``Content-Encoding`` . To override these header values in the GET response, you use the following request parameters.

     

    .. note::

       

      You must sign the request, either using an Authorization header or a presigned URL, when using these parameters. They cannot be used with an unsigned (anonymous) request.

       

     

     
    * ``response-content-type``   
     
    * ``response-content-language``   
     
    * ``response-expires``   
     
    * ``response-cache-control``   
     
    * ``response-content-disposition``   
     
    * ``response-content-encoding``   
     

     

     **Additional Considerations about Request Headers**  

     

    If both of the ``If-Match`` and ``If-Unmodified-Since`` headers are present in the request as follows: ``If-Match`` condition evaluates to ``true`` , and; ``If-Unmodified-Since`` condition evaluates to ``false`` ; then, S3 returns 200 OK and the data requested. 

     

    If both of the ``If-None-Match`` and ``If-Modified-Since`` headers are present in the request as follows:``If-None-Match`` condition evaluates to ``false`` , and; ``If-Modified-Since`` condition evaluates to ``true`` ; then, S3 returns 304 Not Modified response code.

     

    For more information about conditional requests, see `RFC 7232 <https://tools.ietf.org/html/rfc7232>`__ .

     

    The following operations are related to ``GetObject`` :

     

     
    *  ListBuckets   
     
    *  GetObjectAcl   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetObject>`_    


    **Request Syntax** 
    ::

      response = object_summary.get(
          IfMatch='string',
          IfModifiedSince=datetime(2015, 1, 1),
          IfNoneMatch='string',
          IfUnmodifiedSince=datetime(2015, 1, 1),
          MirrorDestination='string',
          Range='string',
          ResponseCacheControl='string',
          ResponseContentDisposition='string',
          ResponseContentEncoding='string',
          ResponseContentLanguage='string',
          ResponseContentType='string',
          ResponseExpires=datetime(2015, 1, 1),
          VersionId='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester',
          PartNumber=123
      )
    :type IfMatch: string
    :param IfMatch: 

      Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).

      

    
    :type IfModifiedSince: datetime
    :param IfModifiedSince: 

      Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).

      

    
    :type IfNoneMatch: string
    :param IfNoneMatch: 

      Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).

      

    
    :type IfUnmodifiedSince: datetime
    :param IfUnmodifiedSince: 

      Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Range: string
    :param Range: 

      Downloads the specified range bytes of an object. For more information about the HTTP Range header, see `http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35 .

      

    
    :type ResponseCacheControl: string
    :param ResponseCacheControl: 

      Sets the ``Cache-Control`` header of the response.

      

    
    :type ResponseContentDisposition: string
    :param ResponseContentDisposition: 

      Sets the ``Content-Disposition`` header of the response

      

    
    :type ResponseContentEncoding: string
    :param ResponseContentEncoding: 

      Sets the ``Content-Encoding`` header of the response.

      

    
    :type ResponseContentLanguage: string
    :param ResponseContentLanguage: 

      Sets the ``Content-Language`` header of the response.

      

    
    :type ResponseContentType: string
    :param ResponseContentType: 

      Sets the ``Content-Type`` header of the response.

      

    
    :type ResponseExpires: datetime
    :param ResponseExpires: 

      Sets the ``Expires`` header of the response.

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PartNumber: integer
    :param PartNumber: 

      Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Body': StreamingBody(),
            'DeleteMarker': True|False,
            'AcceptRanges': 'string',
            'Expiration': 'string',
            'Restore': 'string',
            'LastModified': datetime(2015, 1, 1),
            'ContentLength': 123,
            'ETag': 'string',
            'MissingMeta': 123,
            'VersionId': 'string',
            'CacheControl': 'string',
            'ContentDisposition': 'string',
            'ContentEncoding': 'string',
            'ContentLanguage': 'string',
            'ContentRange': 'string',
            'ContentType': 'string',
            'Expires': datetime(2015, 1, 1),
            'WebsiteRedirectLocation': 'string',
            'ServerSideEncryption': 'AES256',
            'Metadata': {
                'string': 'string'
            },
            'RetentionExpirationDate': datetime(2015, 1, 1),
            'RetentionLegalHoldCount': 123,
            'RetentionPeriod': 123,
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'RequestCharged': 'requester',
            'ReplicationStatus': 'COMPLETE'|'PENDING'|'FAILED'|'REPLICA',
            'PartsCount': 123,
            'IbmRestoredCopyStorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'IbmTransition': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Body** (:class:`.StreamingBody`) -- 

          Object data.

          
        

        - **DeleteMarker** *(boolean) --* Not returned by COS.
        

        - **AcceptRanges** *(string) --* 

          Indicates that a range of bytes was specified.

          
        

        - **Expiration** *(string) --* 

          If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key-value pairs providing object expiration information. The value of the rule-id is URL encoded.

          
        

        - **Restore** *(string) --* 

          Provides information about object restoration operation and expiration time of the restored object copy.

          
        

        - **LastModified** *(datetime) --* 

          Last modified date of the object

          
        

        - **ContentLength** *(integer) --* 

          Size of the body in bytes.

          
        

        - **ETag** *(string) --* 

          An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.

          
        

        - **MissingMeta** *(integer) --* 

          This is set to the number of metadata entries not returned in ``x-amz-meta`` headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.

          
        

        - **VersionId** *(string) --* 

          Version of the object.

          
        

        - **CacheControl** *(string) --* 

          Specifies caching behavior along the request/reply chain.

          
        

        - **ContentDisposition** *(string) --* 

          Specifies presentational information for the object.

          
        

        - **ContentEncoding** *(string) --* 

          Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.

          
        

        - **ContentLanguage** *(string) --* 

          The language the content is in.

          
        

        - **ContentRange** *(string) --* 

          The portion of the object returned in the response.

          
        

        - **ContentType** *(string) --* 

          A standard MIME type describing the format of the object data.

          
        

        - **Expires** *(datetime) --* 

          The date and time at which the object is no longer cacheable.

          
        

        - **WebsiteRedirectLocation** *(string) --* 

          If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.

          
        

        - **ServerSideEncryption** *(string) --* 

          The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **Metadata** *(dict) --* 

          A map of metadata to store with the object in S3.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **RetentionExpirationDate** *(datetime) --* Date on which it will be legal to delete or modify the object. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used. 
        

        - **RetentionLegalHoldCount** *(integer) --* Returns the count of legal holds on the object. If there are no legal holds, the header is not returned
        

        - **RetentionPeriod** *(integer) --* Retention period to store on the object in seconds. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* Ignored by COS if present.
        

        - **StorageClass** *(string) --* 

          Provides storage class information of the object. Amazon S3 returns this header for all objects except for Standard storage class objects.

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
        

        - **ReplicationStatus** *(string) --* 

          Amazon S3 can return this if your request involves a bucket that is either a source or destination in a replication rule.

          
        

        - **PartsCount** *(integer) --* 

          The count of parts this object has.

          
        

        - **IbmRestoredCopyStorageClass** *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.
        

        - **IbmTransition** *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.
    

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: initiate_multipart_upload(**kwargs)

    

    This operation initiates a multipart upload and returns an upload ID. This upload ID is used to associate all of the parts in the specific multipart upload. You specify this upload ID in each of your subsequent upload part requests (see  UploadPart ). You also include this upload ID in the final request to either complete or abort the multipart upload request.

     

    For more information about multipart uploads, see `Multipart Upload Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html>`__ .

     

    If you have configured a lifecycle rule to abort incomplete multipart uploads, the upload must complete within the number of days specified in the bucket lifecycle configuration. Otherwise, the incomplete multipart upload becomes eligible for an abort operation and Amazon S3 aborts the multipart upload. For more information, see `Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config>`__ .

     

    For information about the permissions required to use the multipart upload API, see `Multipart Upload API and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ .

     

    For request signing, multipart upload is just a series of regular requests. You initiate a multipart upload, send one or more requests to upload parts, and then complete the multipart upload process. You sign each request individually. There is nothing special about signing multipart upload requests. For more information about signing, see `Authenticating Requests (AWS Signature Version 4) <https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html>`__ .

     

    .. note::

       

      After you initiate a multipart upload and upload one or more parts, to stop being charged for storing the uploaded parts, you must either complete or abort the multipart upload. Amazon S3 frees up the space used to store the parts and stop charging you for storing them only after you either complete or abort a multipart upload. 

       

     

    You can optionally request server-side encryption. For server-side encryption, Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. You can provide your own encryption key, or use AWS Key Management Service (AWS KMS) customer master keys (CMKs) or Amazon S3-managed encryption keys. If you choose to provide your own encryption key, the request headers you provide in  UploadPart ) and  UploadPartCopy ) requests must match the headers you used in the request to initiate the upload by using ``CreateMultipartUpload`` . 

     

    To perform a multipart upload with encryption using an AWS KMS CMK, the requester must have permission to the ``kms:Encrypt`` , ``kms:Decrypt`` , ``kms:ReEncrypt*`` , ``kms:GenerateDataKey*`` , and ``kms:DescribeKey`` actions on the key. These permissions are required because Amazon S3 must decrypt and read data from the encrypted file parts before it completes the multipart upload.

     

    If your AWS Identity and Access Management (IAM) user or role is in the same AWS account as the AWS KMS CMK, then you must have these permissions on the key policy. If your IAM user or role belongs to a different account than the key, then you must have the permissions on both the key policy and your IAM user or role.

     

    For more information, see `Protecting Data Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html>`__ .

      Access Permissions  

    When copying an object, you can optionally specify the accounts or groups that should be granted specific permissions on the new object. There are two ways to grant the permissions using the request headers:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . 
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

      Server-Side- Encryption-Specific Request Headers  

    You can optionally tell Amazon S3 to encrypt data at rest using server-side encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. The option you use depends on whether you want to use AWS managed encryption keys or provide your own encryption key. 

     

     
    * Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys used to encrypt data, specify the following headers in the request. 

       
      * x-amz-server-side​-encryption 
       
      * x-amz-server-side-encryption-aws-kms-key-id 
       
      * x-amz-server-side-encryption-context 
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data.

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * Use customer-provided encryption keys – If you want to manage your own encryption keys, provide all the following headers in the request. 

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

      Access-Control-List (ACL)-Specific Request Headers  

    You also can use the following access control–related headers with this operation. By default, all objects are private. Only the owner has full access control. When adding a new object, you can grant permissions to individual AWS accounts or to predefined groups defined by Amazon S3. These permissions are then added to the access control list (ACL) on the object. For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ . With this operation, you can grant access permissions using one of the following two methods:

     

     
    * Specify a canned ACL (``x-amz-acl`` ) — Amazon S3 supports a set of predefined ACLs, known as *canned ACLs* . Each canned ACL has a predefined set of grantees and permissions. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly — To explicitly grant access permissions to specific AWS accounts or groups, use the following headers. Each header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . In the header, you specify a list of grantees who get the specific permission. To grant permissions explicitly, use: 

       
      * x-amz-grant-read 
       
      * x-amz-grant-write 
       
      * x-amz-grant-read-acp 
       
      * x-amz-grant-write-acp 
       
      * x-amz-grant-full-control 
       

     

    You specify each grantee as a type=value pair, where the type is one of the following:

     

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants the AWS accounts identified by email addresses permissions to read object data and its metadata:

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

       

    The following operations are related to ``CreateMultipartUpload`` :

     

     
    *  UploadPart   
     
    *  CompleteMultipartUpload   
     
    *  AbortMultipartUpload   
     
    *  ListParts   
     
    *  ListMultipartUploads   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/CreateMultipartUpload>`_    


    **Request Syntax** 
    ::

      multipart_upload = object_summary.initiate_multipart_upload(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read'|'aws-exec-read'|'bucket-owner-read'|'bucket-owner-full-control',
          CacheControl='string',
          ContentDisposition='string',
          ContentEncoding='string',
          ContentLanguage='string',
          ContentType='string',
          Expires=datetime(2015, 1, 1),
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWriteACP='string',
          Metadata={
              'string': 'string'
          },
          ServerSideEncryption='AES256',
          StorageClass='ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
          WebsiteRedirectLocation='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          SSEKMSKeyId='string',
          RequestPayer='requester'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the object.

      

    
    :type CacheControl: string
    :param CacheControl: 

      Specifies caching behavior along the request/reply chain.

      

    
    :type ContentDisposition: string
    :param ContentDisposition: 

      Specifies presentational information for the object.

      

    
    :type ContentEncoding: string
    :param ContentEncoding: 

      Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.

      

    
    :type ContentLanguage: string
    :param ContentLanguage: 

      The language the content is in.

      

    
    :type ContentType: string
    :param ContentType: 

      A standard MIME type describing the format of the object data.

      

    
    :type Expires: datetime
    :param Expires: 

      The date and time at which the object is no longer cacheable.

      

    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to read the object data and its metadata.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the object ACL.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable object.

      

    
    :type Metadata: dict
    :param Metadata: 

      A map of metadata to store with the object in S3.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type ServerSideEncryption: string
    :param ServerSideEncryption: 

      The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

      

    
    :type StorageClass: string
    :param StorageClass: 

      The type of storage to use for the object. Defaults to 'STANDARD'.

      

    
    :type WebsiteRedirectLocation: string
    :param WebsiteRedirectLocation: 

      If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type SSEKMSKeyId: string
    :param SSEKMSKeyId: Ignored by COS if present.

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: :py:class:`s3.MultipartUpload`
    :returns: MultipartUpload resource
    

  .. py:method:: load(*args, **kwargs)

        
    Calls s3.Client.head_object to update the attributes of the ObjectSummary
    resource.


  .. py:method:: put(**kwargs)

    

    Adds an object to a bucket. You must have WRITE permissions on a bucket to add an object to it.

     

    Amazon S3 never adds partial objects; if you receive a success response, Amazon S3 added the entire object to the bucket.

     

    Amazon S3 is a distributed system. If it receives multiple write requests for the same object simultaneously, it overwrites all but the last object written. Amazon S3 does not provide object locking; if you need this, make sure to build it into your application layer or use versioning instead.

     

    To ensure that data is not corrupted traversing the network, use the ``Content-MD5`` header. When you use this header, Amazon S3 checks the object against the provided MD5 value and, if they do not match, returns an error. Additionally, you can calculate the MD5 while putting an object to Amazon S3 and compare the returned ETag to the calculated MD5 value.

     

    .. note::

       

      To configure your application to send the request headers before sending the request body, use the ``100-continue`` HTTP status code. For PUT operations, this helps you avoid sending the message body if the message is rejected based on the headers (for example, because authentication fails or a redirect occurs). For more information on the ``100-continue`` HTTP status code, see Section 8.2.3 of `http\://www.ietf.org/rfc/rfc2616.txt <http://www.ietf.org/rfc/rfc2616.txt>`__ .

       

     

    You can optionally request server-side encryption. With server-side encryption, Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts the data when you access it. You have the option to provide your own encryption key or use AWS managed encryption keys. For more information, see `Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html>`__ .

      Access Permissions  

    You can optionally specify the accounts or groups that should be granted specific permissions on the new object. There are two ways to grant the permissions using the request headers:

     

     
    * Specify a canned ACL with the ``x-amz-acl`` request header. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly with the ``x-amz-grant-read`` , ``x-amz-grant-read-acp`` , ``x-amz-grant-write-acp`` , and ``x-amz-grant-full-control`` headers. These parameters map to the set of permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . 
     

     

    You can use either a canned ACL or specify access permissions explicitly. You cannot do both.

      Server-Side- Encryption-Specific Request Headers  

    You can optionally tell Amazon S3 to encrypt data at rest using server-side encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. The option you use depends on whether you want to use AWS managed encryption keys or provide your own encryption key. 

     

     
    * Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys used to encrypt data, specify the following headers in the request. 

       
      * x-amz-server-side​-encryption 
       
      * x-amz-server-side-encryption-aws-kms-key-id 
       
      * x-amz-server-side-encryption-context 
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data. If you want to use a customer managed AWS KMS CMK, you must provide the ``x-amz-server-side-encryption-aws-kms-key-id`` of the symmetric customer managed CMK. Amazon S3 only supports symmetric CMKs and not asymmetric CMKs. For more information, see `Using Symmetric and Asymmetric Keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html>`__ in the *AWS Key Management Service Developer Guide* .

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * Use customer-provided encryption keys – If you want to manage your own encryption keys, provide all the following headers in the request. 

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

      Access-Control-List (ACL)-Specific Request Headers  

    You also can use the following access control–related headers with this operation. By default, all objects are private. Only the owner has full access control. When adding a new object, you can grant permissions to individual AWS accounts or to predefined groups defined by Amazon S3. These permissions are then added to the Access Control List (ACL) on the object. For more information, see `Using ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ . With this operation, you can grant access permissions using one of the following two methods:

     

     
    * Specify a canned ACL (``x-amz-acl`` ) — Amazon S3 supports a set of predefined ACLs, known as canned ACLs. Each canned ACL has a predefined set of grantees and permissions. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ . 
     
    * Specify access permissions explicitly — To explicitly grant access permissions to specific AWS accounts or groups, use the following headers. Each header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see `Access Control List (ACL) Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html>`__ . In the header, you specify a list of grantees who get the specific permission. To grant permissions explicitly use: 

       
      * x-amz-grant-read 
       
      * x-amz-grant-write 
       
      * x-amz-grant-read-acp 
       
      * x-amz-grant-write-acp 
       
      * x-amz-grant-full-control 
       

     

    You specify each grantee as a type=value pair, where the type is one of the following:

     

       
      * ``emailAddress`` – if the value specified is the email address of an AWS account 

      .. warning::

         Using email addresses to specify a grantee is only supported in the following AWS Regions:  

           
          * US East (N. Virginia) 
           
          * US West (N. California) 
           
          * US West (Oregon) 
           
          * Asia Pacific (Singapore) 
           
          * Asia Pacific (Sydney) 
           
          * Asia Pacific (Tokyo) 
           
          * EU (Ireland) 
           
          * South America (São Paulo) 
           

         

        For a list of all the Amazon S3 supported Regions and endpoints, see `Regions and Endpoints <https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region>`__ in the AWS General Reference

         

       
       
      * ``id`` – if the value specified is the canonical user ID of an AWS account 
       
      * ``uri`` – if you are granting permissions to a predefined group 
       

     

    For example, the following ``x-amz-grant-read`` header grants the AWS accounts identified by email addresses permissions to read object data and its metadata:

     

     ``x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"``  

     
     

      Server-Side- Encryption-Specific Request Headers  

    You can optionally tell Amazon S3 to encrypt data at rest using server-side encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it when you access it. The option you use depends on whether you want to use AWS-managed encryption keys or provide your own encryption key. 

     

     
    * Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys used to encrypt data, specify the following headers in the request. 

       
      * x-amz-server-side​-encryption 
       
      * x-amz-server-side-encryption-aws-kms-key-id 
       
      * x-amz-server-side-encryption-context 
       

     

    .. note::

       

      If you specify ``x-amz-server-side-encryption:aws:kms`` , but don't provide ``x-amz-server-side-encryption-aws-kms-key-id`` , Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data. If you want to use a customer managed AWS KMS CMK, you must provide the ``x-amz-server-side-encryption-aws-kms-key-id`` of the symmetric customer managed CMK. Amazon S3 only supports symmetric CMKs and not asymmetric CMKs. For more information, see `Using Symmetric and Asymmetric Keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html>`__ in the *AWS Key Management Service Developer Guide* .

       

     

    .. warning::

       

      All GET and PUT requests for an object protected by AWS KMS fail if you don't make them with SSL or by using SigV4.

       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     
    * Use customer-provided encryption keys – If you want to manage your own encryption keys, provide all the following headers in the request. 

    .. note::

       If you use this feature, the ETag value that Amazon S3 returns in the response is not the MD5 of the object. 

     

       
      * x-amz-server-side​-encryption​-customer-algorithm 
       
      * x-amz-server-side​-encryption​-customer-key 
       
      * x-amz-server-side​-encryption​-customer-key-MD5 
       

     

    For more information about server-side encryption with CMKs stored in AWS KMS (SSE-KMS), see `Protecting Data Using Server-Side Encryption with CMKs stored in AWS KMS <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ .

     
     

       

     **Storage Class Options**  

     

    By default, Amazon S3 uses the Standard storage class to store newly created objects. The Standard storage class provides high durability and high availability. You can specify other storage classes depending on the performance needs. For more information, see `Storage Classes <https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html>`__ in the Amazon Simple Storage Service Developer Guide.

     

     **Versioning**  

     

    If you enable versioning for a bucket, Amazon S3 automatically generates a unique version ID for the object being stored. Amazon S3 returns this ID in the response using the ``x-amz-version-id response`` header. If versioning is suspended, Amazon S3 always uses null as the version ID for the object stored. For more information about returning the versioning state of a bucket, see  GetBucketVersioning . If you enable versioning for a bucket, when Amazon S3 receives multiple write requests for the same object simultaneously, it stores all of the objects.

     

     **Related Resources**  

     

     
    *  CopyObject   
     
    *  DeleteObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutObject>`_    


    **Request Syntax** 
    ::

      response = object_summary.put(
          ACL='private'|'public-read'|'public-read-write'|'authenticated-read'|'aws-exec-read'|'bucket-owner-read'|'bucket-owner-full-control',
          Body=b'bytes'|file,
          CacheControl='string',
          ContentDisposition='string',
          ContentEncoding='string',
          ContentLanguage='string',
          ContentLength=123,
          ContentMD5='string',
          ContentType='string',
          Expires=datetime(2015, 1, 1),
          GrantFullControl='string',
          GrantRead='string',
          GrantReadACP='string',
          GrantWriteACP='string',
          Metadata={
              'string': 'string'
          },
          RetentionExpirationDate=datetime(2015, 1, 1),
          RetentionLegalHoldId='string',
          RetentionPeriod=123,
          ServerSideEncryption='AES256',
          StorageClass='ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
          WebsiteRedirectLocation='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          SSEKMSKeyId='string',
          RequestPayer='requester'
      )
    :type ACL: string
    :param ACL: 

      The canned ACL to apply to the object. For more information, see `Canned ACL <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL>`__ .

      

    
    :type Body: bytes or seekable file-like object
    :param Body: 

      Object data.

      

    
    :type CacheControl: string
    :param CacheControl: 

      Can be used to specify caching behavior along the request/reply chain. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9>`__ .

      

    
    :type ContentDisposition: string
    :param ContentDisposition: 

      Specifies presentational information for the object. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1>`__ .

      

    
    :type ContentEncoding: string
    :param ContentEncoding: 

      Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11>`__ .

      

    
    :type ContentLanguage: string
    :param ContentLanguage: 

      The language the content is in.

      

    
    :type ContentLength: integer
    :param ContentLength: 

      Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13>`__ .

      

    
    :type ContentMD5: string
    :param ContentMD5: 

      The base64-encoded 128-bit MD5 digest of the message (without the headers) according to RFC 1864. This header can be used as a message integrity check to verify that the data is the same data that was originally sent. Although it is optional, we recommend using the Content-MD5 mechanism as an end-to-end integrity check. For more information about REST request authentication, see `REST Authentication <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html>`__ .

      

    
    :type ContentType: string
    :param ContentType: 

      A standard MIME type describing the format of the contents. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17>`__ .

      

    
    :type Expires: datetime
    :param Expires: 

      The date and time at which the object is no longer cacheable. For more information, see `http\://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21>`__ .

      

    
    :type GrantFullControl: string
    :param GrantFullControl: 

      Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.

      

    
    :type GrantRead: string
    :param GrantRead: 

      Allows grantee to read the object data and its metadata.

      

    
    :type GrantReadACP: string
    :param GrantReadACP: 

      Allows grantee to read the object ACL.

      

    
    :type GrantWriteACP: string
    :param GrantWriteACP: 

      Allows grantee to write the ACL for the applicable object.

      

    
    :type Metadata: dict
    :param Metadata: 

      A map of metadata to store with the object in S3.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type RetentionExpirationDate: datetime
    :param RetentionExpirationDate: Date on which it will be legal to delete or modify the object. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used.

    
    :type RetentionLegalHoldId: string
    :param RetentionLegalHoldId: A single legal hold to apply to the object. A legal hold is a character long string of max length 64. The object cannot be overwritten or deleted until all legal holds associated with the object are removed.

    
    :type RetentionPeriod: integer
    :param RetentionPeriod: Retention period to store on the object in seconds. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.

    
    :type ServerSideEncryption: string
    :param ServerSideEncryption: 

      The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

      

    
    :type StorageClass: string
    :param StorageClass: 

      If you don't specify, Standard is the default storage class. Amazon S3 supports other storage classes.

      

    
    :type WebsiteRedirectLocation: string
    :param WebsiteRedirectLocation: 

      If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. For information about object metadata, see `Object Key and Metadata <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html>`__ .

       

      In the following example, the request header sets the redirect to an object (anotherPage.html) in the same bucket:

       

       ``x-amz-website-redirect-location: /anotherPage.html``  

       

      In the following example, the request header sets the object redirect to another website:

       

       ``x-amz-website-redirect-location: http://www.example.com/``  

       

      For more information about website hosting in Amazon S3, see `Hosting Websites on Amazon S3 <https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html>`__ and `How to Configure Website Page Redirects <https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html>`__ . 

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type SSEKMSKeyId: string
    :param SSEKMSKeyId: Ignored by COS if present.

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Expiration': 'string',
            'ETag': 'string',
            'ServerSideEncryption': 'AES256',
            'VersionId': 'string',
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Expiration** *(string) --* 

          If the expiration is configured for the object (see  PutBucketLifecycleConfiguration ), the response includes this header. It includes the expiry-date and rule-id key-value pairs that provide information about object expiration. The value of the rule-id is URL encoded.

          
        

        - **ETag** *(string) --* 

          Entity tag for the uploaded object.

          
        

        - **ServerSideEncryption** *(string) --* 

          If you specified server-side encryption either with an AWS KMS customer master key (CMK) or Amazon S3-managed encryption key in your PUT request, the response includes this header. It confirms the encryption algorithm that Amazon S3 used to encrypt the object.

          
        

        - **VersionId** *(string) --* 

          Version of the object.

          
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* Not returned by COS.
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
    

  .. py:method:: restore_object(**kwargs)

    

    Restores an archived copy of an object back into Amazon S3

     

    This operation performs the following types of requests: 

     

     
    * ``select`` - Perform a select query on an archived object 
     
    * ``restore an archive`` - Restore an archived object 
     

     

    To use this operation, you must have permissions to perform the ``s3:RestoreObject`` and ``s3:GetObject`` actions. The bucket owner has this permission by default and can grant this permission to others. For more information about permissions, see `Permissions Related to Bucket Subresource Operations <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources>`__ and `Managing Access Permissions to Your Amazon S3 Resources <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

     **Querying Archives with Select Requests**  

     

    You use a select type of request to perform SQL queries on archived objects. The archived objects that are being queried by the select request must be formatted as uncompressed comma-separated values (CSV) files. You can run queries and custom analytics on your archived data without having to restore your data to a hotter Amazon S3 tier. For an overview about select requests, see `Querying Archived Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/querying-glacier-archives.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    When making a select request, do the following:

     

     
    * Define an output location for the select query's output. This must be an Amazon S3 bucket in the same AWS Region as the bucket that contains the archive object that is being queried. The AWS account that initiates the job must have permissions to write to the S3 bucket. You can specify the storage class and encryption for the output objects stored in the bucket. For more information about output, see `Querying Archived Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/querying-glacier-archives.html>`__ in the *Amazon Simple Storage Service Developer Guide* . For more information about the ``S3`` structure in the request body, see the following: 

       
      *  PutObject   
       
      * `Managing Access with ACLs <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html>`__ in the *Amazon Simple Storage Service Developer Guide*   
       
      * `Protecting Data Using Server-Side Encryption <https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html>`__ in the *Amazon Simple Storage Service Developer Guide*   
       

     
     
    * Define the SQL expression for the ``SELECT`` type of restoration for your query in the request body's ``SelectParameters`` structure. You can use expressions like the following examples. 

       
      * The following expression returns all records from the specified object.  ``SELECT * FROM Object``   
       
      * Assuming that you are not using any headers for data stored in the object, you can specify columns with positional headers.  ``SELECT s._1, s._2 FROM Object s WHERE s._3 > 100``   
       
      * If you have headers and you set the ``fileHeaderInfo`` in the ``CSV`` structure in the request body to ``USE`` , you can specify headers in the query. (If you set the ``fileHeaderInfo`` field to ``IGNORE`` , the first row is skipped for the query.) You cannot mix ordinal positions with header column names.   ``SELECT s.Id, s.FirstName, s.SSN FROM S3Object s``   
       

     
     

     

    For more information about using SQL with Glacier Select restore, see `SQL Reference for Amazon S3 Select and Glacier Select <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-glacier-select-sql-reference.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 

     

    When making a select request, you can also do the following:

     

     
    * To expedite your queries, specify the ``Expedited`` tier. For more information about tiers, see "Restoring Archives," later in this topic. 
     
    * Specify details about the data serialization format of both the input object that is being queried and the serialization of the CSV-encoded query results. 
     

     

    The following are additional important facts about the select feature:

     

     
    * The output results are new Amazon S3 objects. Unlike archive retrievals, they are stored until explicitly deleted-manually or through a lifecycle policy. 
     
    * You can issue more than one select request on the same Amazon S3 object. Amazon S3 doesn't deduplicate requests, so avoid issuing duplicate requests. 
     
    * Amazon S3 accepts a select request even if the object has already been restored. A select request doesn’t return error response ``409`` . 
     

     

     **Restoring Archives**  

     

    Objects in the GLACIER and DEEP_ARCHIVE storage classes are archived. To access an archived object, you must first initiate a restore request. This restores a temporary copy of the archived object. In a restore request, you specify the number of days that you want the restored copy to exist. After the specified period, Amazon S3 deletes the temporary copy but the object remains archived in the GLACIER or DEEP_ARCHIVE storage class that object was restored from. 

     

    To restore a specific object version, you can provide a version ID. If you don't provide a version ID, Amazon S3 restores the current version.

     

    The time it takes restore jobs to finish depends on which storage class the object is being restored from and which data access tier you specify. 

     

    When restoring an archived object (or using a select request), you can specify one of the following data access tier options in the ``Tier`` element of the request body: 

     

     
    * **``Expedited`` ** - Expedited retrievals allow you to quickly access your data stored in the GLACIER storage class when occasional urgent requests for a subset of archives are required. For all but the largest archived objects (250 MB+), data accessed using Expedited retrievals are typically made available within 1–5 minutes. Provisioned capacity ensures that retrieval capacity for Expedited retrievals is available when you need it. Expedited retrievals and provisioned capacity are not available for the DEEP_ARCHIVE storage class. 
     
    * **``Standard`` ** - Standard retrievals allow you to access any of your archived objects within several hours. This is the default option for the GLACIER and DEEP_ARCHIVE retrieval requests that do not specify the retrieval option. Standard retrievals typically complete within 3-5 hours from the GLACIER storage class and typically complete within 12 hours from the DEEP_ARCHIVE storage class.  
     
    * **``Bulk`` ** - Bulk retrievals are Amazon S3 Glacier’s lowest-cost retrieval option, enabling you to retrieve large amounts, even petabytes, of data inexpensively in a day. Bulk retrievals typically complete within 5-12 hours from the GLACIER storage class and typically complete within 48 hours from the DEEP_ARCHIVE storage class. 
     

     

    For more information about archive retrieval options and provisioned capacity for ``Expedited`` data access, see `Restoring Archived Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 

     

    You can use Amazon S3 restore speed upgrade to change the restore speed to a faster speed while it is in progress. You upgrade the speed of an in-progress restoration by issuing another restore request to the same object, setting a new ``Tier`` request element. When issuing a request to upgrade the restore tier, you must choose a tier that is faster than the tier that the in-progress restore is using. You must not change any other parameters, such as the ``Days`` request element. For more information, see `Upgrading the Speed of an In-Progress Restore <https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html#restoring-objects-upgrade-tier.title.html>`__ in the *Amazon Simple Storage Service Developer Guide* . 

     

    To get the status of object restoration, you can send a ``HEAD`` request. Operations return the ``x-amz-restore`` header, which provides information about the restoration status, in the response. You can use Amazon S3 event notifications to notify you when a restore is initiated or completed. For more information, see `Configuring Amazon S3 Event Notifications <https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html>`__ in the *Amazon Simple Storage Service Developer Guide* .

     

    After restoring an archived object, you can update the restoration period by reissuing the request with a new period. Amazon S3 updates the restoration period relative to the current time and charges only for the request-there are no data transfer charges. You cannot update the restoration period when Amazon S3 is actively processing your current restore request for the object.

     

    If your bucket has a lifecycle configuration with a rule that includes an expiration action, the object expiration overrides the life span that you specify in a restore request. For example, if you restore an object copy for 10 days, but the object is scheduled to expire in 3 days, Amazon S3 deletes the object in 3 days. For more information about lifecycle configuration, see  PutBucketLifecycleConfiguration and `Object Lifecycle Management <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html>`__ in *Amazon Simple Storage Service Developer Guide* .

     

     **Responses**  

     

    A successful operation returns either the ``200 OK`` or ``202 Accepted`` status code. 

     

     
    * If the object copy is not previously restored, then Amazon S3 returns ``202 Accepted`` in the response.  
     
    * If the object copy is previously restored, Amazon S3 returns ``200 OK`` in the response.  
     

     

     **Special Errors**  

     

     
    * 

      
      * *Code: RestoreAlreadyInProgress*   
       
      * *Cause: Object restore is already in progress. (This error does not apply to SELECT type requests.)*   
       
      * *HTTP Status Code: 409 Conflict*   
       
      * *SOAP Fault Code Prefix: Client*   
       

     
     
    * 

      
      * *Code: GlacierExpeditedRetrievalNotAvailable*   
       
      * *Cause: Glacier expedited retrievals are currently not available. Try again later. (Returned if there is insufficient capacity to process the Expedited request. This error applies only to Expedited retrievals and not to Standard or Bulk retrievals.)*   
       
      * *HTTP Status Code: 503*   
       
      * *SOAP Fault Code Prefix: N/A*   
       

     
     

     

     **Related Resources**  

     

     
    *  PutBucketLifecycleConfiguration   
     
    *  GetBucketNotificationConfiguration   
     
    * `SQL Reference for Amazon S3 Select and Glacier Select <https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-glacier-select-sql-reference.html>`__ in the *Amazon Simple Storage Service Developer Guide*   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/RestoreObject>`_    


    **Request Syntax** 
    ::

      response = object_summary.restore_object(
          VersionId='string',
          RestoreRequest={
              'Days': 123,
              'GlacierJobParameters': {
                  'Tier': 'Accelerated'|'Standard'|'Bulk'|'Expedited'
              }
          }
      )
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type RestoreRequest: dict
    :param RestoreRequest: 

    
      - **Days** *(integer) --* **[REQUIRED]** 

        Lifetime of the active copy in days. Do not use with restores that specify ``OutputLocation`` .

        

      
      - **GlacierJobParameters** *(dict) --* 

        Glacier related parameters pertaining to this job. Do not use with restores that specify ``OutputLocation`` .

        

      
        - **Tier** *(string) --* **[REQUIRED]** 

          Glacier retrieval tier at which the restore will be processed.

          

        
      
    
    
    :returns: None
  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: Acl()

    Creates a ObjectAcl resource.::

      object_acl = object_summary.Acl()

    
    :rtype: :py:class:`S3.ObjectAcl`
    :returns: A ObjectAcl resource
    

  .. py:method:: Bucket()

    Creates a Bucket resource.::

      bucket = object_summary.Bucket()

    
    :rtype: :py:class:`S3.Bucket`
    :returns: A Bucket resource
    

  .. py:method:: MultipartUpload(id)

    Creates a MultipartUpload resource.::

      multipart_upload = object_summary.MultipartUpload('id')

    :type id: string
    :param id: The MultipartUpload's id identifier. This **must** be set.
    
    :rtype: :py:class:`S3.MultipartUpload`
    :returns: A MultipartUpload resource
    

  .. py:method:: Object()

    Creates a Object resource.::

      object = object_summary.Object()

    
    :rtype: :py:class:`S3.Object`
    :returns: A Object resource
    

  .. py:method:: Version(id)

    Creates a ObjectVersion resource.::

      object_version = object_summary.Version('id')

    :type id: string
    :param id: The Version's id identifier. This **must** be set.
    
    :rtype: :py:class:`S3.ObjectVersion`
    :returns: A ObjectVersion resource
    
  .. rst-class:: admonition-title
  
  Waiters
  
  Waiters provide an interface to wait for a resource to reach a specific state.
  For more information about waiters refer to the :ref:`Resources Introduction Guide<waiters_intro>`.
  

  .. py:method:: wait_until_exists(**kwargs)

    Waits until this ObjectSummary is exists. This method calls :py:meth:`S3.Waiter.object_exists.wait` which polls. :py:meth:`S3.Client.head_object` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadObject>`_    


    **Request Syntax** 
    ::

      object_summary.wait_until_exists(
          IfMatch='string',
          IfModifiedSince=datetime(2015, 1, 1),
          IfNoneMatch='string',
          IfUnmodifiedSince=datetime(2015, 1, 1),
          MirrorDestination='string',
          Range='string',
          VersionId='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester',
          PartNumber=123
      )
    :type IfMatch: string
    :param IfMatch: 

      Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).

      

    
    :type IfModifiedSince: datetime
    :param IfModifiedSince: 

      Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).

      

    
    :type IfNoneMatch: string
    :param IfNoneMatch: 

      Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).

      

    
    :type IfUnmodifiedSince: datetime
    :param IfUnmodifiedSince: 

      Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Range: string
    :param Range: 

      Downloads the specified range bytes of an object. For more information about the HTTP Range header, see `http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35 .

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PartNumber: integer
    :param PartNumber: 

      Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.

      

    
    :returns: None

  .. py:method:: wait_until_not_exists(**kwargs)

    Waits until this ObjectSummary is not exists. This method calls :py:meth:`S3.Waiter.object_not_exists.wait` which polls. :py:meth:`S3.Client.head_object` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadObject>`_    


    **Request Syntax** 
    ::

      object_summary.wait_until_not_exists(
          IfMatch='string',
          IfModifiedSince=datetime(2015, 1, 1),
          IfNoneMatch='string',
          IfUnmodifiedSince=datetime(2015, 1, 1),
          MirrorDestination='string',
          Range='string',
          VersionId='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester',
          PartNumber=123
      )
    :type IfMatch: string
    :param IfMatch: 

      Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).

      

    
    :type IfModifiedSince: datetime
    :param IfModifiedSince: 

      Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).

      

    
    :type IfNoneMatch: string
    :param IfNoneMatch: 

      Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).

      

    
    :type IfUnmodifiedSince: datetime
    :param IfUnmodifiedSince: 

      Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Range: string
    :param Range: 

      Downloads the specified range bytes of an object. For more information about the HTTP Range header, see `http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35 .

      

    
    :type VersionId: string
    :param VersionId: 

      VersionId used to reference a specific version of the object.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PartNumber: integer
    :param PartNumber: 

      Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.

      

    
    :returns: None

=============
ObjectVersion
=============



.. py:class:: S3.ObjectVersion(bucket_name,object_key,id)

  A resource representing an Amazon Simple Storage Service (S3) ObjectVersion::

    
    import ibm_boto3
    
    s3 = ibm_boto3.resource('s3')
    object_version = s3.ObjectVersion('bucket_name','object_key','id')

  :type bucket_name: string
  :param bucket_name: The ObjectVersion's bucket_name identifier. This **must** be set.
  :type object_key: string
  :param object_key: The ObjectVersion's object_key identifier. This **must** be set.
  :type id: string
  :param id: The ObjectVersion's id identifier. This **must** be set.
  
  These are the resource's available identifiers:
  
  *   :py:attr:`bucket_name`

  
  *   :py:attr:`object_key`

  
  *   :py:attr:`id`

  
  These are the resource's available attributes:
  
  *   :py:attr:`e_tag`

  
  *   :py:attr:`is_latest`

  
  *   :py:attr:`key`

  
  *   :py:attr:`last_modified`

  
  *   :py:attr:`owner`

  
  *   :py:attr:`size`

  
  *   :py:attr:`storage_class`

  
  *   :py:attr:`version_id`

  
  These are the resource's available actions:
  
  *   :py:meth:`delete()`

  
  *   :py:meth:`get()`

  
  *   :py:meth:`get_available_subresources()`

  
  *   :py:meth:`head()`

  
  These are the resource's available sub-resources:
  
  *   :py:meth:`Object()`

  
  .. rst-class:: admonition-title
  
  Identifiers
  
  Identifiers are properties of a resource that are set upon instantation of the resource.
  For more information about identifiers refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: bucket_name

    *(string)* The ObjectVersion's bucket_name identifier. This **must** be set.

  .. py:attribute:: object_key

    *(string)* The ObjectVersion's object_key identifier. This **must** be set.

  .. py:attribute:: id

    *(string)* The ObjectVersion's id identifier. This **must** be set.
  .. rst-class:: admonition-title
  
  Attributes
  
  Attributes provide access to the properties of a resource. Attributes are lazy-loaded the first time one is accessed via the :py:meth:`load` method.
  For more information about attributes refer to the :ref:`Resources Introduction Guide<identifiers_attributes_intro>`.
  

  .. py:attribute:: e_tag

    

    - *(string) --* 

      The entity tag is an MD5 hash of that version of the object.

      

  .. py:attribute:: is_latest

    

    - *(boolean) --* 

      Specifies whether the object is (true) or is not (false) the latest version of an object.

      

  .. py:attribute:: key

    

    - *(string) --* 

      The object key.

      

  .. py:attribute:: last_modified

    

    - *(datetime) --* 

      Date and time the object was last modified.

      

  .. py:attribute:: owner

    

    - *(dict) --* 

      Specifies the owner of the object.

      
      

      - **DisplayName** *(string) --* 

        Container for the display name of the owner.

        
      

      - **ID** *(string) --* 

        Container for the ID of the owner.

        
  

  .. py:attribute:: size

    

    - *(integer) --* 

      Size in bytes of the object.

      

  .. py:attribute:: storage_class

    

    - *(string) --* 

      The class of storage used to store the object.

      

  .. py:attribute:: version_id

    

    - *(string) --* 

      Version ID of an object.

      
  .. rst-class:: admonition-title
  
  Actions
  
  Actions call operations on resources.  They may automatically handle the passing in of arguments set from identifiers and some attributes.
  For more information about actions refer to the :ref:`Resources Introduction Guide<actions_intro>`.
  

  .. py:method:: delete(**kwargs)

    

    Removes the null version (if there is one) of an object and inserts a delete marker, which becomes the latest version of the object. If there isn't a null version, Amazon S3 does not remove any objects.

     

    To remove a specific version, you must be the bucket owner and you must use the version Id subresource. Using this subresource permanently deletes the version. If the object deleted is a delete marker, Amazon S3 sets the response header, ``x-amz-delete-marker`` , to true. 

     

    If the object you want to delete is in a bucket where the bucket versioning configuration is MFA Delete enabled, you must include the ``x-amz-mfa`` request header in the DELETE ``versionId`` request. Requests that include ``x-amz-mfa`` must use HTTPS. 

     

    For more information about MFA Delete, see `Using MFA Delete <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMFADelete.html>`__ . To see sample requests that use versioning, see `Sample Request <https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectDELETE.html#ExampleVersionObjectDelete>`__ . 

     

    You can delete objects by explicitly calling the DELETE Object API or configure its lifecycle ( PutBucketLifecycle ) to enable Amazon S3 to remove them for you. If you want to block users or accounts from removing or deleting objects from your bucket, you must deny them the ``s3:DeleteObject`` , ``s3:DeleteObjectVersion`` , and ``s3:PutLifeCycleConfiguration`` actions. 

     

    The following operation is related to ``DeleteObject`` :

     

     
    *  PutObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteObject>`_    


    **Request Syntax** 
    ::

      response = object_version.delete(
          MFA='string',
          RequestPayer='requester'
      )
    :type MFA: string
    :param MFA: 

      The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA delete enabled.

      

    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'DeleteMarker': True|False,
            'VersionId': 'string',
            'RequestCharged': 'requester'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **DeleteMarker** *(boolean) --* Not returned by COS.
        

        - **VersionId** *(string) --* 

          Returns the version ID of the delete marker created as a result of the DELETE operation.

          
        

        - **RequestCharged** *(string) --* Not returned by COS.
    

  .. py:method:: get(**kwargs)

    

    Retrieves objects from Amazon S3. To use ``GET`` , you must have ``READ`` access to the object. If you grant ``READ`` access to the anonymous user, you can return the object without using an authorization header.

     

    An Amazon S3 bucket has no directory hierarchy such as you would find in a typical computer file system. You can, however, create a logical hierarchy by using object key names that imply a folder structure. For example, instead of naming an object ``sample.jpg`` , you can name it ``photos/2006/February/sample.jpg`` .

     

    To get an object from such a logical hierarchy, specify the full key name for the object in the ``GET`` operation. For a virtual hosted-style request example, if you have the object ``photos/2006/February/sample.jpg`` , specify the resource as ``/photos/2006/February/sample.jpg`` . For a path-style request example, if you have the object ``photos/2006/February/sample.jpg`` in the bucket named ``examplebucket`` , specify the resource as ``/examplebucket/photos/2006/February/sample.jpg`` . For more information about request types, see `HTTP Host Header Bucket Specification <https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html#VirtualHostingSpecifyBucket>`__ .

     

    To distribute large files to many people, you can save bandwidth costs by using BitTorrent. For more information, see `Amazon S3 Torrent <https://docs.aws.amazon.com/AmazonS3/latest/dev/S3Torrent.html>`__ . For more information about returning the ACL of an object, see  GetObjectAcl .

     

    If the object you are retrieving is stored in the GLACIER or DEEP_ARCHIVE storage classes, before you can retrieve the object you must first restore a copy using . Otherwise, this operation returns an ``InvalidObjectStateError`` error. For information about restoring archived objects, see `Restoring Archived Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html>`__ .

     

    Encryption request headers, like ``x-amz-server-side-encryption`` , should not be sent for GET requests if your object uses server-side encryption with CMKs stored in AWS KMS (SSE-KMS) or server-side encryption with Amazon S3–managed encryption keys (SSE-S3). If your object does use these types of keys, you’ll get an HTTP 400 BadRequest error.

     

    If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object, you must use the following headers:

     

     
    * x-amz-server-side​-encryption​-customer-algorithm 
     
    * x-amz-server-side​-encryption​-customer-key 
     
    * x-amz-server-side​-encryption​-customer-key-MD5 
     

     

    For more information about SSE-C, see `Server-Side Encryption (Using Customer-Provided Encryption Keys) <https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html>`__ .

     

    Assuming you have permission to read object tags (permission for the ``s3:GetObjectVersionTagging`` action), the response also returns the ``x-amz-tagging-count`` header that provides the count of number of tags associated with the object. You can use  GetObjectTagging to retrieve the tag set associated with an object.

     

     **Permissions**  

     

    You need the ``s3:GetObject`` permission for this operation. For more information, see `Specifying Permissions in a Policy <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html>`__ . If the object you request does not exist, the error Amazon S3 returns depends on whether you also have the ``s3:ListBucket`` permission.

     

     
    * If you have the ``s3:ListBucket`` permission on the bucket, Amazon S3 will return an HTTP status code 404 ("no such key") error. 
     
    * If you don’t have the ``s3:ListBucket`` permission, Amazon S3 will return an HTTP status code 403 ("access denied") error. 
     

     

     **Versioning**  

     

    By default, the GET operation returns the current version of an object. To return a different version, use the ``versionId`` subresource.

     

    .. note::

       

      If the current version of the object is a delete marker, Amazon S3 behaves as if the object was deleted and includes ``x-amz-delete-marker: true`` in the response.

       

     

    For more information about versioning, see  PutBucketVersioning . 

     

     **Overriding Response Header Values**  

     

    There are times when you want to override certain response header values in a GET response. For example, you might override the Content-Disposition response header value in your GET request.

     

    You can override values for a set of response headers using the following query parameters. These response header values are sent only on a successful request, that is, when status code 200 OK is returned. The set of headers you can override using these parameters is a subset of the headers that Amazon S3 accepts when you create an object. The response headers that you can override for the GET response are ``Content-Type`` , ``Content-Language`` , ``Expires`` , ``Cache-Control`` , ``Content-Disposition`` , and ``Content-Encoding`` . To override these header values in the GET response, you use the following request parameters.

     

    .. note::

       

      You must sign the request, either using an Authorization header or a presigned URL, when using these parameters. They cannot be used with an unsigned (anonymous) request.

       

     

     
    * ``response-content-type``   
     
    * ``response-content-language``   
     
    * ``response-expires``   
     
    * ``response-cache-control``   
     
    * ``response-content-disposition``   
     
    * ``response-content-encoding``   
     

     

     **Additional Considerations about Request Headers**  

     

    If both of the ``If-Match`` and ``If-Unmodified-Since`` headers are present in the request as follows: ``If-Match`` condition evaluates to ``true`` , and; ``If-Unmodified-Since`` condition evaluates to ``false`` ; then, S3 returns 200 OK and the data requested. 

     

    If both of the ``If-None-Match`` and ``If-Modified-Since`` headers are present in the request as follows:``If-None-Match`` condition evaluates to ``false`` , and; ``If-Modified-Since`` condition evaluates to ``true`` ; then, S3 returns 304 Not Modified response code.

     

    For more information about conditional requests, see `RFC 7232 <https://tools.ietf.org/html/rfc7232>`__ .

     

    The following operations are related to ``GetObject`` :

     

     
    *  ListBuckets   
     
    *  GetObjectAcl   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/GetObject>`_    


    **Request Syntax** 
    ::

      response = object_version.get(
          IfMatch='string',
          IfModifiedSince=datetime(2015, 1, 1),
          IfNoneMatch='string',
          IfUnmodifiedSince=datetime(2015, 1, 1),
          MirrorDestination='string',
          Range='string',
          ResponseCacheControl='string',
          ResponseContentDisposition='string',
          ResponseContentEncoding='string',
          ResponseContentLanguage='string',
          ResponseContentType='string',
          ResponseExpires=datetime(2015, 1, 1),
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester',
          PartNumber=123
      )
    :type IfMatch: string
    :param IfMatch: 

      Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).

      

    
    :type IfModifiedSince: datetime
    :param IfModifiedSince: 

      Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).

      

    
    :type IfNoneMatch: string
    :param IfNoneMatch: 

      Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).

      

    
    :type IfUnmodifiedSince: datetime
    :param IfUnmodifiedSince: 

      Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Range: string
    :param Range: 

      Downloads the specified range bytes of an object. For more information about the HTTP Range header, see `http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35 .

      

    
    :type ResponseCacheControl: string
    :param ResponseCacheControl: 

      Sets the ``Cache-Control`` header of the response.

      

    
    :type ResponseContentDisposition: string
    :param ResponseContentDisposition: 

      Sets the ``Content-Disposition`` header of the response

      

    
    :type ResponseContentEncoding: string
    :param ResponseContentEncoding: 

      Sets the ``Content-Encoding`` header of the response.

      

    
    :type ResponseContentLanguage: string
    :param ResponseContentLanguage: 

      Sets the ``Content-Language`` header of the response.

      

    
    :type ResponseContentType: string
    :param ResponseContentType: 

      Sets the ``Content-Type`` header of the response.

      

    
    :type ResponseExpires: datetime
    :param ResponseExpires: 

      Sets the ``Expires`` header of the response.

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PartNumber: integer
    :param PartNumber: 

      Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Body': StreamingBody(),
            'DeleteMarker': True|False,
            'AcceptRanges': 'string',
            'Expiration': 'string',
            'Restore': 'string',
            'LastModified': datetime(2015, 1, 1),
            'ContentLength': 123,
            'ETag': 'string',
            'MissingMeta': 123,
            'VersionId': 'string',
            'CacheControl': 'string',
            'ContentDisposition': 'string',
            'ContentEncoding': 'string',
            'ContentLanguage': 'string',
            'ContentRange': 'string',
            'ContentType': 'string',
            'Expires': datetime(2015, 1, 1),
            'WebsiteRedirectLocation': 'string',
            'ServerSideEncryption': 'AES256',
            'Metadata': {
                'string': 'string'
            },
            'RetentionExpirationDate': datetime(2015, 1, 1),
            'RetentionLegalHoldCount': 123,
            'RetentionPeriod': 123,
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'RequestCharged': 'requester',
            'ReplicationStatus': 'COMPLETE'|'PENDING'|'FAILED'|'REPLICA',
            'PartsCount': 123,
            'IbmRestoredCopyStorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'IbmTransition': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Body** (:class:`.StreamingBody`) -- 

          Object data.

          
        

        - **DeleteMarker** *(boolean) --* Not returned by COS.
        

        - **AcceptRanges** *(string) --* 

          Indicates that a range of bytes was specified.

          
        

        - **Expiration** *(string) --* 

          If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key-value pairs providing object expiration information. The value of the rule-id is URL encoded.

          
        

        - **Restore** *(string) --* 

          Provides information about object restoration operation and expiration time of the restored object copy.

          
        

        - **LastModified** *(datetime) --* 

          Last modified date of the object

          
        

        - **ContentLength** *(integer) --* 

          Size of the body in bytes.

          
        

        - **ETag** *(string) --* 

          An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.

          
        

        - **MissingMeta** *(integer) --* 

          This is set to the number of metadata entries not returned in ``x-amz-meta`` headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.

          
        

        - **VersionId** *(string) --* 

          Version of the object.

          
        

        - **CacheControl** *(string) --* 

          Specifies caching behavior along the request/reply chain.

          
        

        - **ContentDisposition** *(string) --* 

          Specifies presentational information for the object.

          
        

        - **ContentEncoding** *(string) --* 

          Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.

          
        

        - **ContentLanguage** *(string) --* 

          The language the content is in.

          
        

        - **ContentRange** *(string) --* 

          The portion of the object returned in the response.

          
        

        - **ContentType** *(string) --* 

          A standard MIME type describing the format of the object data.

          
        

        - **Expires** *(datetime) --* 

          The date and time at which the object is no longer cacheable.

          
        

        - **WebsiteRedirectLocation** *(string) --* 

          If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.

          
        

        - **ServerSideEncryption** *(string) --* 

          The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **Metadata** *(dict) --* 

          A map of metadata to store with the object in S3.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **RetentionExpirationDate** *(datetime) --* Date on which it will be legal to delete or modify the object. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used. 
        

        - **RetentionLegalHoldCount** *(integer) --* Returns the count of legal holds on the object. If there are no legal holds, the header is not returned
        

        - **RetentionPeriod** *(integer) --* Retention period to store on the object in seconds. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* Ignored by COS if present.
        

        - **StorageClass** *(string) --* 

          Provides storage class information of the object. Amazon S3 returns this header for all objects except for Standard storage class objects.

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
        

        - **ReplicationStatus** *(string) --* 

          Amazon S3 can return this if your request involves a bucket that is either a source or destination in a replication rule.

          
        

        - **PartsCount** *(integer) --* 

          The count of parts this object has.

          
        

        - **IbmRestoredCopyStorageClass** *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.
        

        - **IbmTransition** *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.
    

  .. py:method:: get_available_subresources()

        
    Returns a list of all the available sub-resources for this
    Resource.
    
    :returns: A list containing the name of each sub-resource for this
        resource
    :rtype: list of str


  .. py:method:: head(**kwargs)

    

    The HEAD operation retrieves metadata from an object without returning the object itself. This operation is useful if you're only interested in an object's metadata. To use HEAD, you must have READ access to the object.

     

    A ``HEAD`` request has the same options as a ``GET`` operation on an object. The response is identical to the ``GET`` response except that there is no response body.

     

    If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when you retrieve the metadata from the object, you must use the following headers:

     

     
    * x-amz-server-side​-encryption​-customer-algorithm 
     
    * x-amz-server-side​-encryption​-customer-key 
     
    * x-amz-server-side​-encryption​-customer-key-MD5 
     

     

    For more information about SSE-C, see `Server-Side Encryption (Using Customer-Provided Encryption Keys) <https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html>`__ .

     

    .. note::

       

      Encryption request headers, like ``x-amz-server-side-encryption`` , should not be sent for GET requests if your object uses server-side encryption with CMKs stored in AWS KMS (SSE-KMS) or server-side encryption with Amazon S3–managed encryption keys (SSE-S3). If your object does use these types of keys, you’ll get an HTTP 400 BadRequest error.

       

     

    Request headers are limited to 8 KB in size. For more information, see `Common Request Headers <https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html>`__ .

     

    Consider the following when using request headers:

     

     
    * Consideration 1 – If both of the ``If-Match`` and ``If-Unmodified-Since`` headers are present in the request as follows: 

       
      * ``If-Match`` condition evaluates to ``true`` , and; 
       
      * ``If-Unmodified-Since`` condition evaluates to ``false`` ; 
       

     

    Then Amazon S3 returns ``200 OK`` and the data requested.

     
     
    * Consideration 2 – If both of the ``If-None-Match`` and ``If-Modified-Since`` headers are present in the request as follows: 

       
      * ``If-None-Match`` condition evaluates to ``false`` , and; 
       
      * ``If-Modified-Since`` condition evaluates to ``true`` ; 
       

     

    Then Amazon S3 returns the ``304 Not Modified`` response code.

     
     

     

    For more information about conditional requests, see `RFC 7232 <https://tools.ietf.org/html/rfc7232>`__ .

     

     **Permissions**  

     

    You need the ``s3:GetObject`` permission for this operation. For more information, see `Specifying Permissions in a Policy <https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html>`__ . If the object you request does not exist, the error Amazon S3 returns depends on whether you also have the s3:ListBucket permission.

     

     
    * If you have the ``s3:ListBucket`` permission on the bucket, Amazon S3 returns an HTTP status code 404 ("no such key") error. 
     
    * If you don’t have the ``s3:ListBucket`` permission, Amazon S3 returns an HTTP status code 403 ("access denied") error. 
     

     

    The following operation is related to ``HeadObject`` :

     

     
    *  GetObject   
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadObject>`_    


    **Request Syntax** 
    ::

      response = object_version.head(
          IfMatch='string',
          IfModifiedSince=datetime(2015, 1, 1),
          IfNoneMatch='string',
          IfUnmodifiedSince=datetime(2015, 1, 1),
          MirrorDestination='string',
          Range='string',
          SSECustomerAlgorithm='string',
          SSECustomerKey='string',
          RequestPayer='requester',
          PartNumber=123
      )
    :type IfMatch: string
    :param IfMatch: 

      Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).

      

    
    :type IfModifiedSince: datetime
    :param IfModifiedSince: 

      Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).

      

    
    :type IfNoneMatch: string
    :param IfNoneMatch: 

      Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).

      

    
    :type IfUnmodifiedSince: datetime
    :param IfUnmodifiedSince: 

      Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).

      

    
    :type MirrorDestination: string
    :param MirrorDestination: Mirror source for object reads.

    
    :type Range: string
    :param Range: 

      Downloads the specified range bytes of an object. For more information about the HTTP Range header, see `http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35 .

      

    
    :type SSECustomerAlgorithm: string
    :param SSECustomerAlgorithm: 

      Specifies the algorithm to use to when encrypting the object (for example, AES256).

      

    
    :type SSECustomerKey: string
    :param SSECustomerKey: 

      Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side​-encryption​-customer-algorithm`` header.

      

    
    :type SSECustomerKeyMD5: string
    :param SSECustomerKeyMD5: 

      Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

            Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



    
    :type RequestPayer: string
    :param RequestPayer: Ignored by COS if present.

    
    :type PartNumber: integer
    :param PartNumber: 

      Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'DeleteMarker': True|False,
            'AcceptRanges': 'string',
            'Expiration': 'string',
            'Restore': 'string',
            'LastModified': datetime(2015, 1, 1),
            'ContentLength': 123,
            'ETag': 'string',
            'MissingMeta': 123,
            'VersionId': 'string',
            'CacheControl': 'string',
            'ContentDisposition': 'string',
            'ContentEncoding': 'string',
            'ContentLanguage': 'string',
            'ContentType': 'string',
            'Expires': datetime(2015, 1, 1),
            'WebsiteRedirectLocation': 'string',
            'ServerSideEncryption': 'AES256',
            'Metadata': {
                'string': 'string'
            },
            'RetentionExpirationDate': datetime(2015, 1, 1),
            'RetentionLegalHoldCount': 123,
            'RetentionPeriod': 123,
            'SSECustomerAlgorithm': 'string',
            'SSECustomerKeyMD5': 'string',
            'SSEKMSKeyId': 'string',
            'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'RequestCharged': 'requester',
            'ReplicationStatus': 'COMPLETE'|'PENDING'|'FAILED'|'REPLICA',
            'PartsCount': 123,
            'IbmRestoredCopyStorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE',
            'IbmTransition': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **DeleteMarker** *(boolean) --* Not returned by COS.
        

        - **AcceptRanges** *(string) --* 

          Indicates that a range of bytes was specified.

          
        

        - **Expiration** *(string) --* 

          If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key-value pairs providing object expiration information. The value of the rule-id is URL encoded.

          
        

        - **Restore** *(string) --* 

          If the object is an archived object (an object whose storage class is GLACIER), the response includes this header if either the archive restoration is in progress (see  RestoreObject or an archive copy is already restored.

           

          If an archive copy is already restored, the header value indicates when Amazon S3 is scheduled to delete the object copy. For example:

           

           ``x-amz-restore: ongoing-request="false", expiry-date="Fri, 23 Dec 2012 00:00:00 GMT"``  

           

          If the object restoration is in progress, the header returns the value ``ongoing-request="true"`` .

           

          For more information about archiving objects, see `Transitioning Objects\: General Considerations <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-transition-general-considerations>`__ .

          
        

        - **LastModified** *(datetime) --* 

          Last modified date of the object

          
        

        - **ContentLength** *(integer) --* 

          Size of the body in bytes.

          
        

        - **ETag** *(string) --* 

          An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.

          
        

        - **MissingMeta** *(integer) --* 

          This is set to the number of metadata entries not returned in ``x-amz-meta`` headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.

          
        

        - **VersionId** *(string) --* 

          Version of the object.

          
        

        - **CacheControl** *(string) --* 

          Specifies caching behavior along the request/reply chain.

          
        

        - **ContentDisposition** *(string) --* 

          Specifies presentational information for the object.

          
        

        - **ContentEncoding** *(string) --* 

          Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.

          
        

        - **ContentLanguage** *(string) --* 

          The language the content is in.

          
        

        - **ContentType** *(string) --* 

          A standard MIME type describing the format of the object data.

          
        

        - **Expires** *(datetime) --* 

          The date and time at which the object is no longer cacheable.

          
        

        - **WebsiteRedirectLocation** *(string) --* 

          If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.

          
        

        - **ServerSideEncryption** *(string) --* 

          If the object is stored using server-side encryption either with an AWS KMS customer master key (CMK) or an Amazon S3-managed encryption key, the response includes this header with the value of the server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).

          
        

        - **Metadata** *(dict) --* 

          A map of metadata to store with the object in S3.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **RetentionExpirationDate** *(datetime) --* Date on which it will be legal to delete or modify the object. You can only specify this or the Retention-Period header. If both are specified a 400 error will be returned. If neither is specified the bucket's DefaultRetention period will be used. 
        

        - **RetentionLegalHoldCount** *(integer) --* Returns the count of legal holds on the object. If there are no legal holds, the header is not returned
        

        - **RetentionPeriod** *(integer) --* Retention period to store on the object in seconds. If this field and Retention-Expiration-Date are specified a 400 error is returned. If neither is specified the bucket's DefaultRetention period will be used. 0 is a legal value assuming the bucket's minimum retention period is also 0.
        

        - **SSECustomerAlgorithm** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

          
        

        - **SSECustomerKeyMD5** *(string) --* 

          If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

          
        

        - **SSEKMSKeyId** *(string) --* Not returned by COS.
        

        - **StorageClass** *(string) --* 

          Provides storage class information of the object. Amazon S3 returns this header for all objects except for Standard storage class objects.

           

          For more information, see `Storage Classes <https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html>`__ .

          
        

        - **RequestCharged** *(string) --* 

          If present, indicates that the requester was successfully charged for the request.

          
        

        - **ReplicationStatus** *(string) --* 

          Amazon S3 can return this header if your request involves a bucket that is either a source or destination in a replication rule.

           

          In replication, you have a source bucket on which you configure replication and destination bucket where Amazon S3 stores object replicas. When you request an object (``GetObject`` ) or object metadata (``HeadObject`` ) from these buckets, Amazon S3 will return the ``x-amz-replication-status`` header in the response as follows:

           

           
          * If requesting an object from the source bucket — Amazon S3 will return the ``x-amz-replication-status`` header if the object in your request is eligible for replication. For example, suppose that in your replication configuration, you specify object prefix ``TaxDocs`` requesting Amazon S3 to replicate objects with key prefix ``TaxDocs`` . Any objects you upload with this key name prefix, for example ``TaxDocs/document1.pdf`` , are eligible for replication. For any object request with this key name prefix, Amazon S3 will return the ``x-amz-replication-status`` header with value PENDING, COMPLETED or FAILED indicating object replication status. 
           
          * If requesting an object from the destination bucket — Amazon S3 will return the ``x-amz-replication-status`` header with value REPLICA if the object in your request is a replica that Amazon S3 created. 
           

           

          For more information, see `Replication <https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html>`__ .

          
        

        - **PartsCount** *(integer) --* 

          The count of parts this object has.

          
        

        - **IbmRestoredCopyStorageClass** *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.
        

        - **IbmTransition** *(string) --* This header is only included if an object has transition metadata. This header will indicate the transition storage class and time of transition. If this header and the x-amz-restore header are both included, this header will indicate the time at which the object was originally archived.
    
  .. rst-class:: admonition-title
  
  Sub-resources
  
  Sub-resources are methods that create a new instance of a child resource. This resource's identifiers get passed along to the child.
  For more information about sub-resources refer to the :ref:`Resources Introduction Guide<subresources_intro>`.
  

  .. py:method:: Object()

    Creates a Object resource.::

      object = object_version.Object()

    
    :rtype: :py:class:`S3.Object`
    :returns: A Object resource
    