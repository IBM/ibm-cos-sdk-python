:doc:`S3 <../../s3>` / Client / delete_bucket_lifecycle

***********************
delete_bucket_lifecycle
***********************



.. py:method:: S3.Client.delete_bucket_lifecycle(**kwargs)

  

  .. note::

    

    This operation is not supported by directory buckets.

    

   

  Deletes the lifecycle configuration from the specified bucket. Amazon S3 removes all the lifecycle configuration rules in the lifecycle subresource associated with the bucket. Your objects never expire, and Amazon S3 no longer automatically deletes any objects on the basis of rules contained in the deleted lifecycle configuration.

   

  To use this operation, you must have permission to perform the ``s3:PutLifecycleConfiguration`` action. By default, the bucket owner has this permission and the bucket owner can grant this permission to others.

   

  There is usually some time lag before lifecycle configuration deletion is fully propagated to all the Amazon S3 systems.

   

  For more information about the object expiration, see `Elements to Describe Lifecycle Actions <https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#intro-lifecycle-rules-actions>`__.

   

  Related actions include:

   

  
  * `PutBucketLifecycleConfiguration <https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html>`__
   
  * `GetBucketLifecycleConfiguration <https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLifecycleConfiguration.html>`__
  

  

  See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteBucketLifecycle>`_  


  **Request Syntax**
  ::

    response = client.delete_bucket_lifecycle(
        Bucket='string',
        ExpectedBucketOwner='string'
    )
    
  :type Bucket: string
  :param Bucket: **[REQUIRED]** 

    The bucket name of the lifecycle to delete.

    

  
  :type ExpectedBucketOwner: string
  :param ExpectedBucketOwner: Ignored by COS if present.

  
  
  :returns: None

  **Examples**

  The following example deletes lifecycle configuration on a bucket.
  ::

    response = client.delete_bucket_lifecycle(
        Bucket='examplebucket',
    )
    
    print(response)

  
  Expected Output:
  ::

    {
        'ResponseMetadata': {
            '...': '...',
        },
    }

  