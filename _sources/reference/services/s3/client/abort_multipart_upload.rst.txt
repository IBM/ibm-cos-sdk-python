:doc:`S3 <../../s3>` / Client / abort_multipart_upload

**********************
abort_multipart_upload
**********************



.. py:method:: S3.Client.abort_multipart_upload(**kwargs)

  

  This action aborts a multipart upload. After a multipart upload is aborted, no additional parts can be uploaded using that upload ID. The storage consumed by any previously uploaded parts will be freed. However, if any part uploads are currently in progress, those part uploads might or might not succeed. As a result, it might be necessary to abort a given multipart upload multiple times in order to completely free all storage consumed by all parts.

   

  To verify that all parts have been removed, so you don't get charged for the part storage, you should call the `ListParts <https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html>`__ action and ensure that the parts list is empty.

   

  For information about permissions required to use the multipart upload, see `Multipart Upload and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__.

   

  The following operations are related to ``AbortMultipartUpload``:

   

  
  * `CreateMultipartUpload <https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html>`__
   
  * `UploadPart <https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html>`__
   
  * `CompleteMultipartUpload <https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html>`__
   
  * `ListParts <https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html>`__
   
  * `ListMultipartUploads <https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html>`__
  

  

  See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/AbortMultipartUpload>`_  


  **Request Syntax**
  ::

    response = client.abort_multipart_upload(
        Bucket='string',
        Key='string',
        UploadId='string',
        RequestPayer='requester',
        ExpectedBucketOwner='string'
    )
    
  :type Bucket: string
  :param Bucket: **[REQUIRED]** 

    The bucket name to which the upload was taking place.

     

    When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName*-*AccountId*.s3-accesspoint.*Region*.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using access points <https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html>`__ in the *Amazon S3 User Guide*.

     

    When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form ``AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com``. When using this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see `Using Amazon S3 on Outposts <https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html>`__ in the *Amazon S3 User Guide*.

    

  
  :type Key: string
  :param Key: **[REQUIRED]** 

    Key of the object for which the multipart upload was initiated.

    

  
  :type UploadId: string
  :param UploadId: **[REQUIRED]** 

    Upload ID that identifies the multipart upload.

    

  
  :type RequestPayer: string
  :param RequestPayer: Ignored by COS if present.

  
  :type ExpectedBucketOwner: string
  :param ExpectedBucketOwner: Ignored by COS if present.

  
  
  :rtype: dict
  :returns: 
    
    **Response Syntax**

    
    ::

      {
          'RequestCharged': 'requester'
      }
      
    **Response Structure**

    

    - *(dict) --* 
      

      - **RequestCharged** *(string) --* 

        If present, indicates that the requester was successfully charged for the request.

        
  
  **Exceptions**
  
  *   :py:class:`S3.Client.exceptions.NoSuchUpload`

  

  **Examples**

  The following example aborts a multipart upload.
  ::

    response = client.abort_multipart_upload(
        Bucket='examplebucket',
        Key='bigobject',
        UploadId='xadcOB_7YPBOJuoFiQ9cz4P3Pe6FIZwO4f7wN93uHsNBEw97pl5eNwzExg0LAT2dUN91cOmrEQHDsP3WA60CEg--',
    )
    
    print(response)

  
  Expected Output:
  ::

    {
        'ResponseMetadata': {
            '...': '...',
        },
    }

  