:doc:`S3 <../../s3>` / Client / delete_object_tagging

*********************
delete_object_tagging
*********************



.. py:method:: S3.Client.delete_object_tagging(**kwargs)

  

  .. note::

    

    This operation is not supported by directory buckets.

    

   

  Removes the entire tag set from the specified object. For more information about managing object tags, see `Object Tagging <https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html>`__.

   

  To use this operation, you must have permission to perform the ``s3:DeleteObjectTagging`` action.

   

  To delete tags of a specific object version, add the ``versionId`` query parameter in the request. You will need permission for the ``s3:DeleteObjectVersionTagging`` action.

   

  The following operations are related to ``DeleteObjectTagging``:

   

  
  * `PutObjectTagging <https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html>`__
   
  * `GetObjectTagging <https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html>`__
  

  

  See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/DeleteObjectTagging>`_  


  **Request Syntax**
  ::

    response = client.delete_object_tagging(
        Bucket='string',
        Key='string',
        VersionId='string',
        ExpectedBucketOwner='string'
    )
    
  :type Bucket: string
  :param Bucket: **[REQUIRED]** 

    The bucket name containing the objects from which to remove the tags.

     

    **Access points** - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName*-*AccountId*.s3-accesspoint.*Region*.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using access points <https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html>`__ in the *Amazon S3 User Guide*.

     

    **S3 on Outposts** - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form ``AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com``. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see `What is S3 on Outposts? <https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html>`__ in the *Amazon S3 User Guide*.

    

  
  :type Key: string
  :param Key: **[REQUIRED]** 

    The key that identifies the object in the bucket from which to remove all tags.

    

  
  :type VersionId: string
  :param VersionId: 

    The versionId of the object that the tag-set will be removed from.

    

  
  :type ExpectedBucketOwner: string
  :param ExpectedBucketOwner: Ignored by COS if present.

  
  
  :rtype: dict
  :returns: 
    
    **Response Syntax**

    
    ::

      {
          'VersionId': 'string'
      }
      
    **Response Structure**

    

    - *(dict) --* 
      

      - **VersionId** *(string) --* 

        The versionId of the object the tag-set was removed from.

        
  

  **Examples**

  The following example removes tag set associated with the specified object version. The request specifies both the object key and object version.
  ::

    response = client.delete_object_tagging(
        Bucket='examplebucket',
        Key='HappyFace.jpg',
        VersionId='ydlaNkwWm0SfKJR.T1b1fIdPRbldTYRI',
    )
    
    print(response)

  
  Expected Output:
  ::

    {
        'VersionId': 'ydlaNkwWm0SfKJR.T1b1fIdPRbldTYRI',
        'ResponseMetadata': {
            '...': '...',
        },
    }

  

  The following example removes tag set associated with the specified object. If the bucket is versioning enabled, the operation removes tag set from the latest object version.
  ::

    response = client.delete_object_tagging(
        Bucket='examplebucket',
        Key='HappyFace.jpg',
    )
    
    print(response)

  
  Expected Output:
  ::

    {
        'VersionId': 'null',
        'ResponseMetadata': {
            '...': '...',
        },
    }

  