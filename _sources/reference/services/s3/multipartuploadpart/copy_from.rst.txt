:doc:`MultipartUploadPart <index>` / Action / copy_from

*********
copy_from
*********



.. py:method:: S3.MultipartUploadPart.copy_from(**kwargs)

  

  Uploads a part by copying data from an existing object as data source. You specify the data source by adding the request header ``x-amz-copy-source`` in your request and a byte range by adding the request header ``x-amz-copy-source-range`` in your request.

   

  The minimum allowable part size for a multipart upload is 5 MB. For more information about multipart upload limits, go to `Quick Facts <https://docs.aws.amazon.com/AmazonS3/latest/dev/qfacts.html>`__ in the *Amazon S3 User Guide*.

   

  .. note::

    

    Instead of using an existing object as part data, you might use the `UploadPart <https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html>`__ action and provide data in your request.

    

   

  You must initiate a multipart upload before you can upload any part. In response to your initiate request. Amazon S3 returns a unique identifier, the upload ID, that you must include in your upload part request.

   

  For more information about using the ``UploadPartCopy`` operation, see the following:

   

  
  * For conceptual information about multipart uploads, see `Uploading Objects Using Multipart Upload <https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html>`__ in the *Amazon S3 User Guide*.
   
  * For information about permissions required to use the multipart upload API, see `Multipart Upload and Permissions <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html>`__ in the *Amazon S3 User Guide*.
   
  * For information about copying objects using a single atomic action vs. a multipart upload, see `Operations on Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectOperations.html>`__ in the *Amazon S3 User Guide*.
   
  * For information about using server-side encryption with customer-provided encryption keys with the ``UploadPartCopy`` operation, see `CopyObject <https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html>`__ and `UploadPart <https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html>`__.
  

   

  Note the following additional considerations about the request headers ``x-amz-copy-source-if-match``, ``x-amz-copy-source-if-none-match``, ``x-amz-copy-source-if-unmodified-since``, and ``x-amz-copy-source-if-modified-since``:

   

  

   

  
  * **Consideration 1** - If both of the ``x-amz-copy-source-if-match`` and ``x-amz-copy-source-if-unmodified-since`` headers are present in the request as follows: ``x-amz-copy-source-if-match`` condition evaluates to ``true``, and; ``x-amz-copy-source-if-unmodified-since`` condition evaluates to ``false``; Amazon S3 returns ``200 OK`` and copies the data.
   
  * **Consideration 2** - If both of the ``x-amz-copy-source-if-none-match`` and ``x-amz-copy-source-if-modified-since`` headers are present in the request as follows: ``x-amz-copy-source-if-none-match`` condition evaluates to ``false``, and; ``x-amz-copy-source-if-modified-since`` condition evaluates to ``true``; Amazon S3 returns ``412 Precondition Failed`` response code.
  

   

  **Versioning**

   

  If your bucket has versioning enabled, you could have multiple versions of the same object. By default, ``x-amz-copy-source`` identifies the current version of the object to copy. If the current version is a delete marker and you don't specify a versionId in the ``x-amz-copy-source``, Amazon S3 returns a 404 error, because the object does not exist. If you specify versionId in the ``x-amz-copy-source`` and the versionId is a delete marker, Amazon S3 returns an HTTP 400 error, because you are not allowed to specify a delete marker as a version for the ``x-amz-copy-source``.

   

  You can optionally specify a specific version of the source object to copy by adding the ``versionId`` subresource as shown in the following example:

   

  ``x-amz-copy-source: /bucket/object?versionId=version id``

   

  **Special Errors**

   

  
  * 

    
    * *Code: NoSuchUpload*
     
    * *Cause: The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed.*
     
    * *HTTP Status Code: 404 Not Found*
    

  
   
  * 

    
    * *Code: InvalidRequest*
     
    * *Cause: The specified copy source is not supported as a byte-range copy source.*
     
    * *HTTP Status Code: 400 Bad Request*
    

  
  

   

  **Related Resources**

   

  
  * `CreateMultipartUpload <https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html>`__
   
  * `UploadPart <https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html>`__
   
  * `CompleteMultipartUpload <https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html>`__
   
  * `AbortMultipartUpload <https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html>`__
   
  * `ListParts <https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html>`__
   
  * `ListMultipartUploads <https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html>`__
  

  

  See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/UploadPartCopy>`_  


  **Request Syntax**
  ::

    response = multipart_upload_part.copy_from(
        CopySource='string' or {'Bucket': 'string', 'Key': 'string', 'VersionId': 'string'},
        CopySourceIfMatch='string',
        CopySourceIfModifiedSince=datetime(2015, 1, 1),
        CopySourceIfNoneMatch='string',
        CopySourceIfUnmodifiedSince=datetime(2015, 1, 1),
        CopySourceRange='string',
        SSECustomerAlgorithm='string',
        SSECustomerKey='string',
        CopySourceSSECustomerAlgorithm='string',
        CopySourceSSECustomerKey='string',
        RequestPayer='requester',
        ExpectedBucketOwner='string',
        ExpectedSourceBucketOwner='string'
    )
    
  :type CopySource: str or dict
  :param CopySource: **[REQUIRED]** The name of the source bucket, key name of the source object, and optional version ID of the source object.  You can either provide this value as a string or a dictionary.  The string form is {bucket}/{key} or {bucket}/{key}?versionId={versionId} if you want to copy a specific version.  You can also provide this value as a dictionary.  The dictionary format is recommended over the string format because it is more explicit.  The dictionary format is: {'Bucket': 'bucket', 'Key': 'key', 'VersionId': 'id'}.  Note that the VersionId key is optional and may be omitted. To specify an S3 access point, provide the access point ARN for the ``Bucket`` key in the copy source dictionary. If you want to provide the copy source for an S3 access point as a string instead of a dictionary, the ARN provided must be the full S3 access point object ARN (i.e. {accesspoint_arn}/object/{key})

  
  :type CopySourceIfMatch: string
  :param CopySourceIfMatch: 

    Copies the object if its entity tag (ETag) matches the specified tag.

    

  
  :type CopySourceIfModifiedSince: datetime
  :param CopySourceIfModifiedSince: 

    Copies the object if it has been modified since the specified time.

    

  
  :type CopySourceIfNoneMatch: string
  :param CopySourceIfNoneMatch: 

    Copies the object if its entity tag (ETag) is different than the specified ETag.

    

  
  :type CopySourceIfUnmodifiedSince: datetime
  :param CopySourceIfUnmodifiedSince: 

    Copies the object if it hasn't been modified since the specified time.

    

  
  :type CopySourceRange: string
  :param CopySourceRange: 

    The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You can copy a range only if the source object is greater than 5 MB.

    

  
  :type SSECustomerAlgorithm: string
  :param SSECustomerAlgorithm: 

    Specifies the algorithm to use to when encrypting the object (for example, AES256).

    

  
  :type SSECustomerKey: string
  :param SSECustomerKey: 

    Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the ``x-amz-server-side-encryption-customer-algorithm`` header. This must be the same encryption key specified in the initiate multipart upload request.

    

  
  :type SSECustomerKeyMD5: string
  :param SSECustomerKeyMD5: 

    Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

        Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



  
  :type CopySourceSSECustomerAlgorithm: string
  :param CopySourceSSECustomerAlgorithm: 

    Specifies the algorithm to use when decrypting the source object (for example, AES256).

    

  
  :type CopySourceSSECustomerKey: string
  :param CopySourceSSECustomerKey: 

    Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.

    

  
  :type CopySourceSSECustomerKeyMD5: string
  :param CopySourceSSECustomerKeyMD5: 

    Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error.

        Please note that this parameter is automatically populated if it is not provided. Including this parameter is not required



  
  :type RequestPayer: string
  :param RequestPayer: Ignored by COS if present.

  
  :type ExpectedBucketOwner: string
  :param ExpectedBucketOwner: Ignored by COS if present.

  
  :type ExpectedSourceBucketOwner: string
  :param ExpectedSourceBucketOwner: Ignored by COS if present.

  
  
  :rtype: dict
  :returns: 
    
    **Response Syntax**

    
    ::

      {
          'CopySourceVersionId': 'string',
          'CopyPartResult': {
              'ETag': 'string',
              'LastModified': datetime(2015, 1, 1)
          },
          'ServerSideEncryption': 'AES256',
          'SSECustomerAlgorithm': 'string',
          'SSECustomerKeyMD5': 'string',
          'SSEKMSKeyId': 'string',
          'RequestCharged': 'requester'
      }
      
    **Response Structure**

    

    - *(dict) --* 
      

      - **CopySourceVersionId** *(string) --* 

        The version of the source object that was copied, if you have enabled versioning on the source bucket.

        
      

      - **CopyPartResult** *(dict) --* 

        Container for all response elements.

        
        

        - **ETag** *(string) --* 

          Entity tag of the object.

          
        

        - **LastModified** *(datetime) --* 

          Date and time at which the object was uploaded.

          
    
      

      - **ServerSideEncryption** *(string) --* 

        The server-side encryption algorithm used when you store this object in Amazon S3 (for example, ``AES256``, ``aws:kms``).

         

        .. note::

          

          For directory buckets, only server-side encryption with Amazon S3 managed keys (SSE-S3) ( ``AES256``) is supported.

          

        
      

      - **SSECustomerAlgorithm** *(string) --* 

        If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.

        
      

      - **SSECustomerKeyMD5** *(string) --* 

        If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round-trip message integrity verification of the customer-provided encryption key.

        
      

      - **SSEKMSKeyId** *(string) --* Not returned by COS.
      

      - **RequestCharged** *(string) --* 

        If present, indicates that the requester was successfully charged for the request.

        
  