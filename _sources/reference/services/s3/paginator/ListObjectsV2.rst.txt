:doc:`S3 <../../s3>` / Paginator / ListObjectsV2

*************
ListObjectsV2
*************



.. py:class:: S3.Paginator.ListObjectsV2

  ::

    
    paginator = client.get_paginator('list_objects_v2')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`S3.Client.list_objects_v2`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjectsV2>`_    


    **Request Syntax**
    ::

      response_iterator = paginator.paginate(
          Bucket='string',
          Delimiter='string',
          EncodingType='url',
          Prefix='string',
          FetchOwner=True|False,
          StartAfter='string',
          ExpectedBucketOwner='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
      
    :type Bucket: string
    :param Bucket: **[REQUIRED]** 

      Bucket name to list.

       

      When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName*-*AccountId*.s3-accesspoint.*Region*.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using access points <https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html>`__ in the *Amazon S3 User Guide*.

       

      When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form ``AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com``. When using this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see `Using Amazon S3 on Outposts <https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html>`__ in the *Amazon S3 User Guide*.

      

    
    :type Delimiter: string
    :param Delimiter: 

      A delimiter is a character you use to group keys.

      

    
    :type EncodingType: string
    :param EncodingType: 

      Encoding type used by Amazon S3 to encode object keys in the response.

      

    
    :type Prefix: string
    :param Prefix: 

      Limits the response to keys that begin with the specified prefix.

      

    
    :type FetchOwner: boolean
    :param FetchOwner: 

      The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true.

      

    
    :type StartAfter: string
    :param StartAfter: 

      StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket.

      

    
    :type ExpectedBucketOwner: string
    :param ExpectedBucketOwner: Ignored by COS if present.

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax**

      
      ::

        {
            'IsTruncated': True|False,
            'Contents': [
                {
                    'Key': 'string',
                    'LastModified': datetime(2015, 1, 1),
                    'ETag': 'string',
                    'Size': 123,
                    'StorageClass': 'ACCELERATED'|'STANDARD'|'REDUCED_REDUNDANCY'|'GLACIER'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'DEEP_ARCHIVE'|'OUTPOSTS'|'GLACIER_IR',
                    'Owner': {
                        'DisplayName': 'string',
                        'ID': 'string'
                    }
                },
            ],
            'Name': 'string',
            'Prefix': 'string',
            'Delimiter': 'string',
            'MaxKeys': 123,
            'CommonPrefixes': [
                {
                    'Prefix': 'string'
                },
            ],
            'EncodingType': 'url',
            'KeyCount': 123,
            'ContinuationToken': 'string',
            'StartAfter': 'string',
            'NextToken': 'string'
        }
        
      **Response Structure**

      

      - *(dict) --* 
        

        - **IsTruncated** *(boolean) --* 

          Set to ``false`` if all of the results were returned. Set to ``true`` if more keys are available to return. If the number of results exceeds that specified by ``MaxKeys``, all of the results might not be returned.

          
        

        - **Contents** *(list) --* 

          Metadata about each object returned.

          
          

          - *(dict) --* 

            An object consists of data and its descriptive metadata.

            
            

            - **Key** *(string) --* 

              The name that you assign to an object. You use the object key to retrieve the object.

              
            

            - **LastModified** *(datetime) --* 

              Creation date of the object.

              
            

            - **ETag** *(string) --* 

              The entity tag is a hash of the object. The ETag reflects changes only to the contents of an object, not its metadata. The ETag may or may not be an MD5 digest of the object data. Whether or not it is depends on how the object was created and how it is encrypted as described below:

               

              
              * Objects created by the PUT Object, POST Object, or Copy operation, or through the Amazon Web Services Management Console, and are encrypted by SSE-S3 or plaintext, have ETags that are an MD5 digest of their object data.
               
              * Objects created by the PUT Object, POST Object, or Copy operation, or through the Amazon Web Services Management Console, and are encrypted by SSE-C or SSE-KMS, have ETags that are not an MD5 digest of their object data.
               
              * If an object is created by either the Multipart Upload or Part Copy operation, the ETag is not an MD5 digest, regardless of the method of encryption. If an object is larger than 16 MB, the Amazon Web Services Management Console will upload or copy that object as a Multipart Upload, and therefore the ETag will not be an MD5 digest.
              

               

              .. note::

                

                **Directory buckets** - MD5 is not supported by directory buckets.

                

              
            

            - **Size** *(integer) --* 

              Size in bytes of the object

              
            

            - **StorageClass** *(string) --* 

              The class of storage used to store the object.

              
            

            - **Owner** *(dict) --* 

              The owner of the object

              
              

              - **DisplayName** *(string) --* 

                Container for the display name of the owner.

                
              

              - **ID** *(string) --* 

                Container for the ID of the owner.

                
          
        
      
        

        - **Name** *(string) --* 

          The bucket name.

           

          When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form *AccessPointName*-*AccountId*.s3-accesspoint.*Region*.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see `Using access points <https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html>`__ in the *Amazon S3 User Guide*.

           

          When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form ``AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com``. When using this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see `Using Amazon S3 on Outposts <https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html>`__ in the *Amazon S3 User Guide*.

          
        

        - **Prefix** *(string) --* 

          Keys that begin with the indicated prefix.

          
        

        - **Delimiter** *(string) --* 

          Causes keys that contain the same string between the prefix and the first occurrence of the delimiter to be rolled up into a single result element in the CommonPrefixes collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up result counts as only one return against the ``MaxKeys`` value.

          
        

        - **MaxKeys** *(integer) --* 

          Sets the maximum number of keys returned in the response. By default the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more.

          
        

        - **CommonPrefixes** *(list) --* 

          All of the keys (up to 1,000) that share the same prefix are grouped together. When counting the total numbers of returns by this API operation, this group of keys is considered as one item.

           

          A response can contain ``CommonPrefixes`` only if you specify a delimiter.

           

          ``CommonPrefixes`` contains all (if there are any) keys between ``Prefix`` and the next occurrence of the string specified by a delimiter.

           

          ``CommonPrefixes`` lists keys that act like subdirectories in the directory specified by ``Prefix``.

           

          For example, if the prefix is ``notes/`` and the delimiter is a slash ( ``/``) as in ``notes/summer/july``, the common prefix is ``notes/summer/``. All of the keys that roll up into a common prefix count as a single return when calculating the number of returns.

           

          .. note::

            

            
            * **Directory buckets** - For directory buckets, only prefixes that end in a delimiter ( ``/``) are supported.
             
            * **Directory buckets** - When you query ``ListObjectsV2`` with a delimiter during in-progress multipart uploads, the ``CommonPrefixes`` response parameter contains the prefixes that are associated with the in-progress multipart uploads. For more information about multipart uploads, see `Multipart Upload Overview <https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html>`__ in the *Amazon S3 User Guide*.
            

            

          
          

          - *(dict) --* 

            Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/.

            
            

            - **Prefix** *(string) --* 

              Container for the specified common prefix.

              
        
      
        

        - **EncodingType** *(string) --* 

          Encoding type used by Amazon S3 to encode object key names in the XML response.

           

          If you specify the ``encoding-type`` request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements:

           

          ``Delimiter, Prefix, Key,`` and ``StartAfter``.

          
        

        - **KeyCount** *(integer) --* 

          ``KeyCount`` is the number of keys returned with this request. ``KeyCount`` will always be less than or equal to the ``MaxKeys`` field. For example, if you ask for 50 keys, your result will include 50 keys or fewer.

          
        

        - **ContinuationToken** *(string) --* 

          If ``ContinuationToken`` was sent with the request, it is included in the response. You can use the returned ``ContinuationToken`` for pagination of the list response. You can use this ``ContinuationToken`` for pagination of the list results.

          
        

        - **StartAfter** *(string) --* 

          If StartAfter was sent with the request, it is included in the response.

          
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    